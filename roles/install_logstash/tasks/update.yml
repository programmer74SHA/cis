---
- name: Update logstash
  block:
    - name: Check for logstash to be healthy
      uri:
        url: "http://127.0.0.1:9600?format=json"
        method: GET
        return_content: yes
        status_code: 200
        timeout: 20
      register: logstash_status
      retries: 20
      delay: 60
      until:
        - logstash_status.status == 200
        - '"green" in logstash_status.json["status"] or "yellow" in logstash_status.json["status"]'

    - name: Take Backup from logstash before update
      archive:
        path: ["/var/lib/logstash/", "/etc/logstash"]
        format: gz 
        dest:  "/var/siem/logstash-backup-V{{ hostvars[groups['BDA'][0]].installed_elasticsearch_version }}.tar.gz"
        remove: False

    - name: Shotdown logstash 
      service:
        name: logstash
        state: stopped

    - name: Remove logstash backup directory
      file:
        path: "{{ logstash_backup_folder }}"
        state: absent
        
    - name: Create tmp logstash backup directory
      file:
        path: "{{ item }}"
        state: directory 
      loop:   
        - "{{ logstash_backup_folder }}"
        - "{{ logstash_config_backup_path }}"

    - name: Backup from logstash config
      copy:
        src: /etc/logstash/
        dest:  "{{ logstash_config_backup_path }}" 
        remote_src: True

    - name: Upgrade logstash package
      apt:
        name: logstash
        state: latest

    - name: Restore from logstash config
      copy:
        src: "{{ logstash_config_backup_path }}/"  
        dest:  /etc/logstash/
        remote_src: True

    - name: Start the upgraded node
      service:
        name: logstash
        state: started
        daemon_reload: true
        enabled: yes

  tags: update
  when: "'SF' in group_names or 'COLLECTOR' in group_names"

- name: Start elastic-agent service
  service:
    name: elastic-agent
    state: started
    enabled: true
  when: elastic_agent_service_file.stat.exists