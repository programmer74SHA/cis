---
- name: "🚀 Multi-Node Elasticsearch Installation and Configuration"
  block:
    # STEP 1: Initialize and validate variables FIRST
    - name: Initialize deployment variables
      set_fact:
        # Set elasticsearch_nodes from inventory if not defined
        elasticsearch_nodes: "{{ hostvars[inventory_hostname].elasticsearch_nodes | default([]) }}"
        # Check if host has Elasticsearch nodes
        has_elasticsearch_nodes: "{{ (hostvars[inventory_hostname].elasticsearch_nodes | default([])) | length > 0 }}"

    - name: Skip hosts without Elasticsearch configuration
      meta: end_host
      when: 
        - not has_elasticsearch_nodes
        - hostvars[inventory_hostname].get('service_type', 'elasticsearch') == 'load_balancer'

    - name: Display node configuration
      debug:
        msg: |
          📋 Elasticsearch Configuration for {{ inventory_hostname }}:
          ==================================================
          Has elasticsearch_nodes: {{ has_elasticsearch_nodes }}
          Nodes to deploy: {{ elasticsearch_nodes | length }}
          {% for node in elasticsearch_nodes %}
          - {{ node.name }}: {{ node.roles | join(',') }} ({{ node.heap_size }})
          {% endfor %}
      when: has_elasticsearch_nodes

    # STEP 2: Set required variables
    - name: Set deployment configuration variables
      set_fact:
        # Paths - Using standardized structure
        elasticsearch_docker_path: "{{ elasticsearch_base_path }}"
        elasticsearch_compose_path: "{{ elasticsearch_base_path }}/docker-compose.yml"
        
        # Docker configuration
        elasticsearch_docker_image: "{{ elasticsearch_docker_image | default('docker.apk-group.net/elasticsearch') }}"
        es_version: "{{ es_version | default('8.18.2') }}"
        
        # Cluster configuration
        es_cluster_name: "{{ es_cluster_name | default('siem-cluster') }}"
        es_http_base_port: "{{ es_http_base_port | default(9200) | int }}"
        es_transport_base_port: "{{ es_transport_base_port | default(9300) | int }}"
        
        # SSL configuration
        es_enable_http_ssl: "{{ es_enable_http_ssl | default(true) }}"
        es_enable_transport_ssl: "{{ es_enable_transport_ssl | default(true) }}"
        es_ssl_certificate_path: "{{ certs_base_path }}"
        
        # Authentication
        es_api_basic_auth_username: "{{ es_api_basic_auth_username | default('elastic') }}"
        es_api_basic_auth_password: "{{ es_api_basic_auth_password | default('YourVerySecureElasticsearchPassword123!') }}"
      when: has_elasticsearch_nodes

    # STEP 3: Build cluster discovery configuration - SIMPLIFIED
    - name: Build simple discovery list
      set_fact:
        # Simple approach: just use the master nodes from each host
        elasticsearch_seed_hosts: "{{ groups['MASTER'] | map('extract', hostvars, 'ansible_default_ipv4') | map(attribute='address') | map('regex_replace', '^(.*)$', '\\1:9300') | join(',') }}"
        elasticsearch_master_nodes: "{{ groups['MASTER'] | map('extract', hostvars, 'ansible_default_ipv4') | map(attribute='address') | map('regex_replace', '^(.*)$', '\\1:9300') | join(',') }}"
      when: has_elasticsearch_nodes

    - name: Display discovery configuration
      debug:
        msg: |
          📋 Discovery Configuration:
          Seed hosts: {{ elasticsearch_seed_hosts }}
          Master nodes: {{ elasticsearch_master_nodes }}
      when: has_elasticsearch_nodes

    # STEP 4: Configure system for Elasticsearch
    - name: Configure system for Elasticsearch Docker
      include_tasks: system-config.yml
      when: has_elasticsearch_nodes

    # STEP 5: Create directory structure
    - name: Create Elasticsearch directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      loop:
        - "{{ elasticsearch_docker_path }}"
        - "{{ certs_base_path }}"
      when: has_elasticsearch_nodes
        
    - name: Create node-specific directories
      file:
        path: "{{ elasticsearch_docker_path }}/{{ node.name }}/{{ dir_type }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      with_nested:
        - "{{ elasticsearch_nodes }}"
        - ["data", "logs", "config"]
      vars:
        node: "{{ item[0] }}"
        dir_type: "{{ item[1] }}"
      loop_control:
        label: "{{ node.name }}/{{ dir_type }}"
      when: has_elasticsearch_nodes

    # STEP 6: Setup SSL certificates
    - name: Setup SSL certificates for all nodes
      include_tasks: elasticsearch-ssl-setup.yml
      when: 
        - has_elasticsearch_nodes
        - (es_enable_http_ssl or es_enable_transport_ssl)

    # STEP 7: Generate node configurations
    - name: Generate Elasticsearch configurations for each node
      template:
        src: elasticsearch-node.yml.j2
        dest: "{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml"
        owner: "1000"
        group: "1000"
        mode: "0644"
      loop: "{{ elasticsearch_nodes }}"
      loop_control:
        loop_var: node
        label: "{{ node.name }}"
      when: has_elasticsearch_nodes

    - name: Generate JVM options for each node
      template:
        src: jvm.options.j2
        dest: "{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options"
        owner: "1000"
        group: "1000"
        mode: "0644"
      loop: "{{ elasticsearch_nodes }}"
      loop_control:
        loop_var: node
        label: "{{ node.name }}"
      when: has_elasticsearch_nodes

    # STEP 8: Generate Docker Compose file
    - name: Generate Docker Compose file for multi-node deployment
      template:
        src: docker-compose-elasticsearch.yml.j2
        dest: "{{ elasticsearch_compose_path }}"
        mode: "0644"
        owner: root
        group: root
      register: compose_config
      when: has_elasticsearch_nodes

    - name: Verify docker-compose file was created
      stat:
        path: "{{ elasticsearch_compose_path }}"
      register: compose_file_check
      when: has_elasticsearch_nodes

    - name: Fail if docker-compose file was not created
      fail:
        msg: |
          ❌ Docker-compose file was not created!
          Expected path: {{ elasticsearch_compose_path }}
          Please check template and variables.
      when: 
        - has_elasticsearch_nodes
        - not compose_file_check.stat.exists

    # STEP 9: Deploy Elasticsearch containers
    - name: Deploy Elasticsearch using Docker Compose
      include_tasks: elasticsearch-docker-deploy.yml
      when: has_elasticsearch_nodes

    # STEP 10: Verify cluster health
    - name: Verify cluster health
      include_tasks: wait-for-cluster.yml
      when: has_elasticsearch_nodes

    - name: Display completion message
      debug:
        msg: |
          ✅ Elasticsearch Installation Complete!
          =====================================
          
          Host: {{ inventory_hostname }}
          Nodes Deployed: {{ elasticsearch_nodes | length }}
          
          🔗 Access Points:
          {% for node in elasticsearch_nodes %}
          - {{ node.name }}: https://{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}
          {% endfor %}
          
          🔧 Management Commands:
          # View containers
          docker ps
          
          # View logs
          docker logs [node-name]
          
          # Check cluster health
          curl -k -u {{ es_api_basic_auth_username }}:PASSWORD \
            https://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cluster/health
      when: has_elasticsearch_nodes

  rescue:
    - name: Handle installation failure
      debug:
        msg: |
          ❌ Elasticsearch installation failed on {{ inventory_hostname }}!
          
          Please check:
          1. Docker service: systemctl status docker
          2. Variables in inventory
          3. Network connectivity between hosts
          4. Directory permissions
          5. Certificate generation
          
          For detailed troubleshooting, check the logs above.

  when: 
    - "'ELASTICSEARCH' in group_names"
    - "hostvars[inventory_hostname].get('elasticsearch_nodes', []) | length > 0"
  tags: [cluster, simple, elasticsearch]