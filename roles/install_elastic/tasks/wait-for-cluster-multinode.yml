# roles/install_elastic/tasks/wait-for-cluster-multinode.yml
---
- name: Multi-Node Cluster Health Verification
  block:
    - name: Display cluster verification banner
      debug:
        msg: |
          🔍 Multi-Node Cluster Health Verification
          ========================================
          Physical Host: {{ inventory_hostname }}
          Elasticsearch Nodes: {{ elasticsearch_nodes | length }}
          Starting health checks...

    - name: Wait for all local nodes to be responsive
      uri:
        url: "{{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}/{{ check_endpoint | default('') }}"
        method: GET
        user: "{{ es_api_basic_auth_username | default('elastic') if es_enable_http_ssl | default(true) else omit }}"
        password: "{{ es_api_basic_auth_password if es_enable_http_ssl | default(true) else omit }}"
        force_basic_auth: "{{ es_enable_http_ssl | default(true) }}"
        validate_certs: no
        status_code: [200, 401]
        timeout: 30
      register: node_health_checks
      loop: "{{ elasticsearch_nodes }}"
      loop_control:
        loop_var: node
        label: "{{ node.name }}:{{ es_http_base_port + node.port_offset }}"
      until: node_health_checks.status in [200, 401]
      retries: 30
      delay: 10
      when: 
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0

    - name: Get detailed cluster health from first available node
      uri:
        url: "{{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cluster/health?pretty"
        method: GET
        user: "{{ es_api_basic_auth_username | default('elastic') if es_enable_http_ssl | default(true) else omit }}"
        password: "{{ es_api_basic_auth_password if es_enable_http_ssl | default(true) else omit }}"
        force_basic_auth: "{{ es_enable_http_ssl | default(true) }}"
        validate_certs: no
        return_content: yes
        timeout: 30
      register: cluster_health_detailed
      when: 
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0
        - es_api_basic_auth_password is defined

    - name: Get all cluster nodes information
      uri:
        url: "{{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cat/nodes?v&format=json"
        method: GET
        user: "{{ es_api_basic_auth_username | default('elastic') if es_enable_http_ssl | default(true) else omit }}"
        password: "{{ es_api_basic_auth_password if es_enable_http_ssl | default(true) else omit }}"
        force_basic_auth: "{{ es_enable_http_ssl | default(true) }}"
        validate_certs: no
        return_content: yes
        timeout: 30
      register: all_cluster_nodes_info
      when: 
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0
        - es_api_basic_auth_password is defined
        - cluster_health_detailed.status == 200

    - name: Calculate expected vs actual cluster nodes
      set_fact:
        expected_total_nodes: |
          {%- set count = 0 -%}
          {%- for host_name, host_vars in hostvars.items() -%}
            {%- if host_vars.elasticsearch_nodes is defined -%}
              {%- set count = count + (host_vars.elasticsearch_nodes | length) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ count }}
        actual_nodes: "{{ all_cluster_nodes_info.json | length if all_cluster_nodes_info is defined and all_cluster_nodes_info.json is defined else 0 }}"
        local_nodes_responsive: "{{ elasticsearch_nodes | length if node_health_checks is defined else 0 }}"

    - name: Display comprehensive cluster status
      debug:
        msg: |
          🏥 Multi-Node Cluster Health Report
          ==================================
          
          📊 Node Counts:
          - Expected Total Cluster Nodes: {{ expected_total_nodes }}
          - Actual Cluster Nodes Found: {{ actual_nodes }}
          - Local Nodes Responsive: {{ local_nodes_responsive }}/{{ elasticsearch_nodes | length if elasticsearch_nodes is defined else 0 }}
          
          🩺 Cluster Health:
          - Cluster Name: {{ cluster_health_detailed.json.cluster_name if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          - Status: {{ cluster_health_detailed.json.status | upper if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'UNKNOWN' }}
          - Active Primary Shards: {{ cluster_health_detailed.json.active_primary_shards if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          - Active Shards: {{ cluster_health_detailed.json.active_shards if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          - Relocating Shards: {{ cluster_health_detailed.json.relocating_shards if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          - Initializing Shards: {{ cluster_health_detailed.json.initializing_shards if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          - Unassigned Shards: {{ cluster_health_detailed.json.unassigned_shards if cluster_health_detailed is defined and cluster_health_detailed.json is defined else 'N/A' }}
          
          🌐 Local Node Status ({{ inventory_hostname }}):
          {% for node in elasticsearch_nodes %}
          - {{ node.name }}: {{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }} ({{ node.roles | join(',') }})
          {% endfor %}

    - name: Verify cluster node discovery and formation
      block:
        - name: Wait for cluster formation to complete
          uri:
            url: "{{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cluster/health?wait_for_nodes={{ expected_total_nodes }}&timeout=300s"
            method: GET
            user: "{{ es_api_basic_auth_username | default('elastic') if es_enable_http_ssl | default(true) else omit }}"
            password: "{{ es_api_basic_auth_password if es_enable_http_ssl | default(true) else omit }}"
            force_basic_auth: "{{ es_enable_http_ssl | default(true) }}"
            validate_certs: no
            timeout: 300
          register: cluster_formation_wait
          until: cluster_formation_wait.status == 200
          retries: 10
          delay: 30
          when: 
            - expected_total_nodes | int > 0
            - es_api_basic_auth_password is defined

        - name: Final cluster nodes verification
          uri:
            url: "{{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cat/nodes?v&format=json"
            method: GET
            user: "{{ es_api_basic_auth_username | default('elastic') if es_enable_http_ssl | default(true) else omit }}"
            password: "{{ es_api_basic_auth_password if es_enable_http_ssl | default(true) else omit }}"
            force_basic_auth: "{{ es_enable_http_ssl | default(true) }}"
            validate_certs: no
            return_content: yes
            timeout: 30
          register: final_cluster_nodes
          when: es_api_basic_auth_password is defined

        - name: Analyze cluster node roles distribution
          set_fact:
            role_analysis: |
              {%- set analysis = {
                'master_eligible': 0,
                'data_nodes': 0,
                'ingest_nodes': 0,
                'ml_nodes': 0,
                'coordinator_only': 0,
                'nodes_by_host': {}
              } -%}
              
              {%- if final_cluster_nodes is defined and final_cluster_nodes.json is defined -%}
                {%- for node in final_cluster_nodes.json -%}
                  {%- if 'm' in node['node.role'] -%}
                    {%- set _ = analysis.update({'master_eligible': analysis.master_eligible + 1}) -%}
                  {%- endif -%}
                  {%- if 'd' in node['node.role'] or 'h' in node['node.role'] or 'w' in node['node.role'] or 'c' in node['node.role'] or 'f' in node['node.role'] -%}
                    {%- set _ = analysis.update({'data_nodes': analysis.data_nodes + 1}) -%}
                  {%- endif -%}
                  {%- if 'i' in node['node.role'] -%}
                    {%- set _ = analysis.update({'ingest_nodes': analysis.ingest_nodes + 1}) -%}
                  {%- endif -%}
                  {%- if 'l' in node['node.role'] -%}
                    {%- set _ = analysis.update({'ml_nodes': analysis.ml_nodes + 1}) -%}
                  {%- endif -%}
                  {%- if node['node.role'] == '-' -%}
                    {%- set _ = analysis.update({'coordinator_only': analysis.coordinator_only + 1}) -%}
                  {%- endif -%}
                  
                  {%- if node.ip not in analysis.nodes_by_host -%}
                    {%- set _ = analysis.nodes_by_host.update({node.ip: []}) -%}
                  {%- endif -%}
                  {%- set _ = analysis.nodes_by_host[node.ip].append(node.name) -%}
                {%- endfor -%}
              {%- endif -%}
              {{ analysis }}

        - name: Display final cluster analysis
          debug:
            msg: |
              🎯 Final Multi-Node Cluster Analysis
              ===================================
              
              ✅ Cluster Formation: {{ 'COMPLETE' if (final_cluster_nodes.json | length) >= (expected_total_nodes | int) else 'INCOMPLETE' }}
              
              📈 Role Distribution:
              - Master Eligible Nodes: {{ role_analysis.master_eligible }}
              - Data Nodes: {{ role_analysis.data_nodes }}
              - Ingest Nodes: {{ role_analysis.ingest_nodes }}
              - ML Nodes: {{ role_analysis.ml_nodes }}
              - Coordinator Only: {{ role_analysis.coordinator_only }}
              
              🏠 Nodes by Physical Host:
              {% for host_ip, node_names in role_analysis.nodes_by_host.items() %}
              - {{ host_ip }}: {{ node_names | join(', ') }} ({{ node_names | length }} nodes)
              {% endfor %}
              
              {% if final_cluster_nodes is defined and final_cluster_nodes.json is defined %}
              📋 All Cluster Nodes:
              {% for node in final_cluster_nodes.json %}
              - {{ node.name }} ({{ node.ip }}:{{ node.port }}) [{{ node['node.role'] }}] - {{ node['heap.percent'] }}% heap, {{ node['load_1m'] }} load
              {% endfor %}
              {% endif %}

        - name: Validate cluster meets minimum requirements
          assert:
            that:
              - (final_cluster_nodes.json | length) >= 1
              - role_analysis.master_eligible >= 1
              - cluster_formation_wait.status == 200
            fail_msg: |
              ❌ Cluster validation failed!
              
              Requirements not met:
              - Minimum nodes: {{ final_cluster_nodes.json | length }}/1 ✓
              - Master eligible: {{ role_analysis.master_eligible }}/1 {{ '✓' if role_analysis.master_eligible >= 1 else '❌' }}
              - Cluster responsive: {{ '✓' if cluster_formation_wait.status == 200 else '❌' }}
            success_msg: |
              ✅ Multi-node cluster validation passed!
              All requirements met for production operation.
          when: 
            - final_cluster_nodes is defined
            - final_cluster_nodes.json is defined

      rescue:
        - name: Handle cluster formation issues
          debug:
            msg: |
              ⚠️ Cluster formation encountered issues!
              
              This may be normal during initial deployment or if some nodes are still starting.
              
              Recommendations:
              1. Wait a few more minutes for all nodes to join
              2. Check container logs: docker-compose logs [node-name]
              3. Verify network connectivity between nodes
              4. Check certificate configuration
              
              Current status will be displayed below.

        - name: Display current cluster status despite issues
          debug:
            msg: |
              📊 Current Status (with issues):
              ==============================
              - Local nodes responsive: {{ local_nodes_responsive }}/{{ elasticsearch_nodes | length }}
              - Expected total nodes: {{ expected_total_nodes }}
              - Actual nodes found: {{ actual_nodes }}
              
              🔧 Troubleshooting Commands:
              # Check containers
              docker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml ps
              
              # Check logs
              docker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml logs [node-name]
              
              # Check cluster health
              curl -k -u elastic:PASSWORD {{ 'https' if es_enable_http_ssl | default(true) else 'http' }}://{{ ansible_default_ipv4.address }}:{{ es_http_base_port }}/_cluster/health?pretty

  when: 
    - elasticsearch_nodes is defined
    - elasticsearch_nodes | length > 0
  tags: [health-check, cluster-verification]

- name: Create cluster verification script
  template:
    src: cluster-verification.sh.j2
    dest: "/usr/share/siem/elasticsearch/cluster-verification.sh"
    mode: "0755"
    owner: root
    group: root
  when: 
    - elasticsearch_nodes is defined
    - elasticsearch_nodes | length > 0

- name: Display cluster verification completion
  debug:
    msg: |
      ✅ Multi-Node Cluster Verification Complete!
      ==========================================
      
      Physical Host: {{ inventory_hostname }}
      Local Nodes: {{ elasticsearch_nodes | length if elasticsearch_nodes is defined else 0 }}
      Verification Script: /usr/share/siem/elasticsearch/cluster-verification.sh
      
      The cluster is ready for operation!
  when: 
    - elasticsearch_nodes is defined
    - elasticsearch_nodes | length > 0