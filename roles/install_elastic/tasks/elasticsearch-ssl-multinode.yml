---
# roles/install_elastic/tasks/elasticsearch-ssl-multinode.yml
# SSL Certificate setup for multi-node Elasticsearch deployment - FIXED

# Define global facts for use across all tasks and rescue blocks
- name: Define elasticsearch node facts
  set_fact:
    has_elasticsearch_nodes: "{{ elasticsearch_nodes is defined and elasticsearch_nodes | length > 0 }}"
    primary_host: "{{ groups.get('physical_hosts', groups.get('all', [inventory_hostname]))[0] | default(inventory_hostname) }}"

- name: Multi-Node SSL Certificate Setup
  block:
    - name: Install OpenSSL
      package:
        name: openssl
        state: present

    - name: Create certificate directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      loop:
        - "/usr/share/siem/elasticsearch/certs/ca"
        - "/usr/share/siem/elasticsearch/certs/fleet-server"
        - "/usr/share/siem/elasticsearch/certs/kibana"

    - name: Create node-specific certificate directories
      file:
        path: "/usr/share/siem/elasticsearch/certs/{{ node.name }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      loop: "{{ elasticsearch_nodes | default([]) }}"
      loop_control:
        loop_var: node
        label: "{{ node.name | default('unknown') }}"
      when: 
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0
        - node.name is defined

# STEP 1: Generate CA certificate on first physical host
- name: Generate CA certificate
  block:


    - name: Check if CA certificate exists
      stat:
        path: "/usr/share/siem/elasticsearch/certs/ca/ca.crt"
      register: ca_exists

    - name: Generate CA private key
      command: openssl genrsa -out /usr/share/siem/elasticsearch/certs/ca/ca.key 4096
      when: not ca_exists.stat.exists

    - name: Generate CA certificate
      command: >
        openssl req -new -x509 -days 3650
        -key /usr/share/siem/elasticsearch/certs/ca/ca.key
        -out /usr/share/siem/elasticsearch/certs/ca/ca.crt
        -subj "/C=US/ST=State/L=City/O=APK SIEM/CN=Elasticsearch Multi-Node CA"
      when: not ca_exists.stat.exists

    - name: Set CA certificate permissions
      file:
        path: "{{ item.path }}"
        owner: "1000"
        group: "1000"
        mode: "{{ item.mode }}"
      loop:
        - { path: "/usr/share/siem/elasticsearch/certs/ca/ca.key", mode: "0600" }
        - { path: "/usr/share/siem/elasticsearch/certs/ca/ca.crt", mode: "0644" }
      when: not ca_exists.stat.exists

  run_once: true
  delegate_to: "{{ primary_host }}"

# STEP 2: Generate certificates for all nodes across all hosts
- name: Generate node certificates for all cluster nodes
  block:


    - name: Create comprehensive node list for certificate generation
      set_fact:
        all_nodes_for_certs: |
          {%- set nodes = [] -%}
          {%- for host_name in groups.get('all', []) -%}
            {%- if hostvars[host_name].elasticsearch_nodes is defined and hostvars[host_name].elasticsearch_nodes | length > 0 -%}
              {%- for node in hostvars[host_name].elasticsearch_nodes -%}
                {%- if node is defined and node is mapping and node.name is defined -%}
                  {%- set node_info = {
                    'name': node.name,
                    'host': host_name,
                    'ip': hostvars[host_name].get('ansible_default_ipv4', {}).get('address', '127.0.0.1'),
                    'port_offset': node.get('port_offset', 0)
                  } -%}
                  {%- set _ = nodes.append(node_info) -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {{ nodes | reject('none') | list }}

    - name: Debug nodes list for certificate generation
      debug:
        msg: |
          📋 Nodes for Certificate Generation:
          Total nodes: {{ all_nodes_for_certs | length }}
          {% for node in all_nodes_for_certs %}
          {% if node.name is defined %}
          - {{ node.name }} ({{ node.host }}: {{ node.ip }})
          {% endif %}
          {% endfor %}
      when: all_nodes_for_certs | length > 0

    - name: Create certificate directories for all cluster nodes
      file:
        path: "/usr/share/siem/elasticsearch/certs/{{ node.name }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined

    - name: Check existing node certificates
      stat:
        path: "/usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.crt"
      register: node_certs_exist
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        index_var: node_idx
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined

    - name: Generate private keys for all nodes
      command: openssl genrsa -out /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.key 2048
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        index_var: node_idx
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined
        - node_certs_exist is defined
        - node_certs_exist.results is defined
        - node_idx < (node_certs_exist.results | length)
        - not node_certs_exist.results[node_idx].stat.exists

    - name: Create certificate configs for all nodes
      copy:
        dest: "/usr/share/siem/elasticsearch/certs/{{ node.name }}/cert.conf"
        content: |
          [req]
          distinguished_name = req_distinguished_name
          req_extensions = v3_req
          prompt = no

          [req_distinguished_name]
          C = US
          ST = State
          L = City
          O = APK SIEM Multi-Node
          CN = {{ node.name }}

          [v3_req]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names

          [alt_names]
          DNS.1 = {{ node.name }}
          DNS.2 = localhost
          DNS.3 = {{ node.name }}.elastic
          DNS.4 = {{ node.name }}.{{ es_cluster_name | default('siem-cluster') }}
          IP.1 = {{ node.ip }}
          IP.2 = 127.0.0.1
          IP.3 = 172.20.0.{{ 10 + (node.port_offset | int) }}
        mode: "0644"
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        index_var: node_idx
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined
        - node_certs_exist is defined
        - node_certs_exist.results is defined
        - node_idx < (node_certs_exist.results | length)
        - not node_certs_exist.results[node_idx].stat.exists

    - name: Generate certificate requests for all nodes
      command: >
        openssl req -new
        -key /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.key
        -out /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.csr
        -config /usr/share/siem/elasticsearch/certs/{{ node.name }}/cert.conf
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        index_var: node_idx
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined
        - node_certs_exist is defined
        - node_certs_exist.results is defined
        - node_idx < (node_certs_exist.results | length)
        - not node_certs_exist.results[node_idx].stat.exists

    - name: Sign certificates with CA for all nodes
      command: >
        openssl x509 -req -days 365
        -in /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.csr
        -CA /usr/share/siem/elasticsearch/certs/ca/ca.crt
        -CAkey /usr/share/siem/elasticsearch/certs/ca/ca.key
        -CAcreateserial
        -out /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.crt
        -extensions v3_req
        -extfile /usr/share/siem/elasticsearch/certs/{{ node.name }}/cert.conf
      loop: "{{ all_nodes_for_certs }}"
      loop_control:
        loop_var: node
        index_var: node_idx
        label: "{{ node.name | default('unknown') }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - node is defined
        - node.name is defined
        - node_certs_exist is defined
        - node_certs_exist.results is defined
        - node_idx < (node_certs_exist.results | length)
        - not node_certs_exist.results[node_idx].stat.exists

    - name: Set certificate file permissions for all nodes
      file:
        path: "/usr/share/siem/elasticsearch/certs/{{ cert_node.name }}/{{ cert_node.name }}.{{ file_ext }}"
        owner: "1000"
        group: "1000"
        mode: "{{ '0600' if file_ext == 'key' else '0644' }}"
      loop: "{{ all_nodes_for_certs | selectattr('name', 'defined') | list | product(['crt', 'key']) | list }}"
      loop_control:
        label: "{{ item[0].name }}/{{ item[0].name }}.{{ item[1] }}"
      vars:
        cert_node: "{{ item[0] }}"
        file_ext: "{{ item[1] }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - item[0].name is defined

    - name: Clean up temporary certificate files
      file:
        path: "/usr/share/siem/elasticsearch/certs/{{ cert_node.name }}/{{ temp_file }}"
        state: absent
      loop: "{{ all_nodes_for_certs | selectattr('name', 'defined') | list | product(['csr', 'conf']) | list }}"
      loop_control:
        label: "{{ item[0].name }}/{{ item[1] }}"
      vars:
        cert_node: "{{ item[0] }}"
        temp_file: "{{ item[0].name }}.{{ item[1] if item[1] == 'csr' else 'cert.conf' }}"
      when: 
        - all_nodes_for_certs is defined
        - all_nodes_for_certs | length > 0
        - item[0].name is defined

  run_once: true
  delegate_to: "{{ primary_host }}"
  when: 
    - has_elasticsearch_nodes
    - hostvars[primary_host].get('elasticsearch_nodes', []) | length > 0

# STEP 3: Distribute certificates to other physical hosts
- name: Distribute certificates to other hosts
  block:


    - name: Synchronize certificate directory to other hosts
      synchronize:
        src: "/usr/share/siem/elasticsearch/certs/"
        dest: "/usr/share/siem/elasticsearch/certs/"
        recursive: yes
        perms: yes
        owner: yes
        group: yes
        rsync_opts:
          - "--chmod=D0755,F0644"
          - "--chown=1000:1000"
      delegate_to: "{{ primary_host }}"
      when: 
        - inventory_hostname != primary_host
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0

    - name: Ensure private key permissions on distributed certificates
      file:
        path: "/usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.key"
        owner: "1000"
        group: "1000"
        mode: "0600"
      loop: "{{ elasticsearch_nodes | default([]) }}"
      loop_control:
        loop_var: node
        label: "{{ node.name | default('unknown') }}"
      when: 
        - elasticsearch_nodes is defined
        - elasticsearch_nodes | length > 0
        - inventory_hostname != primary_host
        - node.name is defined

# STEP 4: Final verification
- name: Final certificate verification
  block:


    - name: Verify node certificates exist
      stat:
        path: "/usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.crt"
      register: final_cert_check
      loop: "{{ elasticsearch_nodes | default([]) }}"
      loop_control:
        loop_var: node
        label: "{{ node.name | default('unknown') }}"
      failed_when: not final_cert_check.stat.exists
      when: 
        - has_elasticsearch_nodes
        - node.name is defined

    - name: Test certificate chain for each node
      command: >
        openssl verify -CAfile /usr/share/siem/elasticsearch/certs/ca/ca.crt
        /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.crt
      register: verify_results
      loop: "{{ elasticsearch_nodes | default([]) }}"
      loop_control:
        loop_var: node
        label: "{{ node.name | default('unknown') }}"
      failed_when: verify_results.rc != 0
      changed_when: false
      when: 
        - has_elasticsearch_nodes
        - node.name is defined

    - name: Display SSL certificate setup success
      debug:
        msg: |
          ✅ Multi-Node SSL Certificate Setup Complete!
          ===========================================
          Physical Host: {{ inventory_hostname }}
          CA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt
          
          Node Certificates Generated:
          {% for node in elasticsearch_nodes | default([]) %}
          {% if node.name is defined %}
          - {{ node.name }}: /usr/share/siem/elasticsearch/certs/{{ node.name }}/{{ node.name }}.crt
          {% endif %}
          {% endfor %}
          
          Certificate verification: All certificates valid ✅
          Ready for multi-node Elasticsearch deployment! 🚀
      when: has_elasticsearch_nodes

  rescue:
    - name: Handle certificate generation failure
      fail:
        msg: |
          ❌ SSL certificate generation failed!
          
          This is critical for multi-node deployment. Please check:
          1. OpenSSL installation: openssl version
          2. Directory permissions: ls -la /usr/share/siem/elasticsearch/certs/
          3. Disk space: df -h /usr/share/siem/
          4. Network connectivity between hosts
          
          Manual certificate generation:
          ansible-playbook -i inventory.yml main-playbook.yml --tags ssl_multinode --limit {{ inventory_hostname }}
      when: has_elasticsearch_nodes

  when: has_elasticsearch_nodes