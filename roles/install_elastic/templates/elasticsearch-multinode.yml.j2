# roles/install_elastic/templates/elasticsearch-multinode.yml.j2
# FIXED: Removed problematic Jinja2 expressions

# ======================== Elasticsearch Multi-Node Configuration =========================
#
# Generated for node: {{ node.name }}
# Physical host: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})
# Node roles: {{ node.roles | join(', ') }}
# Generated: {{ ansible_date_time.iso8601 }}
# Compatible with: Elasticsearch 8.18.2
#
# ---------------------------------- Cluster -----------------------------------

# Use a descriptive name for your cluster:
cluster.name: {{ es_cluster_name | default('siem-cluster') }}

# ------------------------------------ Node ------------------------------------

# Use a descriptive name for the node:
node.name: {{ node.name }}

# Add custom attributes to the node:
node.attr.rack: {{ inventory_hostname }}-rack
node.attr.zone: {{ inventory_hostname }}-zone
node.attr.physical_host: {{ inventory_hostname }}
{% set node_type = 'data' %}
{% if 'MASTER' in node.group_membership %}
  {% set node_type = 'master' %}
{% elif 'HOT' in node.group_membership %}
  {% set node_type = 'hot' %}
{% elif 'WARM' in node.group_membership %}
  {% set node_type = 'warm' %}
{% elif 'COLD' in node.group_membership %}
  {% set node_type = 'cold' %}
{% elif 'FROZEN' in node.group_membership %}
  {% set node_type = 'frozen' %}
{% elif 'ML' in node.group_membership %}
  {% set node_type = 'ml' %}
{% endif %}
node.attr.node_type: {{ node_type }}

# Node roles configuration (ES 8.x format)
node.roles: {{ node.roles | to_json }}

# ----------------------------------- Paths ------------------------------------

# Path to directory where to store the data:
path.data: /usr/share/elasticsearch/data

# Path to log files:
path.logs: /usr/share/elasticsearch/logs

# ----------------------------------- Memory -----------------------------------

# Lock the memory on startup:
bootstrap.memory_lock: true

# ---------------------------------- Network -----------------------------------

# Set the bind address to a specific IP:
network.host: ["127.0.0.1", "0.0.0.0"]

# Set a custom port for HTTP:
http.port: 9200

# Set a custom port for transport:
transport.port: 9300

# --------------------------------- Discovery ----------------------------------

# Pass an initial list of hosts to perform discovery when this node is started:
discovery.seed_hosts: [{% for host_port in elasticsearch_seed_hosts.split(',') %}"{{ host_port }}"{% if not loop.last %}, {% endif %}{% endfor %}]

# Bootstrap the cluster using an initial set of master-eligible nodes:
cluster.initial_master_nodes: [{% for host_port in elasticsearch_master_nodes.split(',') %}"{{ host_port }}"{% if not loop.last %}, {% endif %}{% endfor %}]

# ---------------------------------- Various -----------------------------------

# Allow wildcard deletion of indices:
action.destructive_requires_name: false

# Auto create indices
action.auto_create_index: true

# Maximum number of shards per node
cluster.max_shards_per_node: 2000

# Search timeout
search.default_search_timeout: 1200s

# ---------------------------------- Security ----------------------------------

# Enable security features
xpack.security.enabled: {{ es_enable_security | default('true') }}

{% if es_enable_http_ssl | default(true) %}
# HTTP SSL configuration
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.key: /usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key
xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt
xpack.security.http.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca/ca.crt
xpack.security.http.ssl.verification_mode: {{ es_ssl_verification_mode | default('certificate') }}
xpack.security.http.ssl.client_authentication: optional
{% else %}
# HTTP SSL disabled
xpack.security.http.ssl.enabled: false
{% endif %}

{% if es_enable_transport_ssl | default(true) %}
# Transport SSL configuration
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key
xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt
xpack.security.transport.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca/ca.crt
xpack.security.transport.ssl.verification_mode: {{ es_ssl_verification_mode | default('certificate') }}
xpack.security.transport.ssl.client_authentication: required
{% else %}
# Transport SSL disabled
xpack.security.transport.ssl.enabled: false
{% endif %}

# ---------------------------------- License -----------------------------------

# License configuration (ES 8.x format)
xpack.license.self_generated.type: basic

# --------------------------------- Monitoring ---------------------------------

# Monitoring settings (ES 8.x compatible)
xpack.monitoring.collection.enabled: true
xpack.monitoring.collection.interval: 10s
xpack.monitoring.elasticsearch.collection.enabled: false

# ---------------------------------- Machine Learning --------------------------

{% if 'ml' in node.roles %}
# Machine Learning enabled for this node
xpack.ml.enabled: true
{% set heap_gb = node.heap_size.replace('g', '') | int %}
xpack.ml.node_concurrent_job_allocations: {{ 2 if heap_gb >= 4 else 1 }}
{% else %}
# Machine Learning disabled for this node
xpack.ml.enabled: false
{% endif %}

# ---------------------------------- Performance -------------------------------

# Thread pool settings optimized for node role
{% if 'data_hot' in node.roles or 'data_content' in node.roles %}
# Hot/Content node optimized for indexing
thread_pool.write.size: {{ ansible_processor_vcpus }}
thread_pool.write.queue_size: 1000

thread_pool.search.size: {{ (ansible_processor_vcpus * 1.5) | round | int }}
thread_pool.search.queue_size: 1000

# Indexing settings for hot nodes
indices.memory.index_buffer_size: 30%
indices.memory.min_index_buffer_size: 96mb
{% elif 'data_warm' in node.roles or 'data_cold' in node.roles or 'data_frozen' in node.roles %}
# Warm/Cold/Frozen node optimized for search
thread_pool.search.size: {{ ansible_processor_vcpus * 2 }}
thread_pool.search.queue_size: 2000

thread_pool.write.size: {{ [ansible_processor_vcpus // 2, 1] | max }}
thread_pool.write.queue_size: 200

# Reduced indexing buffer for warm/cold nodes
indices.memory.index_buffer_size: 10%
indices.memory.min_index_buffer_size: 64mb
{% elif 'master' in node.roles and node.roles | length == 1 %}
# Dedicated master node - minimal resources for data operations
thread_pool.search.size: {{ ansible_processor_vcpus }}
thread_pool.search.queue_size: 100

thread_pool.write.size: 1
thread_pool.write.queue_size: 100

# Minimal memory allocation for master-only nodes
indices.memory.index_buffer_size: 5%
indices.memory.min_index_buffer_size: 48mb
{% else %}
# Default/Coordinator node settings
thread_pool.search.size: {{ (ansible_processor_vcpus * 1.5) | round | int }}
thread_pool.search.queue_size: 1000

thread_pool.write.size: {{ ansible_processor_vcpus }}
thread_pool.write.queue_size: 500

indices.memory.index_buffer_size: 20%
indices.memory.min_index_buffer_size: 96mb
{% endif %}

# Query cache settings
{% if 'data_warm' in node.roles or 'data_cold' in node.roles %}
indices.queries.cache.size: 30%
{% else %}
indices.queries.cache.size: 20%
{% endif %}

# Request cache settings
{% if 'data_warm' in node.roles or 'data_cold' in node.roles %}
indices.requests.cache.size: 10%
{% else %}
indices.requests.cache.size: 5%
{% endif %}

# Recovery settings
{% if 'data_hot' in node.roles %}
indices.recovery.max_bytes_per_sec: 200mb
cluster.routing.allocation.node_concurrent_recoveries: 6
{% elif 'data_warm' in node.roles %}
indices.recovery.max_bytes_per_sec: 100mb
cluster.routing.allocation.node_concurrent_recoveries: 4
{% else %}
indices.recovery.max_bytes_per_sec: 50mb
cluster.routing.allocation.node_concurrent_recoveries: 2
{% endif %}

# ---------------------------------- Allocation ---------------------------------

# Allocation awareness for multi-host deployment
cluster.routing.allocation.awareness.attributes: physical_host,zone

# ---------------------------------- GeoIP Database ----------------------------

# GeoIP database downloader endpoint
ingest.geoip.downloader.endpoint: "http://127.0.0.1:82/overview.json"

# ---------------------------------- Snapshots ---------------------------------

# Repository settings for snapshots
path.repo: ["/usr/share/elasticsearch/backup"]

# ---------------------------------- CORS ---------------------------------------

# CORS settings (disabled in production)
http.cors.enabled: false

# ---------------------------------- Logging -----------------------------------

# Set logging levels
logger.level: INFO

# Node-specific logger levels
logger.org.elasticsearch.discovery: INFO
logger.org.elasticsearch.cluster.service: INFO
logger.org.elasticsearch.http: INFO
logger.org.elasticsearch.transport: WARN

{% if 'master' in node.roles %}
logger.org.elasticsearch.cluster: INFO
logger.org.elasticsearch.gateway: INFO
{% endif %}

{% if 'data_hot' in node.roles %}
logger.org.elasticsearch.index: INFO
logger.org.elasticsearch.indices: INFO
{% endif %}

# ================================ End of Configuration ===========================

# Configuration Summary:
# - Node: {{ node.name }}
# - Physical Host: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})
# - Roles: {{ node.roles | join(', ') }}
{% if node.group_membership is defined %}
# - Group Membership: {{ node.group_membership | join(', ') }}
{% endif %}
# - Heap Size: {{ node.heap_size | default('1g') }}
# - HTTP Port: {{ es_http_base_port + node.port_offset }}
# - Transport Port: {{ es_transport_base_port + node.port_offset }}
# - SSL HTTP: {{ es_enable_http_ssl | default(true) }}
# - SSL Transport: {{ es_enable_transport_ssl | default(true) }}
# - Discovery Seed Hosts: {{ elasticsearch_seed_hosts | default('Not set') }}
# - Master Nodes: {{ elasticsearch_master_nodes | default('Not set') }}