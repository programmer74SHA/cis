# roles/install_elastic/templates/jvm-multinode.options.j2

## JVM configuration for {{ node.name }}
## Generated: {{ ansible_date_time.iso8601 }}
## Node: {{ node.name }} on {{ inventory_hostname }}
## Heap Size: {{ node.heap_size | default('1g') }}

################################################################
## IMPORTANT: JVM heap size
################################################################
##
## You should always set the min and max JVM heap
## size to the same value. For example, to set
## the heap to 4 GB, set:
##
## -Xms4g
## -Xmx4g
##
## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html
## for more information
##
################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space
-Xms{{ node.heap_size | default('1g') }}
-Xmx{{ node.heap_size | default('1g') }}

################################################################
## Expert settings
################################################################
##
## All settings below this section are considered
## expert settings. Don't tamper with them unless
## you understand what you are doing
##
################################################################

## GC configuration
8-13:-XX:+UseConcMarkSweepGC
8-13:-XX:CMSInitiatingOccupancyFraction=75
8-13:-XX:+UseCMSInitiatingOccupancyOnly

## G1GC Configuration
# NOTE: G1 GC is only supported on JDK version 10 or later
14-:-XX:+UseG1GC
14-:-XX:G1ReservePercent=25
14-:-XX:InitiatingHeapOccupancyPercent=30

## JVM temporary directory
-Djava.io.tmpdir=/tmp

## heap dumps

# generate a heap dump when an allocation from the Java heap fails
# heap dumps are created in the working directory of the JVM
-XX:+HeapDumpOnOutOfMemoryError

# specify an alternative path for heap dumps; ensure the directory exists and
# has sufficient space (using container path for this specific node)
-XX:HeapDumpPath=/usr/share/elasticsearch/data/{{ node.name }}_heapdump

# specify an alternative path for JVM fatal error logs (using container path)
-XX:ErrorFile=/usr/share/elasticsearch/logs/{{ node.name }}_hs_err_pid%p.log

## JDK 8 GC logging (using container paths)
8:-XX:+PrintGCDetails
8:-XX:+PrintGCDateStamps
8:-XX:+PrintTenuringDistribution
8:-XX:+PrintGCApplicationStoppedTime
8:-Xloggc:/usr/share/elasticsearch/logs/{{ node.name }}_gc.log
8:-XX:+UseGCLogFileRotation
8:-XX:NumberOfGCLogFiles=32
8:-XX:GCLogFileSize=64m

# JDK 9+ GC logging (using container paths)
9-:-Xlog:gc*,gc+age=trace,safepoint:file=/usr/share/elasticsearch/logs/{{ node.name }}_gc.log:utctime,pid,tags:filecount=32,filesize=64m

# Ensure compatibility and performance
-XX:+AlwaysPreTouch
-Xss1m
-Djava.awt.headless=true
-Dfile.encoding=UTF-8
-Djna.nosys=true
-XX:-OmitStackTraceInFastThrow
-Dio.netty.noUnsafe=true
-Dio.netty.noKeySetOptimization=true
-Dio.netty.recycler.maxCapacityPerThread=0
-Dio.netty.allocator.numDirectArenas=0
-Dlog4j.shutdownHookEnabled=false
-Dlog4j2.disable.jmx=true

# Node-specific JVM identifier
-Dnode.name={{ node.name }}
-Dcluster.name={{ es_cluster_name | default('siem-cluster') }}

{% if 'master' in node.roles and node.roles | length == 1 %}
# Master-only node optimizations
-Dbootstrap.memory_lock=true
-Dcluster.max_shards_per_node=1000
{% elif 'data_hot' in node.roles %}
# Hot data node optimizations
-Dindices.memory.index_buffer_size=30%
-Dindices.memory.min_index_buffer_size=96mb
{% elif 'data_warm' in node.roles or 'data_cold' in node.roles %}
# Warm/Cold data node optimizations
-Dindices.queries.cache.size=40%
-Dindices.requests.cache.size=15%
{% elif 'data_frozen' in node.roles %}
# Frozen data node optimizations (minimal resources)
-Dindices.queries.cache.size=20%
-Dindices.requests.cache.size=5%
{% elif 'ingest' in node.roles %}
# Ingest node optimizations
-Dingest.grok.watchdog.interval=1s
-Dingest.grok.watchdog.max_execution_time=1s
{% elif 'ml' in node.roles %}
# ML node optimizations
-Dxpack.ml.max_open_jobs=20
-Dxpack.ml.node_concurrent_job_allocations={{ 4 if node.heap_size.replace('g', '') | int >= 8 else 2 }}
{% elif node.roles | length == 0 %}
# Coordinator-only node optimizations
-Dnode.data=false
-Dnode.ingest=false
-Dnode.ml=false
-Dcluster.remote.connect=false
{% endif %}

# Performance tuning based on heap size
{% set heap_gb = node.heap_size.replace('g', '') | int %}
{% if heap_gb >= 8 %}
# Large heap optimizations ({{ heap_gb }}GB)
-XX:G1HeapRegionSize=32m
-XX:MaxGCPauseMillis=200
{% elif heap_gb >= 4 %}
# Medium heap optimizations ({{ heap_gb }}GB)
-XX:G1HeapRegionSize=16m
-XX:MaxGCPauseMillis=400
{% else %}
# Small heap optimizations ({{ heap_gb }}GB)
-XX:G1HeapRegionSize=8m
-XX:MaxGCPauseMillis=50
{% endif %}

{% if es_jvm_custom_parameters is defined and es_jvm_custom_parameters != '' %}
# Custom JVM parameters
{% for item in es_jvm_custom_parameters %}
{{ item }}
{% endfor %}
{% endif %}

# Multi-node deployment specific settings
-Dlog4j2.formatMsgNoLookups=true
-Des.allow_insecure_settings=false

# Network settings for containerized deployment
-Djava.net.preferIPv4Stack=true
-Dnetworkaddress.cache.ttl=60
-Dnetworkaddress.cache.negative.ttl=10