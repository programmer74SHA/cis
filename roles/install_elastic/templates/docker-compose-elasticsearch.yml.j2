# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2
# FIXED: Simplified and standardized Docker Compose template

version: '3.8'

services:
{% for node in elasticsearch_nodes %}
  {{ node.name }}:
    image: {{ elasticsearch_docker_image }}:{{ es_version }}
    container_name: {{ node.name }}
    hostname: {{ node.name }}
    restart: unless-stopped
    
    environment:
      # Node identification
      - "node.name={{ node.name }}"
      - "cluster.name={{ es_cluster_name }}"
      
      # Network configuration
      - "network.host=0.0.0.0"
      - "http.port=9200"
      - "transport.port=9300"
      
      # Discovery configuration
      - "discovery.seed_hosts={{ elasticsearch_seed_hosts }}"
      - "cluster.initial_master_nodes={{ elasticsearch_master_nodes }}"
      
      # Node roles
      - "node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]"
      
      # Memory settings
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}"
      
      # Performance settings
      - "cluster.max_shards_per_node=2000"
      - "action.auto_create_index=true"
      
      # Security configuration
      - "xpack.security.enabled=true"
{% if es_enable_http_ssl %}
      - "xpack.security.http.ssl.enabled=true"
      - "xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key"
      - "xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt"
      - "xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt"
{% endif %}
{% if es_enable_transport_ssl %}
      - "xpack.security.transport.ssl.enabled=true"
      - "xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key"
      - "xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt"
      - "xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt"
{% endif %}
{% if es_api_basic_auth_password is defined %}
      - "ELASTIC_PASSWORD={{ es_api_basic_auth_password }}"
{% endif %}

    ports:
      - "{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200"
      - "{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300"

    volumes:
      # Data and logs
      - "{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z"
      - "{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z"
      
      # Configuration
      - "{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z"
      - "{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z"
      
      # Certificates
      - "{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z"

    networks:
      - elastic

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

    healthcheck:
      test: 
        - "CMD-SHELL"
{% if es_enable_http_ssl and es_api_basic_auth_password is defined %}
        - "curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1"
{% else %}
        - "curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1"
{% endif %}
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 120s

    user: "1000:1000"
    
    deploy:
      resources:
        limits:
{% set heap_gb = (node.heap_size | regex_replace('g', '') | int) %}
          memory: "{{ (heap_gb * 2) }}G"
        reservations:
          memory: "{{ node.heap_size }}"

{% endfor %}

networks:
  elastic:
    driver: bridge
    ipam:
      config:
        - subnet: "{{ docker_network_subnet }}"
          gateway: "{{ docker_network_gateway | default('192.168.180.1') }}"