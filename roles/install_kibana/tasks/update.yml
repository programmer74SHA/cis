- name: Take Backup from kibana before update
  archive:
    path: ["{{ kibana_home_directory_path }}", "/etc/kibana"]
    format: gz 
    dest:  "/var/siem/kibana-backup-V{{ hostvars[groups['BDA'][0]].installed_elasticsearch_version }}.tar.gz"
    remove: False
  when: "'BDA' in group_names"
  
- name: Update Kibana
  block:
    - name: Check status of the kibana service
      uri:
        url: "{{ kibana_address }}/api/status"
        method: GET
        return_content: yes
        status_code: 200
        timeout: 15
        user: "{{ updater_user_username }}"
        password: "{{ updater_user_password }}"
        validate_certs: no
      register: kibana_status
      retries: 20
      delay: 60
      until: 
        - kibana_status.status == 200
        - '"available" in kibana_status.json["status"]["overall"]["level"]'

    - name: Shotdown Kibana 
      service:
        name: kibana
        state: stopped

    - name: Check for installed kibana plugins
      command:
        cmd: /usr/share/kibana/bin/kibana-plugin list 
      register: list_of_plugins
    - name: Set fact for plugin names
      set_fact:
        plugin_names: "{{ list_of_plugins.stdout_lines | map('split', '@') | map('first') | list }}"
    
    - name: Remove installed kibana plugins if exist
      command:
        cmd: /usr/share/kibana/bin/kibana-plugin remove -q {{ item }}
      loop:  "{{ plugin_names }}"
      when : list_of_plugins['stdout']  != 'No plugins installed.'

    - name: Remove api elastic file
      file:
        path: /etc/kibana/api_elastic.json
        state: absent
  
    - name: Remove kibana backup directory
      file:
        path: "{{ kibana_backup_folder }}"
        state: absent
        
    - name: Create tmp kibana backup directory
      file:
        path: "{{ item }}"
        state: directory 
      loop:   
        - "{{ kibana_backup_folder }}"
        - "{{ kibana_data_backup_path }}"
        - "{{ kibana_config_backup_path }}"

    - name: Backup from kibana config
      copy:
        src: /etc/kibana/
        dest:  "{{ kibana_config_backup_path }}" 

    - name: Backup from kibana data
      copy:
        src: /var/lib/kibana/
        dest:  "{{ kibana_data_backup_path }}"

    - name: Upgrade Kibana package
      apt:
        name: kibana
        state: latest

    - name: Restore from kibana config
      copy:
        src: "{{ kibana_config_backup_path }}/"  
        dest:  /etc/kibana/

    - name: Restore from kibana data
      copy:
        src: "{{ kibana_data_backup_path }}/"
        dest: /var/lib/kibana/

    - name: Start the upgraded node
      service:
        name: kibana
        state: started
        daemon_reload: true
        enabled: yes

    - name:  Wait for Kibana service to be ready
      uri:
        url: "{{ kibana_address }}/api/status"
        method: GET
        return_content: yes
        status_code: 200
        timeout: 20
        user: "{{ updater_user_username }}"
        password: "{{ updater_user_password }}"
        validate_certs: no
      register: kibana_status
      retries: 20
      delay: 60
      until: 
        - kibana_status.status == 200
        - '"available" in kibana_status.json["status"]["overall"]["level"]'

  when: "'BDA' in group_names"

- name: Remove updater user
  command: >
    /usr/share/elasticsearch/bin/elasticsearch-users userdel {{ updater_user_username }}
  when: "'ELASTICSEARCH' in group_names"