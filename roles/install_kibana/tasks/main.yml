---
- name: "🚀 Kibana Docker Installation and Configuration"
  block:
    - name: Display Kibana installation banner
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════╗
          ║              KIBANA DOCKER INSTALLATION STARTED              ║
          ╠══════════════════════════════════════════════════════════════╣
          ║ Host: {{ inventory_hostname }}                               ║
          ║ IP: {{ ansible_default_ipv4.address }}                       ║
          ║ Version: {{ kibana_version | default('8.18.2') }}            ║
          ║ Time: {{ ansible_date_time.iso8601 }}                        ║
          ╚══════════════════════════════════════════════════════════════╝

    # STEP 1: Initialize variables and validate prerequisites
    - name: Initialize Kibana variables
      block:
        - name: Set required Kibana variables with defaults
          set_fact:
            kibana_version: "{{ kibana_version | default('8.18.2') }}"
            kibana_docker_image: "{{ kibana_docker_image | default('docker.apk-group.net/kibana') }}"
            kibana_docker_path: "{{ kibana_docker_path | default('/usr/share/siem/kibana') }}"
            kibana_data_path: "{{ kibana_data_path | default('/usr/share/siem/kibana/data') }}"
            kibana_logs_path: "{{ kibana_logs_path | default('/usr/share/siem/kibana/logs') }}"
            kibana_config_path: "{{ kibana_config_path | default('/usr/share/siem/kibana/config') }}"
            kibana_certs_path: "{{ kibana_certs_path | default('/usr/share/siem/kibana/certs') }}"
            kibana_compose_path: "{{ kibana_compose_path | default('/usr/share/siem/kibana/docker-compose.yml') }}"
            kibana_elasticsearch_hosts: "{{ kibana_elasticsearch_hosts | default('https://127.0.0.1:9200') }}"
            kibana_elasticsearch_username: "{{ kibana_elasticsearch_username | default('elastic') }}"
            kibana_elasticsearch_password: "{{ kibana_elasticsearch_password | default(es_api_basic_auth_password | default('YourVerySecureElasticsearchPassword123!')) }}"

        - name: Check if Elasticsearch is running
          uri:
            url: "https://{{ ansible_default_ipv4.address }}:9200/_cluster/health"
            method: GET
            user: "{{ es_api_basic_auth_username | default('elastic') }}"
            password: "{{ es_api_basic_auth_password | default('YourVerySecureElasticsearchPassword123!') }}"
            force_basic_auth: yes
            validate_certs: no
            timeout: 30
            status_code: [200, 401]
          register: es_health_check
          retries: 5
          delay: 10
          ignore_errors: true

        - name: Display Elasticsearch connection status
          debug:
            msg: |
              📊 Elasticsearch Connection Check:
              Status: {{ 'Connected' if es_health_check.status in [200, 401] else 'Failed' }}
              {% if es_health_check.status is defined %}
              Response Code: {{ es_health_check.status }}
              {% endif %}

        - name: Ensure Docker is available
          block:
            - name: Install Docker if not present
              apt:
                name:
                  - docker.io
                  - docker-compose
                  - python3-docker
                state: present
                update_cache: yes

            - name: Start Docker service
              systemd:
                name: docker
                state: started
                enabled: yes

    # STEP 2: Create directory structure
    - name: Create Kibana Docker directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "1000"
        group: "1000"
        mode: "0755"
      loop:
        - "{{ kibana_docker_path }}"
        - "{{ kibana_data_path }}"
        - "{{ kibana_logs_path }}"
        - "{{ kibana_config_path }}"
        - "{{ kibana_certs_path }}"
        - "{{ kibana_certs_path }}/kibana"
        - "{{ kibana_certs_path }}/ca"

    # STEP 3: Handle Docker image (if available)
    - name: Handle Kibana Docker image
      block:
        - name: Check if Kibana Docker image file exists
          stat:
            path: "files/kibana-{{ kibana_version }}-docker.tar.gz"
          register: kibana_image_file
          delegate_to: localhost

        - name: Load Kibana Docker image if available
          block:
            - name: Copy Kibana Docker image
              copy:
                src: "files/kibana-{{ kibana_version }}-docker.tar.gz"
                dest: "/var/cache/siem/kibana-{{ kibana_version }}-docker.tar.gz"
                mode: "0644"

            - name: Load Kibana Docker image
              shell: docker load -i /var/cache/siem/kibana-{{ kibana_version }}-docker.tar.gz

            - name: Remove temporary image file
              file:
                path: "/var/cache/siem/kibana-{{ kibana_version }}-docker.tar.gz"
                state: absent
          when: kibana_image_file.stat.exists

        - name: Check if image is available in Docker
          shell: docker images | grep "{{ kibana_docker_image }}" | grep "{{ kibana_version }}"
          register: kibana_image_check
          failed_when: false
          changed_when: false

        - name: Display image status
          debug:
            msg: |
              🐳 Kibana Docker Image Status:
              Image file exists: {{ kibana_image_file.stat.exists if kibana_image_file.stat is defined else 'Unknown' }}
              Image loaded in Docker: {{ 'Yes' if kibana_image_check.rc == 0 else 'No' }}
              {% if kibana_image_check.rc == 0 %}
              Image: {{ kibana_image_check.stdout }}
              {% endif %}

    # STEP 4: Setup certificates
    - name: Setup Kibana SSL certificates
      block:
        - name: Copy Elasticsearch CA certificate
          copy:
            src: "/usr/share/siem/elasticsearch/certs/ca/ca.crt"
            dest: "{{ kibana_certs_path }}/ca/ca.crt"
            owner: "1000"
            group: "1000"
            mode: "0644"
            remote_src: yes
          ignore_errors: true

        - name: Check if Kibana certificates exist
          stat:
            path: "{{ kibana_certs_path }}/kibana/kibana.crt"
          register: kibana_cert_exists

        - name: Generate Kibana certificates if needed
          block:
            - name: Generate Kibana private key
              command: openssl genrsa -out {{ kibana_certs_path }}/kibana/kibana.key 2048

            - name: Create certificate configuration
              copy:
                dest: "{{ kibana_certs_path }}/kibana/kibana.conf"
                content: |
                  [req]
                  distinguished_name = req_distinguished_name
                  req_extensions = v3_req
                  prompt = no

                  [req_distinguished_name]
                  C = US
                  ST = State
                  L = City
                  O = APK SIEM
                  CN = {{ inventory_hostname }}-kibana

                  [v3_req]
                  basicConstraints = CA:FALSE
                  keyUsage = nonRepudiation, digitalSignature, keyEncipherment
                  subjectAltName = @alt_names

                  [alt_names]
                  DNS.1 = {{ inventory_hostname }}-kibana
                  DNS.2 = localhost
                  DNS.3 = kibana
                  IP.1 = {{ ansible_default_ipv4.address }}
                  IP.2 = 127.0.0.1

            - name: Generate certificate request
              command: >
                openssl req -new
                -key {{ kibana_certs_path }}/kibana/kibana.key
                -out {{ kibana_certs_path }}/kibana/kibana.csr
                -config {{ kibana_certs_path }}/kibana/kibana.conf

            - name: Sign certificate with Elasticsearch CA
              command: >
                openssl x509 -req -days 365
                -in {{ kibana_certs_path }}/kibana/kibana.csr
                -CA /usr/share/siem/elasticsearch/certs/ca/ca.crt
                -CAkey /usr/share/siem/elasticsearch/certs/ca/ca.key
                -CAcreateserial
                -out {{ kibana_certs_path }}/kibana/kibana.crt
                -extensions v3_req
                -extfile {{ kibana_certs_path }}/kibana/kibana.conf
              ignore_errors: true

            - name: Set certificate permissions
              file:
                path: "{{ item.path }}"
                owner: "1000"
                group: "1000"
                mode: "{{ item.mode }}"
              loop:
                - { path: "{{ kibana_certs_path }}/kibana/kibana.key", mode: "0600" }
                - { path: "{{ kibana_certs_path }}/kibana/kibana.crt", mode: "0644" }

            - name: Cleanup temporary files
              file:
                path: "{{ item }}"
                state: absent
              loop:
                - "{{ kibana_certs_path }}/kibana/kibana.csr"
                - "{{ kibana_certs_path }}/kibana/kibana.conf"

          when: not kibana_cert_exists.stat.exists

    # STEP 5: Configure Kibana service account
    - name: Configure Kibana service account
      block:
        - name: Check if Elasticsearch container is running
          shell: docker ps | grep "elasticsearch" | head -1 | awk '{print $NF}'
          register: es_container_check
          failed_when: false
          changed_when: false

        - name: Setup service token if Elasticsearch is available
          block:
            - name: Check if kibana service token exists
              shell: |
                docker exec {{ es_container_check.stdout }} \
                test -f /usr/share/elasticsearch/config/service_tokens && \
                docker exec {{ es_container_check.stdout }} \
                grep -q 'elastic/kibana/kibana' /usr/share/elasticsearch/config/service_tokens
              register: kibana_token_exists
              ignore_errors: true
              changed_when: false

            - name: Create service token if needed
              shell: |
                docker exec {{ es_container_check.stdout }} \
                /usr/share/elasticsearch/bin/elasticsearch-service-tokens create elastic/kibana kibana
              register: es_token_output
              when: kibana_token_exists.rc != 0

            - name: Extract service token
              set_fact:
                es_service_token: "{{ es_token_output.stdout | regex_search('(?<=SERVICE_TOKEN elastic/kibana/kibana = ).*') }}"
              when: 
                - kibana_token_exists.rc != 0
                - es_token_output is defined

            - name: Get existing service token
              shell: |
                docker exec {{ es_container_check.stdout }} \
                grep 'elastic/kibana/kibana' /usr/share/elasticsearch/config/service_tokens | cut -d'=' -f2 | tr -d ' '
              register: existing_token_output
              when: kibana_token_exists.rc == 0

            - name: Set service token from existing
              set_fact:
                es_service_token: "{{ existing_token_output.stdout }}"
              when: 
                - kibana_token_exists.rc == 0
                - existing_token_output is defined

          when: es_container_check.stdout != ""

        - name: Generate certificate fingerprint
          shell: |
            openssl x509 -noout -fingerprint -sha256 -in {{ kibana_certs_path }}/ca/ca.crt | \
            sed 's/SHA256 Fingerprint=//' | sed 's/://g' | tr '[:upper:]' '[:lower:]'
          register: cert_fingerprint_output
          ignore_errors: true

        - name: Set certificate fingerprint
          set_fact:
            cert_fingerprint: "{{ cert_fingerprint_output.stdout if cert_fingerprint_output.rc == 0 else '' }}"

    # STEP 6: Generate Kibana configuration
    - name: Generate Kibana configuration file
      template:
        src: kibana-docker.yml.j2
        dest: "{{ kibana_config_path }}/kibana.yml"
        owner: "1000"
        group: "1000"
        mode: "0660"

    # STEP 7: ALWAYS generate Docker Compose file
    - name: Generate Kibana Docker Compose file
      template:
        src: docker-compose-kibana.yml.j2
        dest: "{{ kibana_compose_path }}"
        owner: "1000"
        group: "1000"
        mode: "0644"
      register: kibana_compose_config

    - name: Verify Kibana docker-compose file was created
      stat:
        path: "{{ kibana_compose_path }}"
      register: kibana_compose_check

    - name: Display Kibana compose file status
      debug:
        msg: |
          ✅ Kibana Docker-compose file status:
          ==================================
          Path: {{ kibana_compose_path }}
          Exists: {{ kibana_compose_check.stat.exists }}
          Size: {{ kibana_compose_check.stat.size | default('0') }} bytes
          Generated: {{ kibana_compose_config.changed }}

    - name: Fail if Kibana docker-compose file was not created
      fail:
        msg: |
          ❌ Kibana Docker-compose file was not created!
          
          Please check:
          1. Template file exists: docker-compose-kibana.yml.j2
          2. Variables are properly set
          3. Directory permissions: {{ kibana_docker_path }}/
          
          Required variables:
          - kibana_docker_image: {{ kibana_docker_image }}
          - kibana_version: {{ kibana_version }}
          - kibana_elasticsearch_hosts: {{ kibana_elasticsearch_hosts }}
      when: not kibana_compose_check.stat.exists

    # STEP 8: Start Kibana service
    - name: Start Kibana Docker service
      import_tasks: start_kibana_service.yml

    # STEP 9: Copy geo IP files (optional)
    - name: Add geo IP files
      import_tasks: copy_geo_ip_files.yml
      ignore_errors: true

    - name: Display installation completion
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════╗
          ║                KIBANA INSTALLATION COMPLETED                 ║
          ╠══════════════════════════════════════════════════════════════╣
          ║ Host: {{ inventory_hostname }}                               ║
          ║ Status: ✅ SUCCESS                                           ║
          ║ Access: https://{{ ansible_default_ipv4.address }}:5601      ║
          ║ Username: {{ kibana_elasticsearch_username }}                ║
          ║ Service Token: {{ 'Configured' if es_service_token is defined else 'Password Auth' }} ║
          ║ Timestamp: {{ ansible_date_time.iso8601 }}                   ║
          ╚══════════════════════════════════════════════════════════════╝

  rescue:
    - name: Handle Kibana installation failure
      debug:
        msg: |
          ❌ Kibana installation failed!
          
          🔍 Troubleshooting steps:
          1. Check if Elasticsearch is running:
             curl -k -u elastic:PASSWORD https://{{ ansible_default_ipv4.address }}:9200/_cluster/health
          
          2. Check Docker service:
             systemctl status docker
          
          3. Check directory permissions:
             ls -la {{ kibana_docker_path }}/
          
          4. Verify certificates:
             ls -la {{ kibana_certs_path }}/
          
          5. Check Docker image:
             docker images | grep kibana
          
          Manual recovery:
          cd {{ kibana_docker_path }}
          docker-compose down
          docker-compose up -d

  when: "'BDA' in group_names"
  tags: [cluster, simple]

- name: "Add new node to Kibana config"
  import_tasks: config_kibana_new_node.yml
  tags: new-node

- name: "Update Kibana"
  import_tasks: update.yml
  tags: update