---
# roles/install_kibana/tasks/deploy_kibana.yml
# FIXED: Use existing Elasticsearch Docker network

- name: Verify docker-compose file exists
  stat:
    path: "{{ kibana_compose_path }}"
  register: compose_file_exists

- name: Fail if docker-compose file is missing
  fail:
    msg: |
      Docker-compose file not found at {{ kibana_compose_path }}
      Please run the configure_kibana task first.
  when: not compose_file_exists.stat.exists

- name: Verify Elasticsearch Docker network exists
  shell: docker network ls --format "{{ '{{' }}.Name{{ '}}' }}" | grep -x "{{ docker_network_name }}"
  register: network_exists
  changed_when: false
  failed_when: network_exists.rc != 0
  ignore_errors: false

- name: Display network information
  debug:
    msg: |
      üåê Docker Network Check
      ======================
      Network Name: {{ docker_network_name }}
      Network Status: {{ 'Found' if network_exists.rc == 0 else 'Not Found' }}

- name: Fail if Elasticsearch network doesn't exist
  fail:
    msg: |
      ‚ùå Elasticsearch Docker network '{{ docker_network_name }}' not found!
      
      This network should have been created during Elasticsearch installation.
      Please ensure Elasticsearch is installed and running first.
      
      To check existing networks: docker network ls
      To create manually: docker network create --driver bridge --subnet {{ docker_network_subnet }} {{ docker_network_name }}
  when: network_exists.rc != 0

- name: Stop existing Kibana container if running
  shell: |
    cd {{ kibana_docker_path }}
    docker-compose down
  ignore_errors: true

- name: Start Kibana Docker containers
  shell: |
    cd {{ kibana_docker_path }}
    docker-compose up -d
  register: kibana_start_result

- name: Display container startup result
  debug:
    msg: |
      Kibana container startup:
      {{ kibana_start_result.stdout }}
      {% if kibana_start_result.stderr %}
      Errors: {{ kibana_start_result.stderr }}
      {% endif %}

- name: Wait for Kibana container to be running
  shell: docker ps --format "table {% raw %}{{.Names}}\t{{.Status}}{% endraw %}" | grep kibana-{{ inventory_hostname }}
  register: container_status
  until: "'Up' in container_status.stdout"
  retries: 10
  delay: 10
  ignore_errors: true

- name: Verify Kibana is on the correct network
  shell: docker inspect kibana-{{ inventory_hostname }} --format '{% raw %}{{range $key, $value := .NetworkSettings.Networks}}{{$key}}{{end}}{% endraw %}'
  register: kibana_network
  changed_when: false

- name: Display container status and network
  debug:
    msg: |
      üöÄ Kibana Docker Deployment Status
      =================================
      
      Container: kibana-{{ inventory_hostname }}
      Network: {{ kibana_network.stdout }}
      Expected Network: {{ docker_network_name }}
      Status: {{ 'Running' if 'Up' in container_status.stdout else 'Starting' }}
      
      üåê Access Information:
      - Kibana URL: https://{{ ansible_default_ipv4.address }}:5601
      - Username: {{ kibana_elasticsearch_username }}
      - Authentication: {{ 'Service Token' if es_service_token is defined else 'Password' }}
      
      üîß Troubleshooting Commands:
      # Check container status
      docker ps | grep kibana
      
      # Check container logs
      docker logs kibana-{{ inventory_hostname }}
      
      # Check network connectivity
      docker network inspect {{ docker_network_name }}
      
      # Test Elasticsearch connectivity from Kibana container
      docker exec kibana-{{ inventory_hostname }} curl -k https://{{ hostvars[inventory_hostname].node_hostname }}:9200
      
      # Restart Kibana
      cd {{ kibana_docker_path }} && docker-compose restart

- name: Verify network connectivity to Elasticsearch
  shell: |
    docker exec kibana-{{ inventory_hostname }} curl -k -s -o /dev/null -w "%{http_code}" https://{{ hostvars[inventory_hostname].node_hostname }}:9200
  register: es_connectivity
  ignore_errors: true
  changed_when: false

- name: Display connectivity test result
  debug:
    msg: |
      üîó Elasticsearch Connectivity Test
      ==================================
      HTTP Status: {{ es_connectivity.stdout if es_connectivity.rc == 0 else 'Failed' }}
      {% if es_connectivity.rc == 0 and es_connectivity.stdout in ['200', '401'] %}
      ‚úÖ Kibana can reach Elasticsearch successfully!
      {% else %}
      ‚ö†Ô∏è  Connectivity issue detected. Check network and Elasticsearch status.
      {% endif %}