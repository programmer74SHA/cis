---
# roles/install_kibana/tasks/start_kibana_service.yml
# UPDATED: Using custom Docker bridge network

- name: "Start Kibana Docker Service - BDA Only"
  block:
    - name: "Verify docker-compose file exists"
      stat:
        path: "{{ kibana_compose_path }}"
      register: compose_file_exists

    - name: "Fail if docker-compose file is missing"
      fail:
        msg: |
          Docker-compose file not found at {{ kibana_compose_path }}
          Please run the configure_kibana task first.
      when: not compose_file_exists.stat.exists

    - name: "Check if Docker network exists"
      shell: docker network ls --format "{{ '{{' }}.Name{{ '}}' }}" | grep -x "{{ docker_network_name }}"
      register: network_exists
      failed_when: false
      changed_when: false

    - name: "Create custom Docker bridge network if it doesn't exist"
      docker_network:
        name: "{{ docker_network_name }}"
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network_subnet }}"
        state: present
      when: network_exists.rc != 0

    - name: "Stop existing Kibana container if running"
      shell: |
        cd {{ kibana_docker_path }}
        docker-compose down
      ignore_errors: true

    - name: "Start Kibana Docker containers"
      shell: |
        cd {{ kibana_docker_path }}
        docker-compose up -d
      register: kibana_start_result

    - name: "Display container startup result"
      debug:
        msg: |
          Kibana container startup result:
          {{ kibana_start_result.stdout }}
          {{ kibana_start_result.stderr }}

    - name: "Wait for Kibana container to be running"
      shell: docker ps --format "table {% raw %}{{.Names}}\t{{.Status}}{% endraw %}" | grep kibana-{{ inventory_hostname }}
      register: container_status
      until: "'Up' in container_status.stdout"
      retries: 10
      delay: 10
      ignore_errors: true

    - name: "Display container status"
      debug:
        msg: "Kibana container status: {{ container_status.stdout }}"

    - name: "Check container logs if startup failed"
      shell: docker logs --tail 50 kibana-{{ inventory_hostname }}
      register: container_logs
      when: container_status.failed | default(false)

    - name: "Display container logs on failure"
      debug:
        msg: |
          Kibana container logs:
          {{ container_logs.stdout }}
          {{ container_logs.stderr }}
      when: container_status.failed | default(false)

    - name: "Wait for Kibana API to be ready"
      uri:
        url: "https://{{ ansible_default_ipv4.address }}:5601/api/status"
        method: GET
        validate_certs: no
        status_code: [200, 401]
        timeout: 30
      register: kibana_health
      until: kibana_health.status in [200, 401]
      retries: 30
      delay: 10
      ignore_errors: true

    - name: "Display Kibana health check result"
      debug:
        msg: |
          Kibana Health Check:
          - Status Code: {{ kibana_health.status | default('Failed') }}
          - URL: https://{{ ansible_default_ipv4.address }}:5601/api/status
          - Container Running: {{ 'Up' in container_status.stdout if container_status.stdout is defined else 'Unknown' }}

    - name: "Show final status and access information"
      debug:
        msg: |
          üöÄ Kibana Docker Deployment Status
          =================================
          
          Container: kibana-{{ inventory_hostname }}
          Network: {{ docker_network_name }} ({{ docker_network_subnet }})
          Status: {{ 'Running' if 'Up' in container_status.stdout else 'Failed' }}
          Health: {{ 'Ready' if kibana_health.status in [200, 401] else 'Not Ready' }}
          
          üåê Access Information:
          - Kibana URL: https://{{ ansible_default_ipv4.address }}:5601
          - Username: elastic
          - Password: {{ es_api_basic_auth_password | default('[Check your inventory]') }}
          
          üîß Troubleshooting Commands:
          # Check container status
          docker ps | grep kibana
          
          # Check container logs
          docker logs kibana-{{ inventory_hostname }}
          
          # Check docker-compose status
          cd {{ kibana_docker_path }} && docker-compose ps
          
          # Check network
          docker network inspect {{ docker_network_name }}
          
          # Restart Kibana
          cd {{ kibana_docker_path }} && docker-compose restart

  rescue:
    - name: "Handle Kibana startup failure"
      debug:
        msg: |
          ‚ùå Kibana startup failed!
          
          üîç Troubleshooting steps:
          1. Check if Elasticsearch is running:
             curl -k -u elastic:PASSWORD https://{{ ansible_default_ipv4.address }}:9200/_cluster/health
          
          2. Check container logs:
             docker logs kibana-{{ inventory_hostname }}
          
          3. Verify docker-compose file:
             cat {{ kibana_compose_path }}
          
          4. Check network connectivity:
             docker network inspect {{ docker_network_name }}
          
          5. Manual restart:
             cd {{ kibana_docker_path }}
             docker-compose down
             docker-compose up -d

  when: "'BDA' in group_names"