2025-09-28 10:57:25,884 p=2514823 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 10:57:26,045 p=2514823 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 10:57:29,516 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:29,676 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:29,763 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:29,784 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:30,210 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:30,232 p=2514823 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 10:57:30,306 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:30,371 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:30,431 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:30,484 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:30,532 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:30,726 p=2514823 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 10:57:32,935 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:33,001 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:33,014 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:33,238 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:33,378 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:33,397 p=2514823 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 10:57:33,520 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:33,559 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:33,605 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:33,639 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:33,654 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:33,681 p=2514823 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 10:57:33,724 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:33,747 p=2514823 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 10:57:33,795 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:33,826 p=2514823 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 10:57:33,870 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:33,887 p=2514823 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 10:57:34,910 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:57:34,937 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:57:34,987 p=2514823 u=root n=ansible | changed: [lb1]
2025-09-28 10:57:34,995 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:57:35,014 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:57:35,050 p=2514823 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 10:57:35,089 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:35,122 p=2514823 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 10:57:37,170 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:37,608 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:57:37,702 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:57:37,760 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:57:37,796 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:37,814 p=2514823 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 10:57:39,265 p=2514823 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 10:57:39,268 p=2514823 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 10:57:39,332 p=2514823 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 10:57:39,342 p=2514823 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 10:57:39,349 p=2514823 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 10:57:40,016 p=2514823 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 10:57:40,024 p=2514823 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 10:57:40,049 p=2514823 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 10:57:40,241 p=2514823 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 10:57:40,276 p=2514823 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 10:57:40,362 p=2514823 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 10:57:40,454 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:40,500 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:40,561 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:40,564 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:40,598 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:40,613 p=2514823 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 10:57:41,535 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:41,561 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:41,586 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:41,598 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:41,599 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:41,627 p=2514823 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 10:57:42,464 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:42,527 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:42,530 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:42,564 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:42,569 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:42,590 p=2514823 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 10:57:42,728 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:42,779 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:42,843 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:42,846 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:42,890 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:42,916 p=2514823 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 10:57:42,992 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:43,048 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:43,098 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:43,160 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:44,035 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:44,053 p=2514823 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 10:57:44,162 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:44,234 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:44,336 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:44,343 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:44,450 p=2514823 u=root n=ansible | ok: [lb1]
2025-09-28 10:57:44,472 p=2514823 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 10:57:44,535 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:44,584 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:44,682 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:44,684 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:44,719 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:44,837 p=2514823 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************************************************************************************************************************************
2025-09-28 10:57:44,987 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host1                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:27:32Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 10:57:44,999 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host3                      ║\n║ IP: 192.168.166.132                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:27:31Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 10:57:45,008 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host2                      ║\n║ IP: 192.168.166.131                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:27:33Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 10:57:45,084 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: bda                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 1                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:27:32Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 10:57:45,086 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:45,140 p=2514823 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 10:57:45,421 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:45,472 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:45,478 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:45,528 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:45,594 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:45,621 p=2514823 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 10:57:45,825 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:45,880 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:45,893 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:45,946 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:45,961 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:45,992 p=2514823 u=root n=ansible | TASK [install_elastic : Set discovery seed hosts] *******************************************************************************************************************************************************************************************
2025-09-28 10:57:46,159 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:46,186 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:46,234 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:46,270 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:46,276 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:46,289 p=2514823 u=root n=ansible | TASK [install_elastic : Set initial master nodes] *******************************************************************************************************************************************************************************************
2025-09-28 10:57:46,413 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:46,474 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:46,490 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:46,493 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:46,548 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:46,575 p=2514823 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 10:57:46,746 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:46,806 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:46,816 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:46,836 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:46,898 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:46,927 p=2514823 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for ALL deployments] *******************************************************************************************************************************************************************
2025-09-28 10:57:47,131 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:47,212 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:47,284 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:47,300 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:47,312 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:47,350 p=2514823 u=root n=ansible | TASK [install_elastic : Ensure elasticsearch_node_roles fallback] ***************************************************************************************************************************************************************************
2025-09-28 10:57:47,505 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:47,600 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:47,612 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:47,656 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:47,682 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:47,705 p=2514823 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 10:57:47,864 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 10:57:47,872 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 10:57:47,892 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 10:57:47,909 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: single-node\nNodes on this host: 1\nMulti-node deployment: False\nPrimary node roles: ['master', 'transform', 'ml', 'ingest', 'data_content']\n"
}
2025-09-28 10:57:47,919 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:47,933 p=2514823 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 10:57:48,091 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:48,133 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:48,134 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:48,185 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:48,204 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:48,234 p=2514823 u=root n=ansible | TASK [install_elastic : Debug host elasticsearch configuration] *****************************************************************************************************************************************************************************
2025-09-28 10:57:48,439 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host1\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'ML', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 10:57:48,446 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host2\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'MASTER', 'SF', 'WARM', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 10:57:48,534 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:48,538 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host3\nGroups: ['COLD', 'DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 10:57:48,632 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: bda\nGroups: ['BDA', 'ELASTICSEARCH', 'MASTER', 'ML', 'SF', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 1\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 10:57:48,665 p=2514823 u=root n=ansible | TASK [install_elastic : Skip non-Elasticsearch hosts] ***************************************************************************************************************************************************************************************
2025-09-28 10:57:48,837 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:48,899 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:48,903 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:48,938 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:49,120 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:49,144 p=2514823 u=root n=ansible | TASK [install_elastic : Skip load balancer hosts] *******************************************************************************************************************************************************************************************
2025-09-28 10:57:49,356 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:49,412 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:49,425 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:49,429 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:49,456 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:49,472 p=2514823 u=root n=ansible | TASK [install_elastic : Ensure required variables are set] **********************************************************************************************************************************************************************************
2025-09-28 10:57:49,593 p=2514823 u=root n=ansible | ok: [host1] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 10:57:49,641 p=2514823 u=root n=ansible | ok: [host2] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 10:57:49,647 p=2514823 u=root n=ansible | ok: [host3] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 10:57:49,673 p=2514823 u=root n=ansible | ok: [bda] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 10:57:49,701 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:49,731 p=2514823 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 10:57:50,043 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 10:57:50,065 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 10:57:50,091 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 10:57:50,116 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 10:57:50,141 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 10:57:50,146 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:50,677 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:57:50,709 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:57:50,877 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:57:50,902 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:57:51,671 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 10:57:51,828 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 10:57:51,851 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 10:57:51,936 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 10:57:52,474 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 10:57:52,665 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 10:57:52,776 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 10:57:52,931 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 10:57:53,307 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 10:57:53,466 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 10:57:53,701 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 10:57:53,702 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 10:57:54,034 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:57:54,198 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:57:54,419 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:57:54,607 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:57:54,623 p=2514823 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 10:57:54,848 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:56,059 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:56,275 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:56,344 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:56,563 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:56,590 p=2514823 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 10:57:56,918 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:57,450 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:57:57,570 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:57:57,702 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:57:57,908 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:57:57,932 p=2514823 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 10:57:58,103 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:58,162 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:58,169 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:58,169 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:58,222 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:58,240 p=2514823 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 10:57:58,377 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:57:58,426 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:57:58,429 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:57:58,449 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:57:58,497 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:58,520 p=2514823 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 10:57:58,804 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:57:59,391 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:57:59,441 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:57:59,567 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:57:59,572 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:57:59,601 p=2514823 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 10:58:00,047 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:00,575 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:58:00,589 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:58:00,668 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:58:00,797 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:00,813 p=2514823 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 10:58:01,063 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:01,744 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:58:01,752 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:58:01,772 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:58:01,791 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:58:01,815 p=2514823 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 10:58:02,118 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:02,782 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:58:02,788 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:58:02,870 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:58:02,911 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:02,928 p=2514823 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 10:58:03,137 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:03,901 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:03,948 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:58:04,015 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:58:04,112 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:04,138 p=2514823 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 10:58:04,309 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 10:58:04,363 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 10:58:04,421 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:04,422 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 10:58:04,423 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 10:58:04,445 p=2514823 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 10:58:04,745 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:05,836 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:58:05,911 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:05,912 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:06,040 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:58:06,055 p=2514823 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 10:58:06,288 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:06,929 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 10:58:07,004 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 10:58:07,100 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:58:07,220 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 10:58:07,255 p=2514823 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 10:58:07,552 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:08,532 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:58:08,540 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:58:08,556 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:08,595 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:08,632 p=2514823 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 10:58:09,176 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:09,622 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:09,696 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:58:09,907 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:58:09,910 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:09,944 p=2514823 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 10:58:10,103 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 10:58:10,225 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 10:58:10,228 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 10:58:10,265 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:10,269 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 10:58:10,293 p=2514823 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 10:58:10,565 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 10:58:10,580 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 10:58:10,593 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 10:58:10,595 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:11,338 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:58:11,409 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:58:11,435 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:58:11,480 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 10:58:12,276 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 10:58:12,369 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 10:58:12,408 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 10:58:12,483 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 10:58:13,219 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:58:13,229 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:58:13,236 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:58:13,418 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 10:58:13,433 p=2514823 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 10:58:13,717 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:14,351 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-28 10:58:14,455 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-28 10:58:14,471 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-28 10:58:14,511 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-28 10:58:15,273 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-28 10:58:15,292 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-28 10:58:15,354 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-28 10:58:15,394 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-28 10:58:16,062 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-28 10:58:16,127 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-28 10:58:16,221 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-28 10:58:16,280 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-28 10:58:16,941 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-28 10:58:16,967 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-28 10:58:17,092 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-28 10:58:17,735 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-28 10:58:17,823 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-28 10:58:17,998 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-28 10:58:18,639 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-28 10:58:18,691 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-28 10:58:18,960 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-28 10:58:19,424 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-28 10:58:19,692 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-28 10:58:19,846 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-28 10:58:20,161 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-28 10:58:20,458 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-28 10:58:20,904 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-28 10:58:21,066 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-28 10:58:21,377 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-28 10:58:21,825 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-28 10:58:21,844 p=2514823 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 10:58:22,076 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:23,508 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 10:58:23,533 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:23,580 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 10:58:23,641 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 10:58:23,669 p=2514823 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 10:58:24,010 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 10:58:24,051 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 10:58:24,073 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 10:58:24,077 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:24,593 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 10:58:24,666 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 10:58:24,747 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 10:58:24,807 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 10:58:25,443 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 10:58:25,456 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 10:58:25,708 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 10:58:25,827 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 10:58:26,365 p=2514823 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 10:58:26,492 p=2514823 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 10:58:26,549 p=2514823 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 10:58:26,554 p=2514823 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 10:58:26,578 p=2514823 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 10:58:26,849 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:58:27,481 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 10:58:27,600 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 10:58:27,602 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 10:58:27,743 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 10:58:28,332 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 10:58:28,357 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 10:58:28,458 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 10:58:29,158 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 10:58:29,272 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 10:58:29,328 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 10:58:29,392 p=2514823 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 10:58:30,435 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:30,479 p=2514823 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 10:58:30,568 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:30,627 p=2514823 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 10:58:30,755 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:30,805 p=2514823 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 10:58:30,985 p=2514823 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 10:58:31,039 p=2514823 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 10:58:31,042 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:31,094 p=2514823 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 10:58:31,319 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 10:58:31,386 p=2514823 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 10:58:31,551 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Nodes for Certificate Generation:\nTotal nodes: 10\n- master-host1 (host1: 192.168.166.130)\n- hot-host1 (host1: 192.168.166.130)\n- ml-host1 (host1: 192.168.166.130)\n- master-host2 (host2: 192.168.166.131)\n- warm-host2 (host2: 192.168.166.131)\n- sf-host2 (host2: 192.168.166.131)\n- master-host3 (host3: 192.168.166.132)\n- hot-host3 (host3: 192.168.166.132)\n- cold-host3 (host3: 192.168.166.132)\n- bda-master (bda: 192.168.166.130)\n"
}
2025-09-28 10:58:31,626 p=2514823 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 10:58:32,526 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 10:58:33,337 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 10:58:34,269 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 10:58:35,120 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 10:58:36,057 p=2514823 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 10:58:37,122 p=2514823 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 10:58:37,934 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 10:58:38,973 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 10:58:40,100 p=2514823 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 10:58:41,094 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 10:58:41,197 p=2514823 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************************************************************************************************************************************
2025-09-28 10:58:42,161 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 10:58:43,097 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 10:58:44,030 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 10:58:44,893 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 10:58:45,916 p=2514823 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 10:58:46,935 p=2514823 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 10:58:47,994 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 10:58:48,951 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 10:58:49,849 p=2514823 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 10:58:50,683 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 10:58:50,738 p=2514823 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************************************************************************************************************************************
2025-09-28 10:58:51,038 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 10:58:51,141 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 10:58:51,242 p=2514823 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 10:58:51,348 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 10:58:51,450 p=2514823 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 10:58:51,554 p=2514823 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 10:58:51,654 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 10:58:51,755 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 10:58:51,846 p=2514823 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 10:58:51,928 p=2514823 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 10:58:51,931 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:51,983 p=2514823 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************************************************************************************************************************************
2025-09-28 10:58:52,181 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 10:58:52,276 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 10:58:52,379 p=2514823 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 10:58:52,485 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 10:58:52,589 p=2514823 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 10:58:52,692 p=2514823 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 10:58:52,792 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 10:58:52,887 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 10:58:52,971 p=2514823 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 10:58:53,049 p=2514823 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 10:58:53,052 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:53,127 p=2514823 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************************************************************************************************************************************
2025-09-28 10:58:53,392 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 10:58:53,491 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 10:58:53,594 p=2514823 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 10:58:53,689 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 10:58:53,792 p=2514823 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 10:58:53,892 p=2514823 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 10:58:54,004 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 10:58:54,097 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 10:58:54,286 p=2514823 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 10:58:54,384 p=2514823 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 10:58:54,389 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:54,473 p=2514823 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************************************************************************************************************************************
2025-09-28 10:58:54,714 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 10:58:54,815 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 10:58:54,920 p=2514823 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 10:58:55,026 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 10:58:55,127 p=2514823 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 10:58:55,240 p=2514823 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 10:58:55,362 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 10:58:55,553 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 10:58:55,698 p=2514823 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 10:58:55,810 p=2514823 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 10:58:55,812 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:58:55,885 p=2514823 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************************************************************************************************************************************
2025-09-28 10:58:56,887 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/master-host1.crt)
2025-09-28 10:58:57,767 p=2514823 u=root n=ansible | changed: [host1] => (item=master-host1/master-host1.key)
2025-09-28 10:58:58,683 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/hot-host1.crt)
2025-09-28 10:58:59,540 p=2514823 u=root n=ansible | changed: [host1] => (item=hot-host1/hot-host1.key)
2025-09-28 10:59:00,645 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/ml-host1.crt)
2025-09-28 10:59:01,656 p=2514823 u=root n=ansible | changed: [host1] => (item=ml-host1/ml-host1.key)
2025-09-28 10:59:02,600 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host2/master-host2.crt)
2025-09-28 10:59:03,621 p=2514823 u=root n=ansible | changed: [host1] => (item=master-host2/master-host2.key)
2025-09-28 10:59:04,652 p=2514823 u=root n=ansible | ok: [host1] => (item=warm-host2/warm-host2.crt)
2025-09-28 10:59:05,581 p=2514823 u=root n=ansible | changed: [host1] => (item=warm-host2/warm-host2.key)
2025-09-28 10:59:06,722 p=2514823 u=root n=ansible | ok: [host1] => (item=sf-host2/sf-host2.crt)
2025-09-28 10:59:07,676 p=2514823 u=root n=ansible | changed: [host1] => (item=sf-host2/sf-host2.key)
2025-09-28 10:59:08,514 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host3/master-host3.crt)
2025-09-28 10:59:09,368 p=2514823 u=root n=ansible | changed: [host1] => (item=master-host3/master-host3.key)
2025-09-28 10:59:10,197 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host3/hot-host3.crt)
2025-09-28 10:59:11,119 p=2514823 u=root n=ansible | changed: [host1] => (item=hot-host3/hot-host3.key)
2025-09-28 10:59:11,982 p=2514823 u=root n=ansible | ok: [host1] => (item=cold-host3/cold-host3.crt)
2025-09-28 10:59:12,909 p=2514823 u=root n=ansible | changed: [host1] => (item=cold-host3/cold-host3.key)
2025-09-28 10:59:13,796 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.crt)
2025-09-28 10:59:14,686 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.key)
2025-09-28 10:59:14,789 p=2514823 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************************************************************************************************************************************
2025-09-28 10:59:15,712 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/csr)
2025-09-28 10:59:16,481 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1/conf)
2025-09-28 10:59:17,360 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/csr)
2025-09-28 10:59:18,241 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1/conf)
2025-09-28 10:59:19,138 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/csr)
2025-09-28 10:59:19,998 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1/conf)
2025-09-28 10:59:21,004 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host2/csr)
2025-09-28 10:59:21,903 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host2/conf)
2025-09-28 10:59:22,884 p=2514823 u=root n=ansible | ok: [host1] => (item=warm-host2/csr)
2025-09-28 10:59:23,746 p=2514823 u=root n=ansible | ok: [host1] => (item=warm-host2/conf)
2025-09-28 10:59:24,916 p=2514823 u=root n=ansible | ok: [host1] => (item=sf-host2/csr)
2025-09-28 10:59:25,863 p=2514823 u=root n=ansible | ok: [host1] => (item=sf-host2/conf)
2025-09-28 10:59:26,801 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host3/csr)
2025-09-28 10:59:27,790 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host3/conf)
2025-09-28 10:59:29,020 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host3/csr)
2025-09-28 10:59:30,029 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host3/conf)
2025-09-28 10:59:30,915 p=2514823 u=root n=ansible | ok: [host1] => (item=cold-host3/csr)
2025-09-28 10:59:31,784 p=2514823 u=root n=ansible | ok: [host1] => (item=cold-host3/conf)
2025-09-28 10:59:32,554 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master/csr)
2025-09-28 10:59:33,339 p=2514823 u=root n=ansible | ok: [host1] => (item=bda-master/conf)
2025-09-28 10:59:33,382 p=2514823 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************************************************************************************************************************************
2025-09-28 10:59:33,557 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:59:33,723 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:35,433 p=2514823 u=root n=ansible | changed: [bda -> host1(192.168.166.130)]
2025-09-28 10:59:35,513 p=2514823 u=root n=ansible | changed: [host2 -> host1(192.168.166.130)]
2025-09-28 10:59:35,568 p=2514823 u=root n=ansible | changed: [host3 -> host1(192.168.166.130)]
2025-09-28 10:59:35,589 p=2514823 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************************************************************************************************************************************
2025-09-28 10:59:35,799 p=2514823 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 10:59:35,832 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:35,864 p=2514823 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 10:59:35,933 p=2514823 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 10:59:35,936 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:59:37,083 p=2514823 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 10:59:37,254 p=2514823 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-28 10:59:37,261 p=2514823 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 10:59:38,067 p=2514823 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 10:59:38,221 p=2514823 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 10:59:38,939 p=2514823 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 10:59:38,958 p=2514823 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 10:59:38,976 p=2514823 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************************************************************************************************************************************
2025-09-28 10:59:39,167 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:39,858 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 10:59:39,941 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 10:59:40,091 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 10:59:40,116 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 10:59:40,806 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 10:59:40,888 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 10:59:41,085 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 10:59:41,898 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 10:59:42,009 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 10:59:42,043 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 10:59:42,077 p=2514823 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************************************************************************************************************************************
2025-09-28 10:59:42,391 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:43,155 p=2514823 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 10:59:43,163 p=2514823 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 10:59:43,299 p=2514823 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 10:59:43,395 p=2514823 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 10:59:44,154 p=2514823 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 10:59:44,207 p=2514823 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 10:59:44,283 p=2514823 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 10:59:45,144 p=2514823 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 10:59:45,163 p=2514823 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 10:59:45,217 p=2514823 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 10:59:45,250 p=2514823 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************************************************************************************************************************************
2025-09-28 10:59:45,471 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host1\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host1: /usr/share/siem/elasticsearch/certs/master-host1/master-host1.crt\n- hot-host1: /usr/share/siem/elasticsearch/certs/hot-host1/hot-host1.crt\n- ml-host1: /usr/share/siem/elasticsearch/certs/ml-host1/ml-host1.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 10:59:45,511 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host2\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host2: /usr/share/siem/elasticsearch/certs/master-host2/master-host2.crt\n- warm-host2: /usr/share/siem/elasticsearch/certs/warm-host2/warm-host2.crt\n- sf-host2: /usr/share/siem/elasticsearch/certs/sf-host2/sf-host2.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 10:59:45,547 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host3\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host3: /usr/share/siem/elasticsearch/certs/master-host3/master-host3.crt\n- hot-host3: /usr/share/siem/elasticsearch/certs/hot-host3/hot-host3.crt\n- cold-host3: /usr/share/siem/elasticsearch/certs/cold-host3/cold-host3.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 10:59:45,550 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:45,617 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: bda\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- bda-master: /usr/share/siem/elasticsearch/certs/bda-master/bda-master.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 10:59:45,648 p=2514823 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************************************************************************************************************************************
2025-09-28 10:59:45,937 p=2514823 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 10:59:45,941 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:59:45,945 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:47,666 p=2514823 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 10:59:47,739 p=2514823 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 10:59:47,856 p=2514823 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 10:59:49,475 p=2514823 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 10:59:49,564 p=2514823 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 10:59:49,778 p=2514823 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 10:59:51,204 p=2514823 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 10:59:51,219 p=2514823 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 10:59:51,900 p=2514823 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 10:59:51,916 p=2514823 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 10:59:52,169 p=2514823 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 10:59:52,171 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 10:59:52,190 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:53,605 p=2514823 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 10:59:53,667 p=2514823 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 10:59:53,769 p=2514823 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 10:59:55,247 p=2514823 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 10:59:55,335 p=2514823 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 10:59:55,465 p=2514823 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 10:59:56,612 p=2514823 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 10:59:56,776 p=2514823 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 10:59:57,013 p=2514823 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 10:59:57,047 p=2514823 u=root n=ansible | TASK [install_elastic : Generate single-node configuration] *********************************************************************************************************************************************************************************
2025-09-28 10:59:57,195 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:59:57,286 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:59:57,289 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:59:57,333 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 10:59:59,132 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 10:59:59,158 p=2514823 u=root n=ansible | TASK [install_elastic : Generate single-node JVM options] ***********************************************************************************************************************************************************************************
2025-09-28 10:59:59,304 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 10:59:59,429 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 10:59:59,432 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 10:59:59,483 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:00,911 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:00,937 p=2514823 u=root n=ansible | TASK [install_elastic : Set node_configs for consistency] ***********************************************************************************************************************************************************************************
2025-09-28 11:00:01,076 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:01,112 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:01,145 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:01,204 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:01,224 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:01,247 p=2514823 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for ALL hosts with Elasticsearch nodes] ************************************************************************************************************************************************
2025-09-28 11:00:01,530 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:02,844 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 11:00:02,877 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:03,091 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 11:00:03,121 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:03,144 p=2514823 u=root n=ansible | TASK [install_elastic : Verify docker-compose file exists] **********************************************************************************************************************************************************************************
2025-09-28 11:00:03,410 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:04,082 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:04,102 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:04,238 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:04,240 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:04,266 p=2514823 u=root n=ansible | TASK [install_elastic : Display docker-compose file status] *********************************************************************************************************************************************************************************
2025-09-28 11:00:04,468 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Docker-compose file status on host1:\n- File exists: True\n- File size: 3569 bytes\n- Generated: True\n"
}
2025-09-28 11:00:04,471 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Docker-compose file status on host2:\n- File exists: True\n- File size: 10447 bytes\n- Generated: False\n"
}
2025-09-28 11:00:04,472 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Docker-compose file status on host3:\n- File exists: True\n- File size: 10468 bytes\n- Generated: False\n"
}
2025-09-28 11:00:04,497 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Docker-compose file status on bda:\n- File exists: True\n- File size: 3569 bytes\n- Generated: True\n"
}
2025-09-28 11:00:04,532 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:04,560 p=2514823 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-28 11:00:04,779 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host1\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:00:04,856 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host2\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:00:04,860 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host3\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:00:04,890 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: bda\nDeployment Type: Single-node\nNodes: 1\n"
}
2025-09-28 11:00:04,902 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:04,925 p=2514823 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************************************************************************************************************************************
2025-09-28 11:00:05,373 p=2514823 u=root n=ansible | ok: [host1 -> localhost]
2025-09-28 11:00:05,388 p=2514823 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************************************************************************************************************************************
2025-09-28 11:00:05,503 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "Docker image file status:\n- Expected path: /root/roles/install_elastic/files/elasticsearch-8.18.2-docker.tar.gz\n- File exists: False\n- File size: N/A bytes\n"
}
2025-09-28 11:00:05,534 p=2514823 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************************************************************************************************************************************
2025-09-28 11:00:05,829 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:06,407 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:06,653 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:06,658 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:06,668 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:06,685 p=2514823 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************************************************************************************************************************************
2025-09-28 11:00:07,010 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:07,663 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:07,728 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:07,805 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:07,863 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:07,900 p=2514823 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:00:08,059 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:08,115 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:08,168 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:08,180 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 11:00:08,221 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:08,249 p=2514823 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:00:08,463 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:08,520 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:08,524 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:08,547 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 11:00:08,595 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:08,622 p=2514823 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************************************************************************************************************************************
2025-09-28 11:00:08,769 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:08,860 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:08,873 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:08,908 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 11:00:08,965 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:08,986 p=2514823 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************************************************************************************************************************************
2025-09-28 11:00:09,300 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:10,054 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:10,090 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:10,157 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:10,164 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:10,185 p=2514823 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************************************************************************************************************************************
2025-09-28 11:00:10,380 p=2514823 u=root n=ansible | ok: [host1] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:00:10,387 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch                 8.18.2    8cb612c5d433   6 days ago      1.36GB"
}
2025-09-28 11:00:10,417 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:00:10,433 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:10,462 p=2514823 u=root n=ansible | ok: [bda] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:00:10,487 p=2514823 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 11:00:10,712 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:10,778 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:10,782 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:10,823 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:10,861 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:10,894 p=2514823 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************************************************************************************************************************************
2025-09-28 11:00:11,097 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:11,161 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:11,164 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:11,164 p=2514823 u=root n=ansible | ok: [bda]
2025-09-28 11:00:11,231 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:11,263 p=2514823 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************************************************************************************************************************************
2025-09-28 11:00:11,506 p=2514823 u=root n=ansible | skipping: [bda]
2025-09-28 11:00:11,529 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:13,061 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:13,162 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:13,206 p=2514823 u=root n=ansible | changed: [host1]
2025-09-28 11:00:13,227 p=2514823 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************************************************************************************************************************************
2025-09-28 11:00:13,390 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:13,454 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:13,458 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:13,522 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:15,256 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 11:00:15,293 p=2514823 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************************************************************************************************************************************
2025-09-28 11:00:15,750 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:17,046 p=2514823 u=root n=ansible | ok: [host1]
2025-09-28 11:00:17,051 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:17,086 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:17,144 p=2514823 u=root n=ansible | changed: [bda]
2025-09-28 11:00:17,171 p=2514823 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************************************************************************************************************************************
2025-09-28 11:00:17,333 p=2514823 u=root n=ansible | skipping: [host1]
2025-09-28 11:00:17,364 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:00:17,440 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:00:17,489 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:19,609 p=2514823 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Configuration error - yaml.parser.ParserError: while parsing a block collection\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 23, column 31"}
2025-09-28 11:00:19,609 p=2514823 u=root n=ansible | ...ignoring
2025-09-28 11:00:19,637 p=2514823 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************************************************************************************************************************************
2025-09-28 11:00:19,956 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:21,506 p=2514823 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Configuration error - yaml.parser.ParserError: while parsing a block collection\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 23, column 31"}
2025-09-28 11:00:21,634 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:21,708 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:21,810 p=2514823 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "Configuration error - yaml.parser.ParserError: while parsing a block collection\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"/usr/share/siem/elasticsearch/docker-compose.yml\", line 23, column 31"}
2025-09-28 11:00:21,844 p=2514823 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-28 11:00:22,092 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:00:24,104 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:00:24,345 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:00:24,364 p=2514823 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-28 11:00:24,572 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:01:25,494 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:01:25,580 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:01:25,598 p=2514823 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************************************************************************************************************************************
2025-09-28 11:01:25,782 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: host2\nDeployment Type: Multi-node\n\n📊 Container Status:\n- Expected containers: 3\n- Running containers: 3\n\n📋 Deployed Nodes:\n- master-host2: https://192.168.166.131:9200\n- warm-host2: https://192.168.166.131:9201\n- sf-host2: https://192.168.166.131:9202\n\n🔧 Management Commands:\n# View all containers\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml ps\n\n# View logs\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml logs [node-name]\n\n# Restart services\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml restart\n\n✅ Docker deployment completed!"
}
2025-09-28 11:01:25,807 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:01:25,836 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: host3\nDeployment Type: Multi-node\n\n📊 Container Status:\n- Expected containers: 3\n- Running containers: 3\n\n📋 Deployed Nodes:\n- master-host3: https://192.168.166.132:9200\n- hot-host3: https://192.168.166.132:9201\n- cold-host3: https://192.168.166.132:9202\n\n🔧 Management Commands:\n# View all containers\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml ps\n\n# View logs\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml logs [node-name]\n\n# Restart services\ndocker-compose -f /usr/share/siem/elasticsearch/docker-compose.yml restart\n\n✅ Docker deployment completed!"
}
2025-09-28 11:01:25,863 p=2514823 u=root n=ansible | TASK [install_elastic : Stop existing containers if config changed] *************************************************************************************************************************************************************************
2025-09-28 11:01:26,059 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:01:28,577 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 11:01:37,649 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 11:01:37,671 p=2514823 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch cluster] ***************************************************************************************************************************************************************************************
2025-09-28 11:01:37,864 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:01:41,013 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 11:01:41,294 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 11:01:41,324 p=2514823 u=root n=ansible | TASK [install_elastic : Check containers are running] ***************************************************************************************************************************************************************************************
2025-09-28 11:01:41,521 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:01:43,547 p=2514823 u=root n=ansible | ok: [host3]
2025-09-28 11:01:43,649 p=2514823 u=root n=ansible | ok: [host2]
2025-09-28 11:01:43,690 p=2514823 u=root n=ansible | TASK [install_elastic : Simple connectivity test] *******************************************************************************************************************************************************************************************
2025-09-28 11:01:43,870 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:02:14,647 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9200", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host3", "port_offset": 0, "roles": ["master"]}}
2025-09-28 11:02:14,792 p=2514823 u=root n=ansible | failed: [host2] (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.131:9200", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host2", "port_offset": 0, "roles": ["master"]}}
2025-09-28 11:02:45,475 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9201", "node": {"group_membership": ["HOT", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "hot-host3", "port_offset": 1, "roles": ["data_hot", "data_content"]}}
2025-09-28 11:02:45,663 p=2514823 u=root n=ansible | failed: [host2] (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.131:9201", "node": {"group_membership": ["WARM", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "warm-host2", "port_offset": 1, "roles": ["data_warm"]}}
2025-09-28 11:03:08,580 p=2514823 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 11:03:08,587 p=2514823 u=root n=ansible | ...ignoring
2025-09-28 11:03:16,507 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9202", "node": {"group_membership": ["COLD", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "2g", "name": "cold-host3", "port_offset": 2, "roles": ["data_cold"]}}
2025-09-28 11:03:16,510 p=2514823 u=root n=ansible | ...ignoring
2025-09-28 11:03:16,545 p=2514823 u=root n=ansible | TASK [install_elastic : Basic Elasticsearch API test (with short timeout)] ******************************************************************************************************************************************************************
2025-09-28 11:03:16,757 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:03:37,076 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host3", "port_offset": 0, "roles": ["master"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9200/"}
2025-09-28 11:03:37,713 p=2514823 u=root n=ansible | failed: [host2] (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host2", "port_offset": 0, "roles": ["master"]}, "redirected": false, "status": -1, "url": "https://192.168.166.131:9200/"}
2025-09-28 11:03:57,398 p=2514823 u=root n=ansible | failed: [host2] (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["WARM", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "warm-host2", "port_offset": 1, "roles": ["data_warm"]}, "redirected": false, "status": -1, "url": "https://192.168.166.131:9201/"}
2025-09-28 11:03:57,510 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["HOT", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "hot-host3", "port_offset": 1, "roles": ["data_hot", "data_content"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9201/"}
2025-09-28 11:03:58,655 p=2514823 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 11:03:58,660 p=2514823 u=root n=ansible | ...ignoring
2025-09-28 11:04:17,231 p=2514823 u=root n=ansible | failed: [host3] (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["COLD", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "2g", "name": "cold-host3", "port_offset": 2, "roles": ["data_cold"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9202/"}
2025-09-28 11:04:17,234 p=2514823 u=root n=ansible | ...ignoring
2025-09-28 11:04:17,253 p=2514823 u=root n=ansible | TASK [install_elastic : Display health check results] ***************************************************************************************************************************************************************************************
2025-09-28 11:04:17,384 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "Container Status: \n\nQuick Health Check Results:\n- master-host2: FAILED\n- warm-host2: FAILED\n- sf-host2: OK\n"
}
2025-09-28 11:04:17,417 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "Container Status: \n\nQuick Health Check Results:\n- master-host3: FAILED\n- hot-host3: FAILED\n- cold-host3: FAILED\n"
}
2025-09-28 11:04:17,485 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:17,517 p=2514823 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 11:04:17,768 p=2514823 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                    ELASTICSEARCH INSTALLATION COMPLETED      ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Nodes Deployed: 3                                  ║\n║ Timestamp: 2025-09-28T07:27:33Z                   ║\n║ Status: ✅ SUCCESS                                           ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:04:17,770 p=2514823 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                    ELASTICSEARCH INSTALLATION COMPLETED      ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Nodes Deployed: 3                                  ║\n║ Timestamp: 2025-09-28T07:27:31Z                   ║\n║ Status: ✅ SUCCESS                                           ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:04:17,865 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:17,938 p=2514823 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 11:04:18,049 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:18,062 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:18,140 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:18,154 p=2514823 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 11:04:18,285 p=2514823 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 11:04:18,299 p=2514823 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 11:04:18,307 p=2514823 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:04:18,327 p=2514823 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:04:18,338 p=2514823 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:04:18,347 p=2514823 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:04:18,368 p=2514823 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:04:18,370 p=2514823 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:04:18,377 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 11:04:18,381 p=2514823 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:04:18,385 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:18,393 p=2514823 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:04:18,396 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:18,397 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:04:18,411 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:04:18,428 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:04:18,438 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:04:18,440 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:18,462 p=2514823 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:04:18,587 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:18,590 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:18,666 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:18,688 p=2514823 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:04:18,824 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:18,833 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:18,914 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:18,951 p=2514823 u=root n=ansible | TASK [install_kibana : Remove temporary Docker image file] **********************************************************************************************************************************************************************************
2025-09-28 11:04:19,087 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:19,134 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:19,139 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:19,166 p=2514823 u=root n=ansible | TASK [install_kibana : Create directory files] **********************************************************************************************************************************************************************************************
2025-09-28 11:04:19,292 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:19,308 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:04:19,310 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:19,332 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:19,338 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:19,368 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:04:19,371 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:19,373 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:04:19,375 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:19,393 p=2514823 u=root n=ansible | TASK [install_kibana : copy certs files to destination] *************************************************************************************************************************************************************************************
2025-09-28 11:04:19,503 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:19,506 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:19,558 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:19,577 p=2514823 u=root n=ansible | TASK [install_kibana : Copy Ca file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:04:19,686 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:19,708 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:19,710 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:19,736 p=2514823 u=root n=ansible | TASK [install_kibana : Check certificate destination path] **********************************************************************************************************************************************************************************
2025-09-28 11:04:19,883 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:19,902 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:19,983 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:20,025 p=2514823 u=root n=ansible | TASK [install_kibana : Copy fleet server certificate to sf server] **************************************************************************************************************************************************************************
2025-09-28 11:04:20,164 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:20,174 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:20,244 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:20,268 p=2514823 u=root n=ansible | TASK [install_kibana : Copy certificate files] **********************************************************************************************************************************************************************************************
2025-09-28 11:04:20,377 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:20,383 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:20,445 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:20,474 p=2514823 u=root n=ansible | TASK [install_kibana : Copy ca certificate files to }/kibana] *******************************************************************************************************************************************************************************
2025-09-28 11:04:20,592 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:20,602 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:20,684 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:20,717 p=2514823 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:04:20,862 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:20,866 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:20,944 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:20,964 p=2514823 u=root n=ansible | TASK [install_kibana : Process fingerprint string] ******************************************************************************************************************************************************************************************
2025-09-28 11:04:21,073 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:21,074 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:21,111 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:21,136 p=2514823 u=root n=ansible | TASK [install_kibana : Change the permision file] *******************************************************************************************************************************************************************************************
2025-09-28 11:04:21,213 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:21,227 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:21,276 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:21,278 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:21,289 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:04:21,291 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:21,316 p=2514823 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 11:04:21,406 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:21,419 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:21,482 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:21,506 p=2514823 u=root n=ansible | TASK [install_kibana : Wait for Elasticsearch to be ready before creating token] ************************************************************************************************************************************************************
2025-09-28 11:04:21,616 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:21,664 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:21,686 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:21,713 p=2514823 u=root n=ansible | TASK [install_kibana : Create Elasticsearch service token for kibana] ***********************************************************************************************************************************************************************
2025-09-28 11:04:21,864 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:21,885 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:21,908 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:21,931 p=2514823 u=root n=ansible | TASK [install_kibana : Extract token from output] *******************************************************************************************************************************************************************************************
2025-09-28 11:04:22,022 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,037 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:22,080 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:22,104 p=2514823 u=root n=ansible | TASK [install_kibana : Use existing service token if available] *****************************************************************************************************************************************************************************
2025-09-28 11:04:22,223 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,230 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:22,288 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:22,309 p=2514823 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 11:04:22,407 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,416 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:22,461 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:22,476 p=2514823 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:04:22,570 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,602 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:22,619 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:22,642 p=2514823 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 11:04:22,751 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,799 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:22,824 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:22,842 p=2514823 u=root n=ansible | TASK [install_kibana : Copy CA file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:04:22,946 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:22,953 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:23,028 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:23,062 p=2514823 u=root n=ansible | TASK [install_kibana : Configure kibana from template file] *********************************************************************************************************************************************************************************
2025-09-28 11:04:23,197 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:23,199 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:23,261 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:23,290 p=2514823 u=root n=ansible | TASK [install_kibana : ALWAYS Generate Kibana Docker Compose file] **************************************************************************************************************************************************************************
2025-09-28 11:04:23,380 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:23,388 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:23,433 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:23,454 p=2514823 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 11:04:23,542 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:23,551 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:23,596 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:23,620 p=2514823 u=root n=ansible | TASK [install_kibana : Display compose file status] *****************************************************************************************************************************************************************************************
2025-09-28 11:04:23,733 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:23,735 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:23,778 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:23,813 p=2514823 u=root n=ansible | TASK [install_kibana : Fail if compose file was not created] ********************************************************************************************************************************************************************************
2025-09-28 11:04:24,047 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,059 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,123 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:24,151 p=2514823 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 11:04:24,233 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,288 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,324 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:24,345 p=2514823 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 11:04:24,433 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,446 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,477 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:24,498 p=2514823 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 11:04:24,591 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,605 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,639 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:24,660 p=2514823 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 11:04:24,738 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,751 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,791 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:24,822 p=2514823 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 11:04:24,941 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:24,943 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:24,985 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:25,018 p=2514823 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 11:04:25,093 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:25,191 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:25,216 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:25,249 p=2514823 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 11:04:25,383 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:25,386 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:25,435 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:25,459 p=2514823 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 11:04:25,565 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:25,573 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:25,610 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:25,640 p=2514823 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 11:04:25,769 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:25,771 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:25,869 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:25,891 p=2514823 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 11:04:25,990 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,007 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,072 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,104 p=2514823 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 11:04:26,233 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,235 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,284 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,303 p=2514823 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 11:04:26,393 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,404 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,457 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,478 p=2514823 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 11:04:26,562 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,573 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,614 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,644 p=2514823 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 11:04:26,753 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,762 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,807 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,828 p=2514823 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 11:04:26,929 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:26,939 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:26,973 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:26,996 p=2514823 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 11:04:27,086 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:27,103 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:27,136 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:27,157 p=2514823 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 11:04:27,253 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:27,280 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:27,357 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:27,384 p=2514823 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 11:04:27,502 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:27,519 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:27,559 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:27,590 p=2514823 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 11:04:27,716 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:27,725 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:27,788 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:27,815 p=2514823 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 11:04:27,957 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:27,961 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:28,021 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:28,057 p=2514823 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 11:04:28,227 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:28,229 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:28,271 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:28,305 p=2514823 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 11:04:28,385 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:28,472 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:28,512 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:28,550 p=2514823 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 11:04:28,722 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:28,726 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:28,797 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:28,827 p=2514823 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 11:04:28,938 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:28,953 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:28,982 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:29,008 p=2514823 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 11:04:29,122 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:29,125 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:29,215 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:29,236 p=2514823 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 11:04:29,349 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:29,357 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:29,404 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:29,425 p=2514823 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 11:04:29,517 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:29,524 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:29,559 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:29,574 p=2514823 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 11:04:29,659 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:29,668 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:29,710 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:29,733 p=2514823 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 11:04:29,885 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:29,887 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:29,977 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:30,002 p=2514823 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 11:04:30,130 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:30,151 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:30,175 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:30,213 p=2514823 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 11:04:30,299 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:30,390 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:30,411 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:30,456 p=2514823 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 11:04:30,726 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:30,728 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:30,785 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:30,809 p=2514823 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 11:04:30,889 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:04:30,927 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:04:30,962 p=2514823 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:04:30,969 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:04:30,970 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:30,983 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:04:31,000 p=2514823 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:04:31,002 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:31,013 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:04:31,039 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:04:31,060 p=2514823 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:04:31,061 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:31,094 p=2514823 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 11:04:31,233 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:31,262 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:31,268 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:31,280 p=2514823 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 11:04:31,360 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:31,364 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:31,434 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:31,465 p=2514823 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 11:04:31,534 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:31,579 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:31,627 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:31,659 p=2514823 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 11:04:31,764 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:31,777 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:31,840 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:31,877 p=2514823 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 11:04:32,018 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:32,029 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:32,107 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:32,133 p=2514823 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 11:04:32,255 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:32,259 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:32,300 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:32,321 p=2514823 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 11:04:32,428 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:32,466 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:32,476 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:32,505 p=2514823 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 11:04:32,649 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:32,652 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:32,708 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:32,838 p=2514823 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-28 11:04:33,602 p=2514823 u=root n=ansible | changed: [host2]
2025-09-28 11:04:33,766 p=2514823 u=root n=ansible | changed: [host3]
2025-09-28 11:04:33,798 p=2514823 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 11:04:33,934 p=2514823 u=root n=ansible | skipping: [host2]
2025-09-28 11:04:33,936 p=2514823 u=root n=ansible | skipping: [host3]
2025-09-28 11:04:33,973 p=2514823 u=root n=ansible | skipping: [lb1]
2025-09-28 11:04:34,088 p=2514823 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 11:04:34,089 p=2514823 u=root n=ansible | bda                        : ok=62   changed=11   unreachable=0    failed=1    skipped=14   rescued=0    ignored=1   
2025-09-28 11:04:34,089 p=2514823 u=root n=ansible | host1                      : ok=66   changed=11   unreachable=0    failed=1    skipped=26   rescued=0    ignored=0   
2025-09-28 11:04:34,089 p=2514823 u=root n=ansible | host2                      : ok=71   changed=14   unreachable=0    failed=0    skipped=88   rescued=0    ignored=2   
2025-09-28 11:04:34,090 p=2514823 u=root n=ansible | host3                      : ok=71   changed=14   unreachable=0    failed=0    skipped=88   rescued=0    ignored=2   
2025-09-28 11:04:34,090 p=2514823 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=145  rescued=0    ignored=0   
2025-09-28 11:04:56,812 p=2525957 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 11:04:57,005 p=2525957 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 11:05:00,153 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:00,158 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:00,224 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:00,280 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:00,383 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:00,399 p=2525957 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 11:05:00,481 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:00,532 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:00,579 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:00,582 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:00,596 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:00,766 p=2525957 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 11:05:02,935 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:03,056 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:03,085 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:03,119 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:03,356 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:03,377 p=2525957 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 11:05:03,512 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:03,563 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:03,612 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:03,627 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:03,671 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:03,708 p=2525957 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 11:05:03,761 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:03,769 p=2525957 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 11:05:03,784 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:03,792 p=2525957 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 11:05:03,808 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:03,818 p=2525957 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 11:05:04,890 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:04,919 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:04,933 p=2525957 u=root n=ansible | changed: [lb1]
2025-09-28 11:05:04,948 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:05:04,959 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:04,975 p=2525957 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 11:05:04,990 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:05,001 p=2525957 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 11:05:07,140 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:07,480 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:07,488 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:05:07,526 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:07,624 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:07,639 p=2525957 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 11:05:08,885 p=2525957 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 11:05:08,907 p=2525957 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 11:05:08,938 p=2525957 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 11:05:08,954 p=2525957 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 11:05:09,005 p=2525957 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 11:05:09,602 p=2525957 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 11:05:09,656 p=2525957 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 11:05:09,672 p=2525957 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 11:05:09,678 p=2525957 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 11:05:09,738 p=2525957 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 11:05:09,873 p=2525957 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 11:05:09,973 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:10,042 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:10,086 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:10,089 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:10,109 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:10,137 p=2525957 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 11:05:11,038 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:11,046 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:11,051 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:11,119 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:11,181 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:11,200 p=2525957 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 11:05:12,114 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:12,116 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:12,190 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:12,304 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:12,324 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:12,354 p=2525957 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 11:05:12,524 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:12,617 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:12,683 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:12,693 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:12,751 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:12,849 p=2525957 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 11:05:12,923 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:12,955 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:13,013 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:13,017 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:13,774 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:13,788 p=2525957 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 11:05:13,863 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:13,906 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:13,973 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:13,976 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:14,045 p=2525957 u=root n=ansible | ok: [lb1]
2025-09-28 11:05:14,082 p=2525957 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 11:05:14,156 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:14,215 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:14,282 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:14,343 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:14,397 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:14,536 p=2525957 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************************************************************************************************************************************
2025-09-28 11:05:14,718 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host1                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:35:02Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:05:14,769 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host2                      ║\n║ IP: 192.168.166.131                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:35:01Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:05:14,778 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host3                      ║\n║ IP: 192.168.166.132                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:35:01Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:05:14,814 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: bda                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 1                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:35:01Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:05:14,839 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:14,867 p=2525957 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 11:05:15,052 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:15,145 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:15,148 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:15,187 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:15,248 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:15,270 p=2525957 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 11:05:15,382 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:15,457 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:15,460 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:15,532 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:15,535 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:15,561 p=2525957 u=root n=ansible | TASK [install_elastic : Set discovery seed hosts] *******************************************************************************************************************************************************************************************
2025-09-28 11:05:15,752 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:15,806 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:15,809 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:15,847 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:15,876 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:15,905 p=2525957 u=root n=ansible | TASK [install_elastic : Set initial master nodes] *******************************************************************************************************************************************************************************************
2025-09-28 11:05:16,075 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:16,124 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:16,126 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:16,139 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:16,174 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:16,196 p=2525957 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 11:05:16,326 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:16,354 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:16,381 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:16,408 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:16,440 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:16,457 p=2525957 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for ALL deployments] *******************************************************************************************************************************************************************
2025-09-28 11:05:16,626 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:16,629 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:16,630 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:16,632 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:16,680 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:16,700 p=2525957 u=root n=ansible | TASK [install_elastic : Ensure elasticsearch_node_roles fallback] ***************************************************************************************************************************************************************************
2025-09-28 11:05:16,880 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:16,883 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:16,900 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:16,917 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:16,972 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:16,991 p=2525957 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 11:05:17,104 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:05:17,214 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:05:17,227 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: single-node\nNodes on this host: 1\nMulti-node deployment: False\nPrimary node roles: ['master', 'transform', 'ml', 'ingest', 'data_content']\n"
}
2025-09-28 11:05:17,228 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:05:17,316 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:17,338 p=2525957 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 11:05:17,538 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:17,569 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:17,613 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:17,625 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:17,654 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:17,681 p=2525957 u=root n=ansible | TASK [install_elastic : Debug host elasticsearch configuration] *****************************************************************************************************************************************************************************
2025-09-28 11:05:17,922 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host1\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'ML', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:05:17,936 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host2\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'MASTER', 'SF', 'WARM', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:05:17,950 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host3\nGroups: ['COLD', 'DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:05:17,971 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:18,001 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: bda\nGroups: ['BDA', 'ELASTICSEARCH', 'MASTER', 'ML', 'SF', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 1\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:05:18,021 p=2525957 u=root n=ansible | TASK [install_elastic : Skip non-Elasticsearch hosts] ***************************************************************************************************************************************************************************************
2025-09-28 11:05:18,168 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:18,234 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:18,237 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:18,278 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:18,278 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:18,298 p=2525957 u=root n=ansible | TASK [install_elastic : Skip load balancer hosts] *******************************************************************************************************************************************************************************************
2025-09-28 11:05:18,446 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:18,449 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:18,488 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:18,490 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:18,533 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:18,558 p=2525957 u=root n=ansible | TASK [install_elastic : Ensure required variables are set] **********************************************************************************************************************************************************************************
2025-09-28 11:05:18,732 p=2525957 u=root n=ansible | ok: [host1] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:05:18,802 p=2525957 u=root n=ansible | ok: [host2] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:05:18,806 p=2525957 u=root n=ansible | ok: [host3] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:05:18,839 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:18,860 p=2525957 u=root n=ansible | ok: [bda] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:05:18,906 p=2525957 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 11:05:19,205 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 11:05:19,410 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 11:05:19,424 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 11:05:19,467 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 11:05:19,486 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 11:05:19,488 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:20,055 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:20,074 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:20,091 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:20,098 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:20,999 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:05:21,070 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:05:21,224 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:05:21,241 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:05:21,992 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:05:22,113 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:05:22,229 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:05:22,249 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:05:23,011 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:05:23,110 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:05:23,253 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:05:23,295 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:05:23,936 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:24,166 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:24,214 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:24,373 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:24,411 p=2525957 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 11:05:24,778 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:26,290 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:26,350 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:26,353 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:26,440 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:26,481 p=2525957 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 11:05:26,743 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:27,315 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:27,431 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:27,488 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:27,553 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:27,574 p=2525957 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 11:05:27,722 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:27,764 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:27,773 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:27,811 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:27,869 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:27,888 p=2525957 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 11:05:27,998 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:05:28,081 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:05:28,164 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:05:28,177 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:05:28,260 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:28,294 p=2525957 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 11:05:28,643 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:29,447 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:05:29,450 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:29,518 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:29,526 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:29,552 p=2525957 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 11:05:29,962 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:30,478 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:30,619 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:30,620 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:30,807 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:30,826 p=2525957 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 11:05:31,118 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:31,857 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:31,883 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:31,896 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:31,984 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:05:32,018 p=2525957 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 11:05:32,334 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:32,869 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:32,969 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:33,060 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:33,200 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:33,217 p=2525957 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 11:05:33,499 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:34,135 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:34,191 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:34,197 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:34,268 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:34,291 p=2525957 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 11:05:34,454 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:05:34,524 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:05:34,527 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:05:34,543 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:05:34,602 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:34,640 p=2525957 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 11:05:34,935 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:35,796 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:35,918 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:35,959 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:35,977 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:36,003 p=2525957 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 11:05:36,361 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:36,930 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:05:37,060 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:05:37,164 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:05:37,169 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:05:37,191 p=2525957 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 11:05:37,482 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:38,508 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:38,546 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:38,596 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:38,636 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:38,672 p=2525957 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 11:05:38,935 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:39,578 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:39,636 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:39,799 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:39,856 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:39,881 p=2525957 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 11:05:40,020 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:05:40,087 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:05:40,151 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:05:40,190 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:05:40,242 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:40,270 p=2525957 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 11:05:40,575 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 11:05:40,609 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 11:05:40,640 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 11:05:40,644 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:41,249 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:41,452 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:41,488 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:41,603 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:05:42,082 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:05:42,535 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:05:42,555 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:05:42,625 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:05:43,139 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:43,329 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:43,581 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:43,608 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:05:43,627 p=2525957 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 11:05:43,865 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:44,574 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-28 11:05:44,580 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-28 11:05:44,642 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-28 11:05:44,890 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-28 11:05:45,518 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-28 11:05:45,524 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-28 11:05:45,599 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-28 11:05:45,854 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-28 11:05:46,243 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-28 11:05:46,391 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-28 11:05:46,585 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-28 11:05:46,765 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-28 11:05:47,177 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-28 11:05:47,565 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-28 11:05:47,639 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-28 11:05:47,989 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-28 11:05:48,430 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-28 11:05:48,459 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-28 11:05:48,883 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-28 11:05:49,379 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-28 11:05:49,390 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-28 11:05:49,898 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-28 11:05:50,252 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-28 11:05:50,370 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-28 11:05:50,990 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-28 11:05:51,230 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-28 11:05:51,402 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-28 11:05:51,893 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-28 11:05:52,102 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-28 11:05:52,263 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-28 11:05:52,287 p=2525957 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 11:05:52,590 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:54,057 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:05:54,093 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:05:54,098 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:05:54,207 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:05:54,234 p=2525957 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 11:05:54,571 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 11:05:54,582 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 11:05:54,596 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 11:05:54,598 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:55,176 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:05:55,228 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:05:55,255 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:05:55,263 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:05:56,037 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:05:56,162 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:05:56,313 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:05:56,399 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:05:57,072 p=2525957 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:05:57,237 p=2525957 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:05:57,312 p=2525957 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:05:57,650 p=2525957 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:05:57,670 p=2525957 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 11:05:57,996 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:05:58,698 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:05:58,780 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:05:58,803 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:05:58,857 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:05:59,600 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:05:59,715 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:05:59,789 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:06:00,488 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:06:00,757 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:06:00,922 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:06:00,992 p=2525957 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 11:06:01,924 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:06:01,974 p=2525957 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 11:06:02,111 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:02,162 p=2525957 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 11:06:02,294 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:02,323 p=2525957 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 11:06:02,629 p=2525957 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 11:06:02,684 p=2525957 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 11:06:02,687 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:02,743 p=2525957 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 11:06:02,940 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:06:02,967 p=2525957 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 11:06:03,161 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Nodes for Certificate Generation:\nTotal nodes: 10\n- master-host1 (host1: 192.168.166.130)\n- hot-host1 (host1: 192.168.166.130)\n- ml-host1 (host1: 192.168.166.130)\n- master-host2 (host2: 192.168.166.131)\n- warm-host2 (host2: 192.168.166.131)\n- sf-host2 (host2: 192.168.166.131)\n- master-host3 (host3: 192.168.166.132)\n- hot-host3 (host3: 192.168.166.132)\n- cold-host3 (host3: 192.168.166.132)\n- bda-master (bda: 192.168.166.130)\n"
}
2025-09-28 11:06:03,285 p=2525957 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 11:06:04,457 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:06:05,477 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:06:06,419 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:06:07,256 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 11:06:08,340 p=2525957 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 11:06:09,501 p=2525957 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 11:06:10,611 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 11:06:11,568 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 11:06:12,568 p=2525957 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 11:06:13,651 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 11:06:13,760 p=2525957 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************************************************************************************************************************************
2025-09-28 11:06:14,997 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:06:16,021 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:06:17,052 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:06:18,107 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 11:06:19,188 p=2525957 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 11:06:20,292 p=2525957 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 11:06:21,401 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 11:06:22,578 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 11:06:23,635 p=2525957 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 11:06:24,917 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 11:06:24,986 p=2525957 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************************************************************************************************************************************
2025-09-28 11:06:25,220 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:06:25,393 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:06:25,586 p=2525957 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:06:25,717 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:06:25,864 p=2525957 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:06:26,000 p=2525957 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:06:26,120 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:06:26,245 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:06:26,368 p=2525957 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:06:26,485 p=2525957 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:06:26,488 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:26,588 p=2525957 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************************************************************************************************************************************
2025-09-28 11:06:26,791 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:06:26,949 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:06:27,118 p=2525957 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:06:27,281 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:06:27,436 p=2525957 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:06:27,557 p=2525957 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:06:27,698 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:06:27,940 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:06:28,162 p=2525957 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:06:28,282 p=2525957 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:06:28,285 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:28,333 p=2525957 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************************************************************************************************************************************
2025-09-28 11:06:28,585 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:06:28,731 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:06:28,847 p=2525957 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:06:29,045 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:06:29,158 p=2525957 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:06:29,268 p=2525957 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:06:29,384 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:06:29,496 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:06:29,622 p=2525957 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:06:29,773 p=2525957 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:06:29,777 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:29,828 p=2525957 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************************************************************************************************************************************
2025-09-28 11:06:30,121 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:06:30,246 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:06:30,408 p=2525957 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:06:30,543 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:06:30,657 p=2525957 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:06:30,747 p=2525957 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:06:30,842 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:06:30,947 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:06:31,184 p=2525957 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:06:31,294 p=2525957 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:06:31,296 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:06:31,372 p=2525957 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************************************************************************************************************************************
2025-09-28 11:06:32,339 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/master-host1.crt)
2025-09-28 11:06:33,224 p=2525957 u=root n=ansible | changed: [host1] => (item=master-host1/master-host1.key)
2025-09-28 11:06:34,235 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/hot-host1.crt)
2025-09-28 11:06:35,274 p=2525957 u=root n=ansible | changed: [host1] => (item=hot-host1/hot-host1.key)
2025-09-28 11:06:36,271 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/ml-host1.crt)
2025-09-28 11:06:37,173 p=2525957 u=root n=ansible | changed: [host1] => (item=ml-host1/ml-host1.key)
2025-09-28 11:06:38,349 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host2/master-host2.crt)
2025-09-28 11:06:39,264 p=2525957 u=root n=ansible | changed: [host1] => (item=master-host2/master-host2.key)
2025-09-28 11:06:40,221 p=2525957 u=root n=ansible | ok: [host1] => (item=warm-host2/warm-host2.crt)
2025-09-28 11:06:41,121 p=2525957 u=root n=ansible | changed: [host1] => (item=warm-host2/warm-host2.key)
2025-09-28 11:06:42,122 p=2525957 u=root n=ansible | ok: [host1] => (item=sf-host2/sf-host2.crt)
2025-09-28 11:06:43,070 p=2525957 u=root n=ansible | changed: [host1] => (item=sf-host2/sf-host2.key)
2025-09-28 11:06:44,002 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host3/master-host3.crt)
2025-09-28 11:06:44,749 p=2525957 u=root n=ansible | changed: [host1] => (item=master-host3/master-host3.key)
2025-09-28 11:06:45,693 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host3/hot-host3.crt)
2025-09-28 11:06:46,698 p=2525957 u=root n=ansible | changed: [host1] => (item=hot-host3/hot-host3.key)
2025-09-28 11:06:47,505 p=2525957 u=root n=ansible | ok: [host1] => (item=cold-host3/cold-host3.crt)
2025-09-28 11:06:48,330 p=2525957 u=root n=ansible | changed: [host1] => (item=cold-host3/cold-host3.key)
2025-09-28 11:06:49,232 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.crt)
2025-09-28 11:06:50,117 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.key)
2025-09-28 11:06:50,225 p=2525957 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************************************************************************************************************************************
2025-09-28 11:06:51,339 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/csr)
2025-09-28 11:06:52,153 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1/conf)
2025-09-28 11:06:52,953 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/csr)
2025-09-28 11:06:53,666 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1/conf)
2025-09-28 11:06:54,577 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/csr)
2025-09-28 11:06:55,482 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1/conf)
2025-09-28 11:06:56,438 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host2/csr)
2025-09-28 11:06:57,275 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host2/conf)
2025-09-28 11:06:58,102 p=2525957 u=root n=ansible | ok: [host1] => (item=warm-host2/csr)
2025-09-28 11:06:59,014 p=2525957 u=root n=ansible | ok: [host1] => (item=warm-host2/conf)
2025-09-28 11:06:59,922 p=2525957 u=root n=ansible | ok: [host1] => (item=sf-host2/csr)
2025-09-28 11:07:00,927 p=2525957 u=root n=ansible | ok: [host1] => (item=sf-host2/conf)
2025-09-28 11:07:01,757 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host3/csr)
2025-09-28 11:07:02,633 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host3/conf)
2025-09-28 11:07:03,453 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host3/csr)
2025-09-28 11:07:04,468 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host3/conf)
2025-09-28 11:07:05,398 p=2525957 u=root n=ansible | ok: [host1] => (item=cold-host3/csr)
2025-09-28 11:07:06,384 p=2525957 u=root n=ansible | ok: [host1] => (item=cold-host3/conf)
2025-09-28 11:07:07,257 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master/csr)
2025-09-28 11:07:08,166 p=2525957 u=root n=ansible | ok: [host1] => (item=bda-master/conf)
2025-09-28 11:07:08,294 p=2525957 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************************************************************************************************************************************
2025-09-28 11:07:08,483 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:08,667 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:10,574 p=2525957 u=root n=ansible | changed: [host3 -> host1(192.168.166.130)]
2025-09-28 11:07:10,712 p=2525957 u=root n=ansible | changed: [host2 -> host1(192.168.166.130)]
2025-09-28 11:07:10,744 p=2525957 u=root n=ansible | changed: [bda -> host1(192.168.166.130)]
2025-09-28 11:07:10,779 p=2525957 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************************************************************************************************************************************
2025-09-28 11:07:10,993 p=2525957 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:07:11,105 p=2525957 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:07:11,167 p=2525957 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:07:11,171 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:11,184 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:12,489 p=2525957 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-28 11:07:12,584 p=2525957 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:07:12,616 p=2525957 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:07:13,542 p=2525957 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:07:13,559 p=2525957 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:07:14,411 p=2525957 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:07:14,471 p=2525957 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:07:14,486 p=2525957 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************************************************************************************************************************************
2025-09-28 11:07:14,834 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:15,749 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:07:15,790 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:07:15,806 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:07:15,847 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:07:16,800 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:07:16,876 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:07:16,964 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:07:17,843 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:07:17,860 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:07:17,987 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:07:18,023 p=2525957 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************************************************************************************************************************************
2025-09-28 11:07:18,326 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:19,234 p=2525957 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:07:19,238 p=2525957 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:07:19,258 p=2525957 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:07:19,276 p=2525957 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:07:20,152 p=2525957 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:07:20,208 p=2525957 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:07:20,331 p=2525957 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:07:21,184 p=2525957 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:07:21,195 p=2525957 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:07:21,207 p=2525957 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:07:21,234 p=2525957 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************************************************************************************************************************************
2025-09-28 11:07:21,417 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host1\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host1: /usr/share/siem/elasticsearch/certs/master-host1/master-host1.crt\n- hot-host1: /usr/share/siem/elasticsearch/certs/hot-host1/hot-host1.crt\n- ml-host1: /usr/share/siem/elasticsearch/certs/ml-host1/ml-host1.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:07:21,460 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host2\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host2: /usr/share/siem/elasticsearch/certs/master-host2/master-host2.crt\n- warm-host2: /usr/share/siem/elasticsearch/certs/warm-host2/warm-host2.crt\n- sf-host2: /usr/share/siem/elasticsearch/certs/sf-host2/sf-host2.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:07:21,516 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host3\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host3: /usr/share/siem/elasticsearch/certs/master-host3/master-host3.crt\n- hot-host3: /usr/share/siem/elasticsearch/certs/hot-host3/hot-host3.crt\n- cold-host3: /usr/share/siem/elasticsearch/certs/cold-host3/cold-host3.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:07:21,549 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:21,594 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: bda\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- bda-master: /usr/share/siem/elasticsearch/certs/bda-master/bda-master.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:07:21,609 p=2525957 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************************************************************************************************************************************
2025-09-28 11:07:21,850 p=2525957 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 11:07:21,853 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:21,867 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:23,366 p=2525957 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 11:07:23,467 p=2525957 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:07:23,805 p=2525957 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:07:24,791 p=2525957 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 11:07:25,057 p=2525957 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:07:25,746 p=2525957 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:07:26,481 p=2525957 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 11:07:26,938 p=2525957 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:07:27,520 p=2525957 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:07:27,546 p=2525957 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 11:07:27,843 p=2525957 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 11:07:27,846 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:27,857 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:29,314 p=2525957 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 11:07:29,458 p=2525957 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:07:29,682 p=2525957 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:07:31,054 p=2525957 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 11:07:31,194 p=2525957 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:07:31,412 p=2525957 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:07:32,602 p=2525957 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 11:07:32,740 p=2525957 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:07:33,126 p=2525957 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:07:33,165 p=2525957 u=root n=ansible | TASK [install_elastic : Generate single-node configuration] *********************************************************************************************************************************************************************************
2025-09-28 11:07:33,373 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:33,436 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:33,440 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:33,507 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:35,163 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:07:35,187 p=2525957 u=root n=ansible | TASK [install_elastic : Generate single-node JVM options] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:35,346 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:35,414 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:35,469 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:35,509 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:37,116 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:37,141 p=2525957 u=root n=ansible | TASK [install_elastic : Set node_configs for consistency] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:37,292 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:37,409 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:37,413 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:37,414 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:37,471 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:37,497 p=2525957 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for ALL hosts with Elasticsearch nodes] ************************************************************************************************************************************************
2025-09-28 11:07:37,785 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:39,525 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:07:39,563 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:07:39,588 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:07:39,728 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:07:39,750 p=2525957 u=root n=ansible | TASK [install_elastic : Verify docker-compose file exists] **********************************************************************************************************************************************************************************
2025-09-28 11:07:40,124 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:40,605 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:40,944 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:40,966 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:41,131 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:41,162 p=2525957 u=root n=ansible | TASK [install_elastic : Display docker-compose file status] *********************************************************************************************************************************************************************************
2025-09-28 11:07:41,470 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Docker-compose file status on host1:\n- File exists: True\n- File size: 2789 bytes\n- Generated: True\n"
}
2025-09-28 11:07:41,501 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Docker-compose file status on host2:\n- File exists: True\n- File size: 8129 bytes\n- Generated: True\n"
}
2025-09-28 11:07:41,503 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Docker-compose file status on host3:\n- File exists: True\n- File size: 8150 bytes\n- Generated: True\n"
}
2025-09-28 11:07:41,522 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Docker-compose file status on bda:\n- File exists: True\n- File size: 2789 bytes\n- Generated: True\n"
}
2025-09-28 11:07:41,551 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:41,567 p=2525957 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:41,685 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host1\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:07:41,735 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host2\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:07:41,738 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host3\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:07:41,764 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: bda\nDeployment Type: Single-node\nNodes: 1\n"
}
2025-09-28 11:07:41,787 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:41,885 p=2525957 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************************************************************************************************************************************
2025-09-28 11:07:42,482 p=2525957 u=root n=ansible | ok: [host1 -> localhost]
2025-09-28 11:07:42,510 p=2525957 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:42,785 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "Docker image file status:\n- Expected path: /root/roles/install_elastic/files/elasticsearch-8.18.2-docker.tar.gz\n- File exists: False\n- File size: N/A bytes\n"
}
2025-09-28 11:07:42,805 p=2525957 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************************************************************************************************************************************
2025-09-28 11:07:43,037 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:43,690 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:43,708 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:43,849 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:43,904 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:43,915 p=2525957 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************************************************************************************************************************************
2025-09-28 11:07:44,178 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:44,865 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:44,922 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:44,983 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:45,092 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:45,126 p=2525957 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:07:45,343 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:45,386 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:45,414 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:45,424 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:45,473 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:45,492 p=2525957 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:07:45,641 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:45,698 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:45,701 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:45,710 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:45,870 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:45,886 p=2525957 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************************************************************************************************************************************
2025-09-28 11:07:46,012 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:46,058 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:46,060 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:46,111 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:46,141 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:46,160 p=2525957 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************************************************************************************************************************************
2025-09-28 11:07:46,403 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:47,034 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:47,207 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:47,297 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:47,316 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:47,352 p=2525957 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************************************************************************************************************************************
2025-09-28 11:07:47,572 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:07:47,609 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch                 8.18.2    8cb612c5d433   6 days ago      1.36GB"
}
2025-09-28 11:07:47,632 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:07:47,645 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:07:47,706 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:47,723 p=2525957 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 11:07:47,862 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:47,923 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:47,925 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:47,926 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:47,979 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:48,000 p=2525957 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************************************************************************************************************************************
2025-09-28 11:07:48,143 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:48,206 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:48,210 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:48,219 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:48,269 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:48,290 p=2525957 u=root n=ansible | TASK [install_elastic : Remove any existing docker-compose file to force regeneration] ******************************************************************************************************************************************************
2025-09-28 11:07:48,538 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:49,230 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:07:49,260 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:07:49,313 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:49,340 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:07:49,356 p=2525957 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************************************************************************************************************************************
2025-09-28 11:07:49,632 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:49,657 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:50,835 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:07:51,077 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:07:51,083 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:07:51,097 p=2525957 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************************************************************************************************************************************
2025-09-28 11:07:51,184 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:51,227 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:51,315 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:51,371 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:52,947 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:07:52,969 p=2525957 u=root n=ansible | TASK [install_elastic : Check if docker-compose file was created] ***************************************************************************************************************************************************************************
2025-09-28 11:07:53,235 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:53,925 p=2525957 u=root n=ansible | ok: [host1]
2025-09-28 11:07:54,054 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:07:54,102 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:07:54,168 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:54,193 p=2525957 u=root n=ansible | TASK [install_elastic : Fail if compose file was not created] *******************************************************************************************************************************************************************************
2025-09-28 11:07:54,337 p=2525957 u=root n=ansible | skipping: [host1]
2025-09-28 11:07:54,393 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:07:54,441 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:07:54,485 p=2525957 u=root n=ansible | skipping: [bda]
2025-09-28 11:07:54,506 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:54,533 p=2525957 u=root n=ansible | TASK [install_elastic : Validate YAML syntax using docker-compose] **************************************************************************************************************************************************************************
2025-09-28 11:07:54,877 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:56,862 p=2525957 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.173646", "end": "2025-09-28 11:07:56.720695", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:07:55.547049", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 23, column 31", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 14, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 23, column 31"], "stdout": "", "stdout_lines": []}
2025-09-28 11:07:56,869 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:07:56,941 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:07:57,165 p=2525957 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.595412", "end": "2025-09-28 11:07:57.048420", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:07:55.453008", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 23, column 31", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 14, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 23, column 31"], "stdout": "", "stdout_lines": []}
2025-09-28 11:07:57,227 p=2525957 u=root n=ansible | TASK [install_elastic : Display validation success] *****************************************************************************************************************************************************************************************
2025-09-28 11:07:57,382 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Docker-compose file validation passed"
}
2025-09-28 11:07:57,440 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Docker-compose file validation passed"
}
2025-09-28 11:07:57,476 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:07:57,513 p=2525957 u=root n=ansible | TASK [install_elastic : Show docker-compose file content for debugging] *********************************************************************************************************************************************************************
2025-09-28 11:07:58,426 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:07:58,550 p=2525957 u=root n=ansible | changed: [bda]
2025-09-28 11:07:58,563 p=2525957 u=root n=ansible | TASK [install_elastic : Display problematic compose file] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:58,683 p=2525957 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\n# Replace roles/install_elastic/templates/docker-compose.yml.j2 with this:\n\nversion: '3.8'\n\nservices:\n  elasticsearch:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: elasticsearch-bda\n    hostname: bda\n    restart: unless-stopped\n    \n    environment:\n      # Node Configuration\n      - \"node.name=bda\"\n      - \"cluster.name=siem-cluster\"\n      \n      # Network Configuration  \n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery Configuration - GUARANTEED UNIQUE IPs\n                              - \"discovery.seed_hosts=192.168.166.130,192.168.166.132\"\n      - \"cluster.initial_master_nodes=192.168.166.130,192.168.166.132\"\n      \n      # Memory Configuration\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms1g -Xmx1g\"\n      \n      # Security Configuration\n      - \"xpack.security.enabled=true\"\n      \n      # Node Roles\n      - \"node.roles=[\\\"master\\\",\\\"transform\\\",\\\"ml\\\",\\\"ingest\\\",\\\"data_content\\\"]\"\n      \n      # Performance Settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n\n      # HTTP SSL Configuration - THESE PATHS MUST MATCH VOLUME MOUNT\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n\n      # Transport SSL Configuration - THESE PATHS MUST MATCH VOLUME MOUNT\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n\n      # Bootstrap Password\n      - \"ELASTIC_PASSWORD=YourVerySecureElasticsearchPassword123!\"\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.130:9200:9200\"\n      - \"192.168.166.130:9300:9300\"\n\n    volumes:\n      # Data and logs\n      - \"/usr/share/siem/elasticsearch/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration files\n      - \"/usr/share/siem/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # ⚠️ CRITICAL SSL CERTIFICATE MOUNT ⚠️\n      # This is the MOST IMPORTANT volume mount - must be correct!\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    # Enhanced healthcheck with better certificate validation\n    healthcheck:\n      test: |\n        curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! \\\n        https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || \\\n        (echo \"Health check failed - checking certificates:\" && \\\n         ls -la /usr/share/elasticsearch/config/certs/ca/ && \\\n         ls -la /usr/share/elasticsearch/config/certs/bda/ && exit 1)\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    # Run as elasticsearch user\n    user: \"1000:1000\"\n\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 23, column 31\n"
}
2025-09-28 11:07:58,713 p=2525957 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\n# Replace roles/install_elastic/templates/docker-compose.yml.j2 with this:\n\nversion: '3.8'\n\nservices:\n  elasticsearch:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: elasticsearch-bda\n    hostname: bda\n    restart: unless-stopped\n    \n    environment:\n      # Node Configuration\n      - \"node.name=bda\"\n      - \"cluster.name=siem-cluster\"\n      \n      # Network Configuration  \n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery Configuration - GUARANTEED UNIQUE IPs\n                              - \"discovery.seed_hosts=192.168.166.130,192.168.166.132\"\n      - \"cluster.initial_master_nodes=192.168.166.130,192.168.166.132\"\n      \n      # Memory Configuration\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms1g -Xmx1g\"\n      \n      # Security Configuration\n      - \"xpack.security.enabled=true\"\n      \n      # Node Roles\n      - \"node.roles=[\\\"master\\\",\\\"transform\\\",\\\"ml\\\",\\\"ingest\\\",\\\"data_content\\\"]\"\n      \n      # Performance Settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n\n      # HTTP SSL Configuration - THESE PATHS MUST MATCH VOLUME MOUNT\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n\n      # Transport SSL Configuration - THESE PATHS MUST MATCH VOLUME MOUNT\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n\n      # Bootstrap Password\n      - \"ELASTIC_PASSWORD=YourVerySecureElasticsearchPassword123!\"\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.130:9200:9200\"\n      - \"192.168.166.130:9300:9300\"\n\n    volumes:\n      # Data and logs\n      - \"/usr/share/siem/elasticsearch/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration files\n      - \"/usr/share/siem/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # ⚠️ CRITICAL SSL CERTIFICATE MOUNT ⚠️\n      # This is the MOST IMPORTANT volume mount - must be correct!\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    # Enhanced healthcheck with better certificate validation\n    healthcheck:\n      test: |\n        curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! \\\n        https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || \\\n        (echo \"Health check failed - checking certificates:\" && \\\n         ls -la /usr/share/elasticsearch/config/certs/ca/ && \\\n         ls -la /usr/share/elasticsearch/config/certs/bda/ && exit 1)\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    # Run as elasticsearch user\n    user: \"1000:1000\"\n\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 14, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 23, column 31\n"
}
2025-09-28 11:07:58,737 p=2525957 u=root n=ansible | TASK [install_elastic : Remove invalid compose file] ****************************************************************************************************************************************************************************************
2025-09-28 11:07:59,683 p=2525957 u=root n=ansible | changed: [host1]
2025-09-28 11:07:59,686 p=2525957 u=root n=ansible | ok: [bda]
2025-09-28 11:07:59,708 p=2525957 u=root n=ansible | TASK [install_elastic : Fail with detailed error message] ***********************************************************************************************************************************************************************************
2025-09-28 11:07:59,783 p=2525957 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:07:59,902 p=2525957 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:07:59,926 p=2525957 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************************************************************************************************************************************
2025-09-28 11:08:00,183 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:08:01,547 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:08:01,604 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:08:01,642 p=2525957 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************************************************************************************************************************************
2025-09-28 11:08:01,793 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:08:01,825 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:08:01,878 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:08:01,907 p=2525957 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************************************************************************************************************************************
2025-09-28 11:08:02,103 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:08:04,206 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:08:04,252 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:08:04,272 p=2525957 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-28 11:08:04,463 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:08:06,178 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:08:06,342 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:08:06,382 p=2525957 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-28 11:08:06,650 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:07,748 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:09:07,959 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:09:08,006 p=2525957 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************************************************************************************************************************************
2025-09-28 11:09:08,169 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: host2\nDeployment Type: Multi-node\n\n📊 Container Status:\n- Expected containers: 3\n- Running containers: 3\n\n📋 Deployed Nodes:\n- master-host2: https://192.168.166.131:9200\n- warm-host2: https://192.168.166.131:9201\n- sf-host2: https://192.168.166.131:9202\n\n📁 Files Created:\n- Docker Compose: /usr/share/siem/elasticsearch/docker-compose.yml\n- Environment: /usr/share/siem/elasticsearch/.env\n\n🔧 Management Commands:\n# View all containers\ncd /usr/share/siem/elasticsearch && docker-compose ps\n\n# View logs\ncd /usr/share/siem/elasticsearch && docker-compose logs [node-name]\n\n# Restart services\ncd /usr/share/siem/elasticsearch && docker-compose restart\n\n✅ Docker deployment completed!"
}
2025-09-28 11:09:08,249 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: host3\nDeployment Type: Multi-node\n\n📊 Container Status:\n- Expected containers: 3\n- Running containers: 3\n\n📋 Deployed Nodes:\n- master-host3: https://192.168.166.132:9200\n- hot-host3: https://192.168.166.132:9201\n- cold-host3: https://192.168.166.132:9202\n\n📁 Files Created:\n- Docker Compose: /usr/share/siem/elasticsearch/docker-compose.yml\n- Environment: /usr/share/siem/elasticsearch/.env\n\n🔧 Management Commands:\n# View all containers\ncd /usr/share/siem/elasticsearch && docker-compose ps\n\n# View logs\ncd /usr/share/siem/elasticsearch && docker-compose logs [node-name]\n\n# Restart services\ncd /usr/share/siem/elasticsearch && docker-compose restart\n\n✅ Docker deployment completed!"
}
2025-09-28 11:09:08,280 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:08,299 p=2525957 u=root n=ansible | TASK [install_elastic : Stop existing containers if config changed] *************************************************************************************************************************************************************************
2025-09-28 11:09:08,503 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:10,448 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:09:21,774 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:09:21,807 p=2525957 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch cluster] ***************************************************************************************************************************************************************************************
2025-09-28 11:09:21,987 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:25,561 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:09:25,611 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:09:25,631 p=2525957 u=root n=ansible | TASK [install_elastic : Check containers are running] ***************************************************************************************************************************************************************************************
2025-09-28 11:09:25,793 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:27,853 p=2525957 u=root n=ansible | ok: [host2]
2025-09-28 11:09:28,033 p=2525957 u=root n=ansible | ok: [host3]
2025-09-28 11:09:28,050 p=2525957 u=root n=ansible | TASK [install_elastic : Simple connectivity test] *******************************************************************************************************************************************************************************************
2025-09-28 11:09:28,208 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:09:59,029 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9200", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host3", "port_offset": 0, "roles": ["master"]}}
2025-09-28 11:10:00,021 p=2525957 u=root n=ansible | failed: [host2] (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 31, "msg": "Timeout when waiting for 192.168.166.131:9200", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host2", "port_offset": 0, "roles": ["master"]}}
2025-09-28 11:10:30,012 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9201", "node": {"group_membership": ["HOT", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "hot-host3", "port_offset": 1, "roles": ["data_hot", "data_content"]}}
2025-09-28 11:10:30,886 p=2525957 u=root n=ansible | failed: [host2] (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.131:9201", "node": {"group_membership": ["WARM", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "warm-host2", "port_offset": 1, "roles": ["data_warm"]}}
2025-09-28 11:10:55,798 p=2525957 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 11:10:55,801 p=2525957 u=root n=ansible | ...ignoring
2025-09-28 11:11:00,842 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "changed": false, "elapsed": 30, "msg": "Timeout when waiting for 192.168.166.132:9202", "node": {"group_membership": ["COLD", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "2g", "name": "cold-host3", "port_offset": 2, "roles": ["data_cold"]}}
2025-09-28 11:11:00,847 p=2525957 u=root n=ansible | ...ignoring
2025-09-28 11:11:00,898 p=2525957 u=root n=ansible | TASK [install_elastic : Basic Elasticsearch API test (with short timeout)] ******************************************************************************************************************************************************************
2025-09-28 11:11:01,118 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:11:21,515 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host3", "port_offset": 0, "roles": ["master"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9200/"}
2025-09-28 11:11:21,731 p=2525957 u=root n=ansible | failed: [host2] (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["MASTER", "ELASTICSEARCH"], "heap_size": "2g", "name": "master-host2", "port_offset": 0, "roles": ["master"]}, "redirected": false, "status": -1, "url": "https://192.168.166.131:9200/"}
2025-09-28 11:11:41,685 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["HOT", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "hot-host3", "port_offset": 1, "roles": ["data_hot", "data_content"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9201/"}
2025-09-28 11:11:42,920 p=2525957 u=root n=ansible | failed: [host2] (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 1, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["WARM", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "4g", "name": "warm-host2", "port_offset": 1, "roles": ["data_warm"]}, "redirected": false, "status": -1, "url": "https://192.168.166.131:9201/"}
2025-09-28 11:11:44,075 p=2525957 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 11:11:44,077 p=2525957 u=root n=ansible | ...ignoring
2025-09-28 11:12:01,502 p=2525957 u=root n=ansible | failed: [host3] (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'}) => {"ansible_loop_var": "node", "attempts": 3, "changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "node": {"group_membership": ["COLD", "DATA_NODES", "ELASTICSEARCH"], "heap_size": "2g", "name": "cold-host3", "port_offset": 2, "roles": ["data_cold"]}, "redirected": false, "status": -1, "url": "https://192.168.166.132:9202/"}
2025-09-28 11:12:01,505 p=2525957 u=root n=ansible | ...ignoring
2025-09-28 11:12:01,541 p=2525957 u=root n=ansible | TASK [install_elastic : Display health check results] ***************************************************************************************************************************************************************************************
2025-09-28 11:12:01,700 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "Container Status: \n\nQuick Health Check Results:\n- master-host2: FAILED\n- warm-host2: FAILED\n- sf-host2: OK\n"
}
2025-09-28 11:12:01,722 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "Container Status: \n\nQuick Health Check Results:\n- master-host3: FAILED\n- hot-host3: FAILED\n- cold-host3: FAILED\n"
}
2025-09-28 11:12:01,785 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:01,828 p=2525957 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 11:12:01,912 p=2525957 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                    ELASTICSEARCH INSTALLATION COMPLETED      ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Nodes Deployed: 3                                  ║\n║ Timestamp: 2025-09-28T07:35:01Z                   ║\n║ Status: ✅ SUCCESS                                           ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:12:02,004 p=2525957 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                    ELASTICSEARCH INSTALLATION COMPLETED      ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Nodes Deployed: 3                                  ║\n║ Timestamp: 2025-09-28T07:35:01Z                   ║\n║ Status: ✅ SUCCESS                                           ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:12:02,013 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:02,087 p=2525957 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 11:12:02,194 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:02,229 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:02,266 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:02,295 p=2525957 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 11:12:02,396 p=2525957 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 11:12:02,460 p=2525957 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:12:02,465 p=2525957 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:12:02,467 p=2525957 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:12:02,469 p=2525957 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:12:02,472 p=2525957 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 11:12:02,473 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:02,490 p=2525957 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:12:02,507 p=2525957 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:12:02,524 p=2525957 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:12:02,540 p=2525957 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:12:02,543 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:02,555 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 11:12:02,579 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:12:02,602 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:12:02,618 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:12:02,633 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:12:02,636 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:02,666 p=2525957 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:12:02,810 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:02,816 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:02,878 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:02,911 p=2525957 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:12:03,048 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:03,066 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:03,140 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:03,158 p=2525957 u=root n=ansible | TASK [install_kibana : Remove temporary Docker image file] **********************************************************************************************************************************************************************************
2025-09-28 11:12:03,268 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:03,270 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:03,360 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:03,381 p=2525957 u=root n=ansible | TASK [install_kibana : Create directory files] **********************************************************************************************************************************************************************************************
2025-09-28 11:12:03,516 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:03,544 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:12:03,549 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:03,550 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:03,551 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:03,570 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:12:03,571 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:03,585 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:12:03,587 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:03,604 p=2525957 u=root n=ansible | TASK [install_kibana : copy certs files to destination] *************************************************************************************************************************************************************************************
2025-09-28 11:12:03,746 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:03,749 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:03,799 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:03,820 p=2525957 u=root n=ansible | TASK [install_kibana : Copy Ca file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:12:03,938 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:03,967 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:03,984 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:04,005 p=2525957 u=root n=ansible | TASK [install_kibana : Check certificate destination path] **********************************************************************************************************************************************************************************
2025-09-28 11:12:04,087 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:04,134 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:04,152 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:04,181 p=2525957 u=root n=ansible | TASK [install_kibana : Copy fleet server certificate to sf server] **************************************************************************************************************************************************************************
2025-09-28 11:12:04,315 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:04,325 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:04,383 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:04,415 p=2525957 u=root n=ansible | TASK [install_kibana : Copy certificate files] **********************************************************************************************************************************************************************************************
2025-09-28 11:12:04,554 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:04,567 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:04,598 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:04,614 p=2525957 u=root n=ansible | TASK [install_kibana : Copy ca certificate files to }/kibana] *******************************************************************************************************************************************************************************
2025-09-28 11:12:04,703 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:04,748 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:04,789 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:04,820 p=2525957 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:12:05,067 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:05,110 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:05,176 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:05,206 p=2525957 u=root n=ansible | TASK [install_kibana : Process fingerprint string] ******************************************************************************************************************************************************************************************
2025-09-28 11:12:05,314 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:05,362 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:05,362 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:05,396 p=2525957 u=root n=ansible | TASK [install_kibana : Change the permision file] *******************************************************************************************************************************************************************************************
2025-09-28 11:12:05,489 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:05,496 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:05,518 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:05,520 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:05,585 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:12:05,587 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:05,609 p=2525957 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 11:12:05,725 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:05,731 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:05,768 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:05,789 p=2525957 u=root n=ansible | TASK [install_kibana : Wait for Elasticsearch to be ready before creating token] ************************************************************************************************************************************************************
2025-09-28 11:12:05,882 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:05,888 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:05,929 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:05,951 p=2525957 u=root n=ansible | TASK [install_kibana : Create Elasticsearch service token for kibana] ***********************************************************************************************************************************************************************
2025-09-28 11:12:06,043 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,050 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:06,120 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:06,147 p=2525957 u=root n=ansible | TASK [install_kibana : Extract token from output] *******************************************************************************************************************************************************************************************
2025-09-28 11:12:06,257 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,265 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:06,302 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:06,324 p=2525957 u=root n=ansible | TASK [install_kibana : Use existing service token if available] *****************************************************************************************************************************************************************************
2025-09-28 11:12:06,431 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,437 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:06,497 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:06,515 p=2525957 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 11:12:06,593 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,624 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:06,659 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:06,684 p=2525957 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:12:06,803 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,806 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:06,859 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:06,879 p=2525957 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 11:12:06,969 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:06,978 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,012 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,033 p=2525957 u=root n=ansible | TASK [install_kibana : Copy CA file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:12:07,133 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:07,135 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,186 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,210 p=2525957 u=root n=ansible | TASK [install_kibana : Configure kibana from template file] *********************************************************************************************************************************************************************************
2025-09-28 11:12:07,323 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:07,334 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,367 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,407 p=2525957 u=root n=ansible | TASK [install_kibana : ALWAYS Generate Kibana Docker Compose file] **************************************************************************************************************************************************************************
2025-09-28 11:12:07,544 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:07,556 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,591 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,614 p=2525957 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 11:12:07,699 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:07,707 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,745 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,759 p=2525957 u=root n=ansible | TASK [install_kibana : Display compose file status] *****************************************************************************************************************************************************************************************
2025-09-28 11:12:07,853 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:07,860 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:07,905 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:07,928 p=2525957 u=root n=ansible | TASK [install_kibana : Fail if compose file was not created] ********************************************************************************************************************************************************************************
2025-09-28 11:12:08,022 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:08,034 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:08,083 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:08,096 p=2525957 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 11:12:08,194 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:08,225 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:08,253 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:08,279 p=2525957 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 11:12:08,422 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:08,426 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:08,465 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:08,481 p=2525957 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 11:12:08,585 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:08,612 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:08,646 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:08,681 p=2525957 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 11:12:08,818 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:08,821 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:08,928 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:08,980 p=2525957 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 11:12:09,130 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:09,144 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:09,172 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:09,202 p=2525957 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 11:12:09,356 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:09,359 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:09,400 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:09,420 p=2525957 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 11:12:09,522 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:09,551 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:09,635 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:09,680 p=2525957 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 11:12:09,823 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:09,853 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:09,901 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:09,934 p=2525957 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 11:12:10,012 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:10,098 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:10,129 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:10,153 p=2525957 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 11:12:10,310 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:10,336 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:10,453 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:10,483 p=2525957 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 11:12:10,626 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:10,636 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:10,669 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:10,691 p=2525957 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 11:12:10,771 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:10,786 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:10,824 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:10,852 p=2525957 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 11:12:10,950 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:10,968 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:11,016 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:11,038 p=2525957 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 11:12:11,172 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:11,199 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:11,262 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:11,291 p=2525957 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 11:12:11,368 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:11,444 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:11,460 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:11,489 p=2525957 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 11:12:11,644 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:11,647 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:11,800 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:11,822 p=2525957 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 11:12:11,937 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:11,962 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:12,018 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:12,048 p=2525957 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 11:12:12,180 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:12,196 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:12,250 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:12,281 p=2525957 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 11:12:12,415 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:12,451 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:12,498 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:12,534 p=2525957 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 11:12:12,681 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:12,718 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:12,738 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:12,769 p=2525957 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 11:12:12,869 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:12,893 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:12,965 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:13,008 p=2525957 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 11:12:13,136 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:13,144 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:13,202 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:13,227 p=2525957 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 11:12:13,361 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:13,380 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:13,407 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:13,441 p=2525957 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 11:12:13,600 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:13,612 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:13,702 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:13,717 p=2525957 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 11:12:13,825 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:13,834 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:13,871 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:13,894 p=2525957 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 11:12:14,003 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,014 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:14,083 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:14,101 p=2525957 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 11:12:14,243 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,246 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:14,319 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:14,341 p=2525957 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 11:12:14,468 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,470 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:14,507 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:14,532 p=2525957 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 11:12:14,609 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,659 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:14,711 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:14,732 p=2525957 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 11:12:14,822 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,829 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:14,865 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:14,883 p=2525957 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 11:12:14,980 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:14,985 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,018 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,038 p=2525957 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 11:12:15,144 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:15,146 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,186 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,202 p=2525957 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 11:12:15,284 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:12:15,311 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:12:15,333 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:12:15,336 p=2525957 u=root n=ansible | skipping: [host2] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:12:15,339 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:15,360 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:12:15,364 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:12:15,380 p=2525957 u=root n=ansible | skipping: [host3] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:12:15,382 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,399 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:12:15,419 p=2525957 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:12:15,421 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,445 p=2525957 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 11:12:15,535 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:15,543 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,578 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,599 p=2525957 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 11:12:15,717 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:15,737 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,764 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,789 p=2525957 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 11:12:15,862 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:15,941 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:15,960 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:15,985 p=2525957 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 11:12:16,087 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:16,089 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:16,144 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:16,176 p=2525957 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 11:12:16,306 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:16,308 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:16,358 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:16,399 p=2525957 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 11:12:16,499 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:16,510 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:16,552 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:16,566 p=2525957 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 11:12:16,634 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:16,655 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:16,716 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:16,742 p=2525957 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 11:12:16,860 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:16,882 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:16,963 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:17,095 p=2525957 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-28 11:12:18,037 p=2525957 u=root n=ansible | changed: [host2]
2025-09-28 11:12:18,068 p=2525957 u=root n=ansible | changed: [host3]
2025-09-28 11:12:18,085 p=2525957 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 11:12:18,185 p=2525957 u=root n=ansible | skipping: [host2]
2025-09-28 11:12:18,194 p=2525957 u=root n=ansible | skipping: [host3]
2025-09-28 11:12:18,207 p=2525957 u=root n=ansible | skipping: [lb1]
2025-09-28 11:12:18,372 p=2525957 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 11:12:18,372 p=2525957 u=root n=ansible | bda                        : ok=65   changed=11   unreachable=0    failed=1    skipped=15   rescued=1    ignored=0   
2025-09-28 11:12:18,373 p=2525957 u=root n=ansible | host1                      : ok=70   changed=14   unreachable=0    failed=1    skipped=26   rescued=1    ignored=0   
2025-09-28 11:12:18,373 p=2525957 u=root n=ansible | host2                      : ok=75   changed=19   unreachable=0    failed=0    skipped=89   rescued=0    ignored=2   
2025-09-28 11:12:18,373 p=2525957 u=root n=ansible | host3                      : ok=75   changed=19   unreachable=0    failed=0    skipped=89   rescued=0    ignored=2   
2025-09-28 11:12:18,374 p=2525957 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=150  rescued=0    ignored=0   
2025-09-28 11:12:56,172 p=2537344 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 11:12:56,307 p=2537344 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 11:12:59,339 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:12:59,456 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:12:59,458 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:12:59,886 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:00,044 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:00,074 p=2537344 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 11:13:00,151 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:00,244 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:00,303 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:00,307 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:00,348 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:00,557 p=2537344 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 11:13:02,651 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:02,818 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:02,859 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:03,076 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:03,234 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:03,249 p=2537344 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 11:13:03,360 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:03,450 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:03,457 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:03,457 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:03,495 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:03,511 p=2537344 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 11:13:03,538 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:03,552 p=2537344 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 11:13:03,570 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:03,585 p=2537344 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 11:13:03,612 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:03,628 p=2537344 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 11:13:04,847 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:13:04,864 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:04,926 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:04,936 p=2537344 u=root n=ansible | changed: [lb1]
2025-09-28 11:13:04,996 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:05,023 p=2537344 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 11:13:05,049 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:05,066 p=2537344 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 11:13:07,309 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:07,756 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:07,770 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:13:07,772 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:07,907 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:07,945 p=2537344 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 11:13:09,094 p=2537344 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 11:13:09,100 p=2537344 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 11:13:09,156 p=2537344 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 11:13:09,162 p=2537344 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 11:13:09,180 p=2537344 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 11:13:09,766 p=2537344 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 11:13:09,823 p=2537344 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 11:13:09,856 p=2537344 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 11:13:09,897 p=2537344 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 11:13:09,946 p=2537344 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 11:13:10,099 p=2537344 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 11:13:10,194 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:10,239 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:10,291 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:10,293 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:10,323 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:10,350 p=2537344 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 11:13:11,177 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:11,267 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:11,381 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:11,405 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:11,514 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:11,536 p=2537344 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 11:13:12,422 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:12,523 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:12,547 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:12,551 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:12,562 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:12,582 p=2537344 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 11:13:12,692 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:12,734 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:12,776 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:12,784 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:12,819 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:12,839 p=2537344 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 11:13:12,903 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:12,953 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:12,995 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:13,043 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:13,871 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:13,901 p=2537344 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 11:13:13,997 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:14,066 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:14,130 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:14,187 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:14,231 p=2537344 u=root n=ansible | ok: [lb1]
2025-09-28 11:13:14,250 p=2537344 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 11:13:14,313 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:14,421 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:14,473 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:14,476 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:14,515 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:14,612 p=2537344 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************************************************************************************************************************************
2025-09-28 11:13:14,730 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host1                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:43:02Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:13:14,829 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host2                      ║\n║ IP: 192.168.166.131                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:43:02Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:13:14,832 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: host3                      ║\n║ IP: 192.168.166.132                       ║\n║ Nodes: 3                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:43:02Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:13:14,901 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║         MULTI-NODE ELASTICSEARCH INSTALLATION STARTED        ║\n╠══════════════════════════════════════════════════════════════╣\n║ Physical Host: bda                      ║\n║ IP: 192.168.166.130                       ║\n║ Nodes: 1                                      ║\n║ Version: 8.18.2                                    ║\n║ Time: 2025-09-28T07:43:01Z                        ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 11:13:14,908 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:14,941 p=2537344 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 11:13:15,168 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:15,197 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:15,228 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:15,271 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:15,349 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:15,376 p=2537344 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 11:13:15,516 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:15,598 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:15,609 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:15,648 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:15,672 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:15,696 p=2537344 u=root n=ansible | TASK [install_elastic : Set discovery seed hosts] *******************************************************************************************************************************************************************************************
2025-09-28 11:13:15,827 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:15,878 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:15,950 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:15,956 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:16,023 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:16,048 p=2537344 u=root n=ansible | TASK [install_elastic : Set initial master nodes] *******************************************************************************************************************************************************************************************
2025-09-28 11:13:16,351 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:16,402 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:16,404 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:16,428 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:16,454 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:16,469 p=2537344 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 11:13:16,610 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:16,652 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:16,683 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:16,689 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:16,707 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:16,732 p=2537344 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for ALL deployments] *******************************************************************************************************************************************************************
2025-09-28 11:13:16,896 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:16,965 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:16,968 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:16,976 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:17,059 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:17,078 p=2537344 u=root n=ansible | TASK [install_elastic : Ensure elasticsearch_node_roles fallback] ***************************************************************************************************************************************************************************
2025-09-28 11:13:17,241 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:17,281 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:17,283 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:17,300 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:17,329 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:17,348 p=2537344 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 11:13:17,481 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:13:17,550 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:13:17,552 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: single-node\nNodes on this host: 1\nMulti-node deployment: False\nPrimary node roles: ['master', 'transform', 'ml', 'ingest', 'data_content']\n"
}
2025-09-28 11:13:17,602 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Deployment Configuration:\n==========================\nType: multi-node\nNodes on this host: 3\nMulti-node deployment: True\nPrimary node roles: ['master']\n"
}
2025-09-28 11:13:17,614 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:17,626 p=2537344 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 11:13:17,797 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:17,799 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:17,855 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:17,898 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:17,915 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:17,936 p=2537344 u=root n=ansible | TASK [install_elastic : Debug host elasticsearch configuration] *****************************************************************************************************************************************************************************
2025-09-28 11:13:18,110 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host1\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'ML', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:13:18,158 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:18,170 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: bda\nGroups: ['BDA', 'ELASTICSEARCH', 'MASTER', 'ML', 'SF', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 1\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:13:18,177 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host2\nGroups: ['DATA_NODES', 'ELASTICSEARCH', 'MASTER', 'SF', 'WARM', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:13:18,215 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "🔍 Host Configuration Debug:\n===========================\nHost: host3\nGroups: ['COLD', 'DATA_NODES', 'ELASTICSEARCH', 'HOT', 'MASTER', 'physical_hosts']\nHas elasticsearch_nodes defined: True\nNode count: 3\nWill deploy Elasticsearch: True\nService type: elasticsearch\n"
}
2025-09-28 11:13:18,230 p=2537344 u=root n=ansible | TASK [install_elastic : Skip non-Elasticsearch hosts] ***************************************************************************************************************************************************************************************
2025-09-28 11:13:18,340 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:18,472 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:18,476 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:18,486 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:18,564 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:18,590 p=2537344 u=root n=ansible | TASK [install_elastic : Skip load balancer hosts] *******************************************************************************************************************************************************************************************
2025-09-28 11:13:18,723 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:18,840 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:18,843 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:18,861 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:18,889 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:18,910 p=2537344 u=root n=ansible | TASK [install_elastic : Ensure required variables are set] **********************************************************************************************************************************************************************************
2025-09-28 11:13:19,026 p=2537344 u=root n=ansible | ok: [host1] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:13:19,103 p=2537344 u=root n=ansible | ok: [host2] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:13:19,110 p=2537344 u=root n=ansible | ok: [host3] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:13:19,148 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:19,149 p=2537344 u=root n=ansible | ok: [bda] => {
    "changed": false,
    "msg": "All assertions passed"
}
2025-09-28 11:13:19,169 p=2537344 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 11:13:19,423 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 11:13:19,449 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 11:13:19,477 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 11:13:19,509 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 11:13:19,531 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 11:13:19,533 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:20,030 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:20,129 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:20,167 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:20,193 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:20,782 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:13:21,042 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:13:21,118 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:13:21,151 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/data)
2025-09-28 11:13:21,561 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:13:21,882 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:13:21,964 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:13:21,975 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/logs)
2025-09-28 11:13:22,416 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:13:22,710 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:13:22,793 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:13:22,950 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/config)
2025-09-28 11:13:23,219 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:23,649 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:23,655 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:23,954 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:23,985 p=2537344 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 11:13:24,358 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:26,069 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:26,295 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:26,329 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:26,456 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:26,480 p=2537344 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 11:13:26,832 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:27,641 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:27,668 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:27,669 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:27,809 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:27,832 p=2537344 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 11:13:27,998 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:28,040 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:28,092 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:28,093 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:28,107 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:28,140 p=2537344 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 11:13:28,303 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:13:28,365 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:13:28,459 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:13:28,503 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:13:28,514 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:28,544 p=2537344 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 11:13:28,831 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:29,489 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:29,498 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:29,635 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:13:29,745 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:29,771 p=2537344 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 11:13:30,061 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:30,560 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:30,758 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:30,768 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:30,851 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:30,871 p=2537344 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 11:13:31,176 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:31,832 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:31,888 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:31,974 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:13:31,983 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:32,012 p=2537344 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 11:13:32,292 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:32,920 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:33,032 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:33,050 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:33,114 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:33,131 p=2537344 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 11:13:33,427 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:34,091 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:34,189 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:34,225 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:34,354 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:34,424 p=2537344 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 11:13:34,593 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:13:34,632 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:13:34,672 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:13:34,713 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": [
        "vm.max_map_count: 262144",
        "vm.swappiness: 1",
        "fs.file-max: 65536"
    ]
}
2025-09-28 11:13:34,719 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:34,734 p=2537344 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 11:13:35,005 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:35,928 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:35,985 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:36,036 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:36,062 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:36,083 p=2537344 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 11:13:36,368 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:37,047 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:13:37,137 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:13:37,160 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:13:37,225 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:13:37,242 p=2537344 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 11:13:37,557 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:38,545 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:38,633 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:38,758 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:38,793 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:38,814 p=2537344 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 11:13:39,102 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:39,763 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:39,863 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:39,904 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:39,914 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:39,932 p=2537344 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 11:13:40,041 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:13:40,141 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:13:40,144 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:13:40,178 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "Swap status: Swap:             0B          0B          0B"
}
2025-09-28 11:13:40,186 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:40,204 p=2537344 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 11:13:40,535 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 11:13:40,552 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 11:13:40,578 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 11:13:40,580 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:41,232 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:41,255 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:41,416 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:41,560 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 11:13:42,132 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:13:42,178 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:13:42,201 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:13:42,544 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/shared-config)
2025-09-28 11:13:42,973 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:42,999 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:43,158 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:43,383 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-28 11:13:43,405 p=2537344 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 11:13:43,773 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:44,326 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-28 11:13:44,368 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-28 11:13:44,508 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-28 11:13:44,666 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-28 11:13:45,172 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-28 11:13:45,371 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-28 11:13:45,373 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-28 11:13:45,470 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-28 11:13:46,142 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-28 11:13:46,186 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-28 11:13:46,224 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-28 11:13:46,315 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-28 11:13:46,873 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-28 11:13:47,105 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-28 11:13:47,117 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-28 11:13:47,587 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-28 11:13:47,955 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-28 11:13:48,099 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-28 11:13:48,440 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-28 11:13:48,868 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-28 11:13:49,158 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-28 11:13:49,498 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-28 11:13:49,887 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-28 11:13:50,119 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-28 11:13:50,452 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-28 11:13:50,886 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-28 11:13:50,968 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-28 11:13:51,355 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-28 11:13:51,814 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-28 11:13:52,363 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-28 11:13:52,397 p=2537344 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 11:13:52,639 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:54,096 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:13:54,205 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:13:54,241 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:13:54,472 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:13:54,498 p=2537344 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 11:13:54,760 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 11:13:54,784 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 11:13:54,808 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 11:13:54,810 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:55,472 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:13:55,478 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:13:55,606 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:13:55,608 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-28 11:13:56,329 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:13:56,439 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:13:56,565 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:13:56,604 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/fleet-server)
2025-09-28 11:13:57,290 p=2537344 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:13:57,413 p=2537344 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:13:57,475 p=2537344 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:13:57,575 p=2537344 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/kibana)
2025-09-28 11:13:57,595 p=2537344 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 11:13:57,893 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:13:58,673 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:13:58,699 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:13:58,786 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:13:58,818 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:13:59,568 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:13:59,648 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:13:59,838 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:14:00,440 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:14:00,559 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:14:00,714 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:14:00,773 p=2537344 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 11:14:01,880 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:14:01,957 p=2537344 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 11:14:02,059 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:02,098 p=2537344 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 11:14:02,194 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:02,234 p=2537344 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 11:14:02,405 p=2537344 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 11:14:02,590 p=2537344 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 11:14:02,592 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:02,621 p=2537344 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 11:14:02,839 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:14:02,878 p=2537344 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 11:14:03,246 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Nodes for Certificate Generation:\nTotal nodes: 10\n- master-host1 (host1: 192.168.166.130)\n- hot-host1 (host1: 192.168.166.130)\n- ml-host1 (host1: 192.168.166.130)\n- master-host2 (host2: 192.168.166.131)\n- warm-host2 (host2: 192.168.166.131)\n- sf-host2 (host2: 192.168.166.131)\n- master-host3 (host3: 192.168.166.132)\n- hot-host3 (host3: 192.168.166.132)\n- cold-host3 (host3: 192.168.166.132)\n- bda-master (bda: 192.168.166.130)\n"
}
2025-09-28 11:14:03,369 p=2537344 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 11:14:04,362 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:14:05,404 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:14:06,545 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:14:07,507 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 11:14:08,458 p=2537344 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 11:14:09,489 p=2537344 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 11:14:10,429 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 11:14:11,445 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 11:14:12,479 p=2537344 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 11:14:13,422 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 11:14:13,543 p=2537344 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************************************************************************************************************************************
2025-09-28 11:14:14,662 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:14:15,708 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:14:16,765 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:14:17,723 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host2)
2025-09-28 11:14:18,772 p=2537344 u=root n=ansible | ok: [host1] => (item=warm-host2)
2025-09-28 11:14:19,848 p=2537344 u=root n=ansible | ok: [host1] => (item=sf-host2)
2025-09-28 11:14:20,927 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host3)
2025-09-28 11:14:21,973 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host3)
2025-09-28 11:14:23,036 p=2537344 u=root n=ansible | ok: [host1] => (item=cold-host3)
2025-09-28 11:14:24,020 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master)
2025-09-28 11:14:24,090 p=2537344 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************************************************************************************************************************************
2025-09-28 11:14:24,313 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:14:24,425 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:14:24,564 p=2537344 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:14:24,697 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:14:24,825 p=2537344 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:14:24,959 p=2537344 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:14:25,169 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:14:25,297 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:14:25,421 p=2537344 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:14:25,659 p=2537344 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:14:25,662 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:25,729 p=2537344 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************************************************************************************************************************************
2025-09-28 11:14:25,971 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:14:26,112 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:14:26,254 p=2537344 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:14:26,505 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:14:26,731 p=2537344 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:14:26,891 p=2537344 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:14:27,029 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:14:27,231 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:14:27,463 p=2537344 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:14:27,617 p=2537344 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:14:27,620 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:27,679 p=2537344 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************************************************************************************************************************************
2025-09-28 11:14:27,995 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:14:28,146 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:14:28,313 p=2537344 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:14:28,502 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:14:28,692 p=2537344 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:14:28,854 p=2537344 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:14:28,997 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:14:29,191 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:14:29,338 p=2537344 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:14:29,496 p=2537344 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:14:29,498 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:29,554 p=2537344 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************************************************************************************************************************************
2025-09-28 11:14:29,792 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:14:29,940 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:14:30,081 p=2537344 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:14:30,228 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host2) 
2025-09-28 11:14:30,364 p=2537344 u=root n=ansible | skipping: [host1] => (item=warm-host2) 
2025-09-28 11:14:30,519 p=2537344 u=root n=ansible | skipping: [host1] => (item=sf-host2) 
2025-09-28 11:14:30,669 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host3) 
2025-09-28 11:14:30,982 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host3) 
2025-09-28 11:14:31,161 p=2537344 u=root n=ansible | skipping: [host1] => (item=cold-host3) 
2025-09-28 11:14:31,376 p=2537344 u=root n=ansible | skipping: [host1] => (item=bda-master) 
2025-09-28 11:14:31,386 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:14:31,521 p=2537344 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************************************************************************************************************************************
2025-09-28 11:14:32,551 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/master-host1.crt)
2025-09-28 11:14:33,504 p=2537344 u=root n=ansible | changed: [host1] => (item=master-host1/master-host1.key)
2025-09-28 11:14:34,491 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/hot-host1.crt)
2025-09-28 11:14:35,524 p=2537344 u=root n=ansible | changed: [host1] => (item=hot-host1/hot-host1.key)
2025-09-28 11:14:36,454 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/ml-host1.crt)
2025-09-28 11:14:37,500 p=2537344 u=root n=ansible | changed: [host1] => (item=ml-host1/ml-host1.key)
2025-09-28 11:14:38,584 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host2/master-host2.crt)
2025-09-28 11:14:39,649 p=2537344 u=root n=ansible | changed: [host1] => (item=master-host2/master-host2.key)
2025-09-28 11:14:40,608 p=2537344 u=root n=ansible | ok: [host1] => (item=warm-host2/warm-host2.crt)
2025-09-28 11:14:41,667 p=2537344 u=root n=ansible | changed: [host1] => (item=warm-host2/warm-host2.key)
2025-09-28 11:14:42,774 p=2537344 u=root n=ansible | ok: [host1] => (item=sf-host2/sf-host2.crt)
2025-09-28 11:14:43,819 p=2537344 u=root n=ansible | changed: [host1] => (item=sf-host2/sf-host2.key)
2025-09-28 11:14:44,807 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host3/master-host3.crt)
2025-09-28 11:14:45,781 p=2537344 u=root n=ansible | changed: [host1] => (item=master-host3/master-host3.key)
2025-09-28 11:14:46,784 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host3/hot-host3.crt)
2025-09-28 11:14:47,795 p=2537344 u=root n=ansible | changed: [host1] => (item=hot-host3/hot-host3.key)
2025-09-28 11:14:48,779 p=2537344 u=root n=ansible | ok: [host1] => (item=cold-host3/cold-host3.crt)
2025-09-28 11:14:49,874 p=2537344 u=root n=ansible | changed: [host1] => (item=cold-host3/cold-host3.key)
2025-09-28 11:14:50,828 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.crt)
2025-09-28 11:14:51,935 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master/bda-master.key)
2025-09-28 11:14:52,039 p=2537344 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************************************************************************************************************************************
2025-09-28 11:14:53,266 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/csr)
2025-09-28 11:14:54,434 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1/conf)
2025-09-28 11:14:55,539 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/csr)
2025-09-28 11:14:56,653 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1/conf)
2025-09-28 11:14:57,624 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/csr)
2025-09-28 11:14:58,815 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1/conf)
2025-09-28 11:14:59,783 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host2/csr)
2025-09-28 11:15:00,995 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host2/conf)
2025-09-28 11:15:02,126 p=2537344 u=root n=ansible | ok: [host1] => (item=warm-host2/csr)
2025-09-28 11:15:03,112 p=2537344 u=root n=ansible | ok: [host1] => (item=warm-host2/conf)
2025-09-28 11:15:03,915 p=2537344 u=root n=ansible | ok: [host1] => (item=sf-host2/csr)
2025-09-28 11:15:04,887 p=2537344 u=root n=ansible | ok: [host1] => (item=sf-host2/conf)
2025-09-28 11:15:05,834 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host3/csr)
2025-09-28 11:15:06,827 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host3/conf)
2025-09-28 11:15:07,916 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host3/csr)
2025-09-28 11:15:08,749 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host3/conf)
2025-09-28 11:15:09,757 p=2537344 u=root n=ansible | ok: [host1] => (item=cold-host3/csr)
2025-09-28 11:15:10,719 p=2537344 u=root n=ansible | ok: [host1] => (item=cold-host3/conf)
2025-09-28 11:15:11,711 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master/csr)
2025-09-28 11:15:12,792 p=2537344 u=root n=ansible | ok: [host1] => (item=bda-master/conf)
2025-09-28 11:15:12,891 p=2537344 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************************************************************************************************************************************
2025-09-28 11:15:13,113 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:13,352 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:15,103 p=2537344 u=root n=ansible | changed: [host2 -> host1(192.168.166.130)]
2025-09-28 11:15:15,133 p=2537344 u=root n=ansible | changed: [bda -> host1(192.168.166.130)]
2025-09-28 11:15:15,186 p=2537344 u=root n=ansible | changed: [host3 -> host1(192.168.166.130)]
2025-09-28 11:15:15,218 p=2537344 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************************************************************************************************************************************
2025-09-28 11:15:15,431 p=2537344 u=root n=ansible | skipping: [host1] => (item=master-host1) 
2025-09-28 11:15:15,556 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:15,569 p=2537344 u=root n=ansible | skipping: [host1] => (item=hot-host1) 
2025-09-28 11:15:15,697 p=2537344 u=root n=ansible | skipping: [host1] => (item=ml-host1) 
2025-09-28 11:15:15,700 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:16,874 p=2537344 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:15:17,020 p=2537344 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-28 11:15:17,094 p=2537344 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:15:17,868 p=2537344 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:15:17,974 p=2537344 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:15:18,893 p=2537344 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:15:18,976 p=2537344 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:15:18,994 p=2537344 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************************************************************************************************************************************
2025-09-28 11:15:19,329 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:19,961 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:15:20,013 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:15:20,239 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:15:20,258 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:15:20,975 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:15:21,195 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:15:21,279 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:15:22,010 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:15:22,141 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:15:22,204 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:15:22,235 p=2537344 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************************************************************************************************************************************
2025-09-28 11:15:22,565 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:23,264 p=2537344 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-28 11:15:23,363 p=2537344 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-28 11:15:23,409 p=2537344 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-28 11:15:23,474 p=2537344 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-28 11:15:24,146 p=2537344 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-28 11:15:24,263 p=2537344 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-28 11:15:24,337 p=2537344 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-28 11:15:25,052 p=2537344 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-28 11:15:25,345 p=2537344 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-28 11:15:25,380 p=2537344 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-28 11:15:25,403 p=2537344 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************************************************************************************************************************************
2025-09-28 11:15:25,561 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host1\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host1: /usr/share/siem/elasticsearch/certs/master-host1/master-host1.crt\n- hot-host1: /usr/share/siem/elasticsearch/certs/hot-host1/hot-host1.crt\n- ml-host1: /usr/share/siem/elasticsearch/certs/ml-host1/ml-host1.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:15:25,601 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host2\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host2: /usr/share/siem/elasticsearch/certs/master-host2/master-host2.crt\n- warm-host2: /usr/share/siem/elasticsearch/certs/warm-host2/warm-host2.crt\n- sf-host2: /usr/share/siem/elasticsearch/certs/sf-host2/sf-host2.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:15:25,652 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:25,656 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: bda\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- bda-master: /usr/share/siem/elasticsearch/certs/bda-master/bda-master.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:15:25,711 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Multi-Node SSL Certificate Setup Complete!\n===========================================\nPhysical Host: host3\nCA Certificate: /usr/share/siem/elasticsearch/certs/ca/ca.crt\n\nNode Certificates Generated:\n- master-host3: /usr/share/siem/elasticsearch/certs/master-host3/master-host3.crt\n- hot-host3: /usr/share/siem/elasticsearch/certs/hot-host3/hot-host3.crt\n- cold-host3: /usr/share/siem/elasticsearch/certs/cold-host3/cold-host3.crt\n\nCertificate verification: All certificates valid ✅\nReady for multi-node Elasticsearch deployment! 🚀\n"
}
2025-09-28 11:15:25,742 p=2537344 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************************************************************************************************************************************
2025-09-28 11:15:26,054 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:26,063 p=2537344 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 11:15:26,065 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:27,608 p=2537344 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 11:15:27,783 p=2537344 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:15:27,897 p=2537344 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:15:29,294 p=2537344 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 11:15:29,826 p=2537344 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:15:30,110 p=2537344 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:15:31,062 p=2537344 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 11:15:31,694 p=2537344 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:15:31,912 p=2537344 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:15:31,936 p=2537344 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 11:15:32,209 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:32,227 p=2537344 u=root n=ansible | skipping: [bda] => (item=bda-master) 
2025-09-28 11:15:32,229 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:33,646 p=2537344 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 11:15:33,713 p=2537344 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 11:15:33,960 p=2537344 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 11:15:35,248 p=2537344 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 11:15:35,393 p=2537344 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 11:15:35,588 p=2537344 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 11:15:37,259 p=2537344 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 11:15:37,370 p=2537344 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 11:15:37,484 p=2537344 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 11:15:37,505 p=2537344 u=root n=ansible | TASK [install_elastic : Generate single-node configuration] *********************************************************************************************************************************************************************************
2025-09-28 11:15:37,683 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:37,731 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:37,735 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:37,779 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:39,731 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:15:39,764 p=2537344 u=root n=ansible | TASK [install_elastic : Generate single-node JVM options] ***********************************************************************************************************************************************************************************
2025-09-28 11:15:39,907 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:39,964 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:39,966 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:40,034 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:41,701 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:41,728 p=2537344 u=root n=ansible | TASK [install_elastic : Set node_configs for consistency] ***********************************************************************************************************************************************************************************
2025-09-28 11:15:41,884 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:41,959 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:42,031 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:42,102 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:42,138 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:42,177 p=2537344 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for ALL hosts with Elasticsearch nodes] ************************************************************************************************************************************************
2025-09-28 11:15:42,518 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:43,972 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:15:43,991 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:15:43,997 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:15:44,225 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:15:44,248 p=2537344 u=root n=ansible | TASK [install_elastic : Verify docker-compose file exists] **********************************************************************************************************************************************************************************
2025-09-28 11:15:44,513 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:45,289 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:45,312 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:45,363 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:45,380 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:45,399 p=2537344 u=root n=ansible | TASK [install_elastic : Display docker-compose file status] *********************************************************************************************************************************************************************************
2025-09-28 11:15:45,513 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "✅ Docker-compose file status on host1:\n- File exists: True\n- File size: 2814 bytes\n- Generated: True\n"
}
2025-09-28 11:15:45,595 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "✅ Docker-compose file status on host2:\n- File exists: True\n- File size: 8204 bytes\n- Generated: True\n"
}
2025-09-28 11:15:45,613 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "✅ Docker-compose file status on host3:\n- File exists: True\n- File size: 8225 bytes\n- Generated: True\n"
}
2025-09-28 11:15:45,631 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Docker-compose file status on bda:\n- File exists: True\n- File size: 2814 bytes\n- Generated: True\n"
}
2025-09-28 11:15:45,645 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:45,662 p=2537344 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-28 11:15:45,813 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host1\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:15:45,879 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host2\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:15:45,882 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: host3\nDeployment Type: Multi-node\nNodes: 3\n"
}
2025-09-28 11:15:45,895 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Image Deployment\n======================================\nHost: bda\nDeployment Type: Single-node\nNodes: 1\n"
}
2025-09-28 11:15:45,939 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:45,968 p=2537344 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************************************************************************************************************************************
2025-09-28 11:15:46,525 p=2537344 u=root n=ansible | ok: [host1 -> localhost]
2025-09-28 11:15:46,551 p=2537344 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************************************************************************************************************************************
2025-09-28 11:15:46,653 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "Docker image file status:\n- Expected path: /root/roles/install_elastic/files/elasticsearch-8.18.2-docker.tar.gz\n- File exists: False\n- File size: N/A bytes\n"
}
2025-09-28 11:15:46,676 p=2537344 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************************************************************************************************************************************
2025-09-28 11:15:46,935 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:47,549 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:47,673 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:47,716 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:47,767 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:47,784 p=2537344 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************************************************************************************************************************************
2025-09-28 11:15:48,016 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:48,835 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:48,853 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:48,861 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:48,868 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:48,884 p=2537344 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:15:49,052 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:49,190 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:49,194 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:49,230 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:49,296 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:49,330 p=2537344 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 11:15:49,550 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:49,590 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:49,603 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:49,633 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:49,643 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:49,686 p=2537344 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************************************************************************************************************************************
2025-09-28 11:15:49,903 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:50,040 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:50,043 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:50,043 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:50,088 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:50,101 p=2537344 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************************************************************************************************************************************
2025-09-28 11:15:50,360 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:51,135 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:51,166 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:51,370 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:51,472 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:51,498 p=2537344 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************************************************************************************************************************************
2025-09-28 11:15:51,670 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:15:51,793 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch                 8.18.2    8cb612c5d433   6 days ago      1.36GB"
}
2025-09-28 11:15:51,806 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:15:51,842 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "Found local Elasticsearch image: docker.apk-group.net/elasticsearch   8.18.2    8cb612c5d433   6 days ago   1.36GB"
}
2025-09-28 11:15:51,887 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:51,912 p=2537344 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 11:15:52,134 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:52,218 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:52,222 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:52,273 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:52,298 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:52,338 p=2537344 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************************************************************************************************************************************
2025-09-28 11:15:52,490 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:52,559 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:52,632 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:52,685 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:52,744 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:52,775 p=2537344 u=root n=ansible | TASK [install_elastic : Remove any existing docker-compose file to force regeneration] ******************************************************************************************************************************************************
2025-09-28 11:15:53,110 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:53,877 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:15:53,899 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:53,980 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:15:54,002 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:15:54,033 p=2537344 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************************************************************************************************************************************
2025-09-28 11:15:54,316 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:54,342 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:15:55,847 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:15:56,033 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:15:56,149 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:15:56,184 p=2537344 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************************************************************************************************************************************
2025-09-28 11:15:56,322 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:15:56,408 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:15:56,447 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:15:56,454 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:58,515 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:15:58,535 p=2537344 u=root n=ansible | TASK [install_elastic : Check if docker-compose file was created] ***************************************************************************************************************************************************************************
2025-09-28 11:15:58,939 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:15:59,521 p=2537344 u=root n=ansible | ok: [host1]
2025-09-28 11:15:59,708 p=2537344 u=root n=ansible | ok: [host3]
2025-09-28 11:15:59,733 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:15:59,838 p=2537344 u=root n=ansible | ok: [host2]
2025-09-28 11:15:59,863 p=2537344 u=root n=ansible | TASK [install_elastic : Fail if compose file was not created] *******************************************************************************************************************************************************************************
2025-09-28 11:16:00,076 p=2537344 u=root n=ansible | skipping: [host1]
2025-09-28 11:16:00,112 p=2537344 u=root n=ansible | skipping: [host2]
2025-09-28 11:16:00,115 p=2537344 u=root n=ansible | skipping: [host3]
2025-09-28 11:16:00,162 p=2537344 u=root n=ansible | skipping: [bda]
2025-09-28 11:16:00,172 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:00,210 p=2537344 u=root n=ansible | TASK [install_elastic : Validate YAML syntax using docker-compose] **************************************************************************************************************************************************************************
2025-09-28 11:16:00,525 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:02,455 p=2537344 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.317001", "end": "2025-09-28 11:16:02.320943", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:16:01.003942", "stderr": "yaml.parser.ParserError: while parsing a block mapping\n  in \"./docker-compose.yml\", line 11, column 7\nexpected <block end>, but found '<scalar>'\n  in \"./docker-compose.yml\", line 20, column 43", "stderr_lines": ["yaml.parser.ParserError: while parsing a block mapping", "  in \"./docker-compose.yml\", line 11, column 7", "expected <block end>, but found '<scalar>'", "  in \"./docker-compose.yml\", line 20, column 43"], "stdout": "", "stdout_lines": []}
2025-09-28 11:16:02,668 p=2537344 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.392826", "end": "2025-09-28 11:16:02.552324", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:16:01.159498", "stderr": "yaml.scanner.ScannerError: mapping values are not allowed here\n  in \"./docker-compose.yml\", line 3, column 24", "stderr_lines": ["yaml.scanner.ScannerError: mapping values are not allowed here", "  in \"./docker-compose.yml\", line 3, column 24"], "stdout": "", "stdout_lines": []}
2025-09-28 11:16:02,787 p=2537344 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.482682", "end": "2025-09-28 11:16:02.667452", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:16:01.184770", "stderr": "yaml.parser.ParserError: while parsing a block mapping\n  in \"./docker-compose.yml\", line 11, column 7\nexpected <block end>, but found '<scalar>'\n  in \"./docker-compose.yml\", line 20, column 43", "stderr_lines": ["yaml.parser.ParserError: while parsing a block mapping", "  in \"./docker-compose.yml\", line 11, column 7", "expected <block end>, but found '<scalar>'", "  in \"./docker-compose.yml\", line 20, column 43"], "stdout": "", "stdout_lines": []}
2025-09-28 11:16:02,927 p=2537344 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose config --quiet\n", "delta": "0:00:01.601070", "end": "2025-09-28 11:16:02.804098", "failed_when_result": true, "msg": "non-zero return code", "rc": 1, "start": "2025-09-28 11:16:01.203028", "stderr": "yaml.scanner.ScannerError: mapping values are not allowed here\n  in \"./docker-compose.yml\", line 3, column 24", "stderr_lines": ["yaml.scanner.ScannerError: mapping values are not allowed here", "  in \"./docker-compose.yml\", line 3, column 24"], "stdout": "", "stdout_lines": []}
2025-09-28 11:16:03,041 p=2537344 u=root n=ansible | TASK [install_elastic : Display validation success] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:03,155 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:03,181 p=2537344 u=root n=ansible | TASK [install_elastic : Show docker-compose file content for debugging] *********************************************************************************************************************************************************************
2025-09-28 11:16:04,075 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:16:04,097 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:16:04,170 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:16:04,241 p=2537344 u=root n=ansible | changed: [bda]
2025-09-28 11:16:04,257 p=2537344 u=root n=ansible | TASK [install_elastic : Display problematic compose file] ***********************************************************************************************************************************************************************************
2025-09-28 11:16:04,417 p=2537344 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\nversion: '3.8'\n\nservices:\n  elasticsearch:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: elasticsearch-bda\n    hostname: elasticsearch-bda\n    restart: unless-stopped\n    \n    environment:\n      node.name: \"bda\"\n      cluster.name: \"siem-cluster\"\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms1g -Xmx1g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"master\",\"transform\",\"ml\",\"ingest\",\"data_content\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.130:9200:9200\"\n      - \"192.168.166.130:9300:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.parser.ParserError: while parsing a block mapping\n  in \"./docker-compose.yml\", line 11, column 7\nexpected <block end>, but found '<scalar>'\n  in \"./docker-compose.yml\", line 20, column 43\n"
}
2025-09-28 11:16:04,419 p=2537344 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\nversion: '3.8'\n\nservices:  master-host2:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: master-host2\n    hostname: master-host2\n    restart: unless-stopped\n    \n    environment:\n      node.name: master-host2\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms2g -Xmx2g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"master\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/master-host2/master-host2.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/master-host2/master-host2.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/master-host2/master-host2.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/master-host2/master-host2.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.131:9200:9200\"\n      - \"192.168.166.131:9300:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/master-host2/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/master-host2/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/master-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"4G\"\n        reservations:\n          memory: \"2g\"  warm-host2:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: warm-host2\n    hostname: warm-host2\n    restart: unless-stopped\n    \n    environment:\n      node.name: warm-host2\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms4g -Xmx4g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"data_warm\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/warm-host2/warm-host2.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/warm-host2/warm-host2.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/warm-host2/warm-host2.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/warm-host2/warm-host2.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.131:9201:9200\"\n      - \"192.168.166.131:9301:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/warm-host2/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/warm-host2/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"8G\"\n        reservations:\n          memory: \"4g\"  sf-host2:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: sf-host2\n    hostname: sf-host2\n    restart: unless-stopped\n    \n    environment:\n      node.name: sf-host2\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms3g -Xmx3g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"ingest\",\"transform\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/sf-host2/sf-host2.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/sf-host2/sf-host2.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/sf-host2/sf-host2.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/sf-host2/sf-host2.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.131:9202:9200\"\n      - \"192.168.166.131:9302:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/sf-host2/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/sf-host2/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/sf-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/sf-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"6G\"\n        reservations:\n          memory: \"3g\"\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.scanner.ScannerError: mapping values are not allowed here\n  in \"./docker-compose.yml\", line 3, column 24\n"
}
2025-09-28 11:16:04,470 p=2537344 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\nversion: '3.8'\n\nservices:\n  elasticsearch:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: elasticsearch-bda\n    hostname: elasticsearch-bda\n    restart: unless-stopped\n    \n    environment:\n      node.name: \"bda\"\n      cluster.name: \"siem-cluster\"\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms1g -Xmx1g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"master\",\"transform\",\"ml\",\"ingest\",\"data_content\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/bda/bda.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/bda/bda.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.130:9200:9200\"\n      - \"192.168.166.130:9300:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.parser.ParserError: while parsing a block mapping\n  in \"./docker-compose.yml\", line 11, column 7\nexpected <block end>, but found '<scalar>'\n  in \"./docker-compose.yml\", line 20, column 43\n"
}
2025-09-28 11:16:04,505 p=2537344 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Docker-compose file validation failed!\n\nFile location: /usr/share/siem/elasticsearch/docker-compose.yml\n\nContent:\nversion: '3.8'\n\nservices:  master-host3:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: master-host3\n    hostname: master-host3\n    restart: unless-stopped\n    \n    environment:\n      node.name: master-host3\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms2g -Xmx2g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"master\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/master-host3/master-host3.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/master-host3/master-host3.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/master-host3/master-host3.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/master-host3/master-host3.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.132:9200:9200\"\n      - \"192.168.166.132:9300:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/master-host3/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/master-host3/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/master-host3/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/master-host3/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"4G\"\n        reservations:\n          memory: \"2g\"  hot-host3:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: hot-host3\n    hostname: hot-host3\n    restart: unless-stopped\n    \n    environment:\n      node.name: hot-host3\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms4g -Xmx4g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"data_hot\",\"data_content\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/hot-host3/hot-host3.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/hot-host3/hot-host3.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/hot-host3/hot-host3.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/hot-host3/hot-host3.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.132:9201:9200\"\n      - \"192.168.166.132:9301:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/hot-host3/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/hot-host3/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/hot-host3/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/hot-host3/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"8G\"\n        reservations:\n          memory: \"4g\"  cold-host3:\n    image: docker.apk-group.net/elasticsearch:8.18.2\n    container_name: cold-host3\n    hostname: cold-host3\n    restart: unless-stopped\n    \n    environment:\n      node.name: cold-host3\n      cluster.name: siem-cluster\n      network.host: \"0.0.0.0\"\n      http.port: \"9200\"\n      transport.port: \"9300\"\n      discovery.seed_hosts: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      cluster.initial_master_nodes: \"192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300\"\n      bootstrap.memory_lock: \"true\"\n      ES_JAVA_OPTS: \"-Xms2g -Xmx2g\"\n      xpack.security.enabled: \"true\"      node.roles: \"[\"data_cold\"]\"\n      cluster.max_shards_per_node: \"2000\"\n      action.auto_create_index: \"true\"      xpack.security.http.ssl.enabled: \"true\"\n      xpack.security.http.ssl.key: \"/usr/share/elasticsearch/config/certs/cold-host3/cold-host3.key\"\n      xpack.security.http.ssl.certificate: \"/usr/share/elasticsearch/config/certs/cold-host3/cold-host3.crt\"\n      xpack.security.http.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      xpack.security.transport.ssl.enabled: \"true\"\n      xpack.security.transport.ssl.key: \"/usr/share/elasticsearch/config/certs/cold-host3/cold-host3.key\"\n      xpack.security.transport.ssl.certificate: \"/usr/share/elasticsearch/config/certs/cold-host3/cold-host3.crt\"\n      xpack.security.transport.ssl.certificate_authorities: \"/usr/share/elasticsearch/config/certs/ca/ca.crt\"      ELASTIC_PASSWORD: \"YourVerySecureElasticsearchPassword123!\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    ports:\n      - \"192.168.166.132:9202:9200\"\n      - \"192.168.166.132:9302:9300\"\n\n    volumes:\n      - \"/usr/share/siem/elasticsearch/cold-host3/data:/usr/share/elasticsearch/data:Z\"\n      - \"/usr/share/siem/elasticsearch/cold-host3/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"/usr/share/siem/elasticsearch/cold-host3/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/cold-host3/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      - \"/usr/share/siem/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    healthcheck:      test: [\"CMD-SHELL\", \"curl -f -k -u elastic:YourVerySecureElasticsearchPassword123! https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1\"]      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:          memory: \"4G\"\n        reservations:\n          memory: \"2g\"\nnetworks:\n  elastic:\n    external: true\n\nValidation error:\nyaml.scanner.ScannerError: mapping values are not allowed here\n  in \"./docker-compose.yml\", line 3, column 24\n"
}
2025-09-28 11:16:04,521 p=2537344 u=root n=ansible | TASK [install_elastic : Remove invalid compose file] ****************************************************************************************************************************************************************************************
2025-09-28 11:16:05,500 p=2537344 u=root n=ansible | changed: [host1]
2025-09-28 11:16:05,542 p=2537344 u=root n=ansible | changed: [host2]
2025-09-28 11:16:05,569 p=2537344 u=root n=ansible | changed: [host3]
2025-09-28 11:16:05,596 p=2537344 u=root n=ansible | ok: [bda]
2025-09-28 11:16:05,612 p=2537344 u=root n=ansible | TASK [install_elastic : Fail with detailed error message] ***********************************************************************************************************************************************************************************
2025-09-28 11:16:05,738 p=2537344 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:16:05,832 p=2537344 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:16:05,880 p=2537344 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:16:05,917 p=2537344 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Docker-compose file validation failed. The file has been removed.\nPlease check the template syntax and variable values.\n\nCommon issues:\n1. Missing or invalid variables in inventory\n2. Special characters in node names or values\n3. Jinja2 template syntax errors\n\nRe-run the playbook to regenerate the file.\n"}
2025-09-28 11:16:05,931 p=2537344 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************************************************************************************************************************************
2025-09-28 11:16:05,996 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,012 p=2537344 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************************************************************************************************************************************
2025-09-28 11:16:06,089 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,106 p=2537344 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************************************************************************************************************************************
2025-09-28 11:16:06,188 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,211 p=2537344 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-28 11:16:06,298 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,321 p=2537344 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-28 11:16:06,424 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,446 p=2537344 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************************************************************************************************************************************
2025-09-28 11:16:06,524 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,545 p=2537344 u=root n=ansible | TASK [install_elastic : Stop existing containers if config changed] *************************************************************************************************************************************************************************
2025-09-28 11:16:06,609 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,630 p=2537344 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch cluster] ***************************************************************************************************************************************************************************************
2025-09-28 11:16:06,696 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,713 p=2537344 u=root n=ansible | TASK [install_elastic : Check containers are running] ***************************************************************************************************************************************************************************************
2025-09-28 11:16:06,784 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,803 p=2537344 u=root n=ansible | TASK [install_elastic : Simple connectivity test] *******************************************************************************************************************************************************************************************
2025-09-28 11:16:06,868 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,887 p=2537344 u=root n=ansible | TASK [install_elastic : Basic Elasticsearch API test (with short timeout)] ******************************************************************************************************************************************************************
2025-09-28 11:16:06,964 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:06,981 p=2537344 u=root n=ansible | TASK [install_elastic : Display health check results] ***************************************************************************************************************************************************************************************
2025-09-28 11:16:07,068 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,087 p=2537344 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:07,157 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,193 p=2537344 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 11:16:07,276 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,300 p=2537344 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 11:16:07,398 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 11:16:07,419 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 11:16:07,447 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 11:16:07,473 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 11:16:07,489 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 11:16:07,493 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,531 p=2537344 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:16:07,609 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,628 p=2537344 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 11:16:07,699 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,715 p=2537344 u=root n=ansible | TASK [install_kibana : Remove temporary Docker image file] **********************************************************************************************************************************************************************************
2025-09-28 11:16:07,801 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,824 p=2537344 u=root n=ansible | TASK [install_kibana : Create directory files] **********************************************************************************************************************************************************************************************
2025-09-28 11:16:07,909 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:16:07,922 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs/ca) 
2025-09-28 11:16:07,924 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:07,943 p=2537344 u=root n=ansible | TASK [install_kibana : copy certs files to destination] *************************************************************************************************************************************************************************************
2025-09-28 11:16:08,002 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,019 p=2537344 u=root n=ansible | TASK [install_kibana : Copy Ca file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:08,090 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,112 p=2537344 u=root n=ansible | TASK [install_kibana : Check certificate destination path] **********************************************************************************************************************************************************************************
2025-09-28 11:16:08,206 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,223 p=2537344 u=root n=ansible | TASK [install_kibana : Copy fleet server certificate to sf server] **************************************************************************************************************************************************************************
2025-09-28 11:16:08,321 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,423 p=2537344 u=root n=ansible | TASK [install_kibana : Copy certificate files] **********************************************************************************************************************************************************************************************
2025-09-28 11:16:08,532 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,559 p=2537344 u=root n=ansible | TASK [install_kibana : Copy ca certificate files to }/kibana] *******************************************************************************************************************************************************************************
2025-09-28 11:16:08,664 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,686 p=2537344 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:16:08,749 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,765 p=2537344 u=root n=ansible | TASK [install_kibana : Process fingerprint string] ******************************************************************************************************************************************************************************************
2025-09-28 11:16:08,857 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:08,882 p=2537344 u=root n=ansible | TASK [install_kibana : Change the permision file] *******************************************************************************************************************************************************************************************
2025-09-28 11:16:08,973 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/lib/kibana/certs) 
2025-09-28 11:16:08,976 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,003 p=2537344 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 11:16:09,078 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,097 p=2537344 u=root n=ansible | TASK [install_kibana : Wait for Elasticsearch to be ready before creating token] ************************************************************************************************************************************************************
2025-09-28 11:16:09,214 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,248 p=2537344 u=root n=ansible | TASK [install_kibana : Create Elasticsearch service token for kibana] ***********************************************************************************************************************************************************************
2025-09-28 11:16:09,346 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,382 p=2537344 u=root n=ansible | TASK [install_kibana : Extract token from output] *******************************************************************************************************************************************************************************************
2025-09-28 11:16:09,451 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,466 p=2537344 u=root n=ansible | TASK [install_kibana : Use existing service token if available] *****************************************************************************************************************************************************************************
2025-09-28 11:16:09,513 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,532 p=2537344 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 11:16:09,613 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,633 p=2537344 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 11:16:09,727 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,748 p=2537344 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:09,828 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,848 p=2537344 u=root n=ansible | TASK [install_kibana : Copy CA file to destination] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:09,939 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:09,960 p=2537344 u=root n=ansible | TASK [install_kibana : Configure kibana from template file] *********************************************************************************************************************************************************************************
2025-09-28 11:16:10,023 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,042 p=2537344 u=root n=ansible | TASK [install_kibana : ALWAYS Generate Kibana Docker Compose file] **************************************************************************************************************************************************************************
2025-09-28 11:16:10,101 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,119 p=2537344 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 11:16:10,181 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,201 p=2537344 u=root n=ansible | TASK [install_kibana : Display compose file status] *****************************************************************************************************************************************************************************************
2025-09-28 11:16:10,264 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,288 p=2537344 u=root n=ansible | TASK [install_kibana : Fail if compose file was not created] ********************************************************************************************************************************************************************************
2025-09-28 11:16:10,359 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,375 p=2537344 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 11:16:10,491 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,508 p=2537344 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 11:16:10,586 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,609 p=2537344 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 11:16:10,689 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,709 p=2537344 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 11:16:10,774 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,792 p=2537344 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 11:16:10,860 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,891 p=2537344 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 11:16:10,971 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:10,995 p=2537344 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 11:16:11,067 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,083 p=2537344 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 11:16:11,137 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,156 p=2537344 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 11:16:11,218 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,241 p=2537344 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 11:16:11,300 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,324 p=2537344 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 11:16:11,393 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,417 p=2537344 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 11:16:11,488 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,516 p=2537344 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 11:16:11,605 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,629 p=2537344 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 11:16:11,681 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,706 p=2537344 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 11:16:11,773 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,794 p=2537344 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 11:16:11,858 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:11,875 p=2537344 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 11:16:11,994 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,019 p=2537344 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 11:16:12,093 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,110 p=2537344 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 11:16:12,174 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,202 p=2537344 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 11:16:12,264 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,287 p=2537344 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 11:16:12,351 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,374 p=2537344 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 11:16:12,488 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,513 p=2537344 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 11:16:12,637 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,684 p=2537344 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 11:16:12,750 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,776 p=2537344 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 11:16:12,842 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,864 p=2537344 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 11:16:12,926 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:12,946 p=2537344 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 11:16:13,007 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,028 p=2537344 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 11:16:13,098 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,120 p=2537344 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 11:16:13,193 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,222 p=2537344 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 11:16:13,287 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,308 p=2537344 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 11:16:13,418 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,436 p=2537344 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 11:16:13,542 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,561 p=2537344 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 11:16:13,640 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 11:16:13,661 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 11:16:13,680 p=2537344 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 11:16:13,681 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,701 p=2537344 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 11:16:13,773 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,793 p=2537344 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 11:16:13,860 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,880 p=2537344 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 11:16:13,943 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:13,967 p=2537344 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 11:16:14,032 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,050 p=2537344 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 11:16:14,126 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,148 p=2537344 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 11:16:14,208 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,227 p=2537344 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 11:16:14,286 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,304 p=2537344 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 11:16:14,368 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,514 p=2537344 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 11:16:14,555 p=2537344 u=root n=ansible | skipping: [lb1]
2025-09-28 11:16:14,590 p=2537344 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 11:16:14,590 p=2537344 u=root n=ansible | bda                        : ok=65   changed=11   unreachable=0    failed=1    skipped=15   rescued=1    ignored=0   
2025-09-28 11:16:14,590 p=2537344 u=root n=ansible | host1                      : ok=70   changed=14   unreachable=0    failed=1    skipped=26   rescued=1    ignored=0   
2025-09-28 11:16:14,590 p=2537344 u=root n=ansible | host2                      : ok=63   changed=16   unreachable=0    failed=1    skipped=17   rescued=1    ignored=0   
2025-09-28 11:16:14,591 p=2537344 u=root n=ansible | host3                      : ok=63   changed=16   unreachable=0    failed=1    skipped=17   rescued=1    ignored=0   
2025-09-28 11:16:14,591 p=2537344 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=150  rescued=0    ignored=0   
2025-09-28 12:50:19,352 p=2551036 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************
2025-09-28 12:50:19,521 p=2551036 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 12:50:23,009 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:23,068 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:23,147 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:23,295 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:23,302 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:23,323 p=2551036 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 12:50:23,412 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:23,485 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:23,518 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:23,519 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:23,574 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:23,792 p=2551036 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 12:50:26,138 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:26,145 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:26,374 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:26,380 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:26,394 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:26,417 p=2551036 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 12:50:26,536 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:26,614 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:26,616 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:26,636 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:26,685 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:26,720 p=2551036 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 12:50:26,774 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:26,807 p=2551036 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 12:50:26,844 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:26,870 p=2551036 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 12:50:26,913 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:26,927 p=2551036 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 12:50:27,971 p=2551036 u=root n=ansible | changed: [lb1]
2025-09-28 12:50:28,027 p=2551036 u=root n=ansible | changed: [host3]
2025-09-28 12:50:28,143 p=2551036 u=root n=ansible | changed: [bda]
2025-09-28 12:50:28,170 p=2551036 u=root n=ansible | changed: [host1]
2025-09-28 12:50:28,182 p=2551036 u=root n=ansible | changed: [host2]
2025-09-28 12:50:28,215 p=2551036 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 12:50:28,246 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:28,273 p=2551036 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 12:50:30,889 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:31,213 p=2551036 u=root n=ansible | changed: [bda]
2025-09-28 12:50:31,248 p=2551036 u=root n=ansible | changed: [host3]
2025-09-28 12:50:31,302 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:31,347 p=2551036 u=root n=ansible | changed: [host2]
2025-09-28 12:50:31,393 p=2551036 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 12:50:32,596 p=2551036 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 12:50:32,702 p=2551036 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 12:50:32,707 p=2551036 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 12:50:32,727 p=2551036 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 12:50:32,733 p=2551036 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 12:50:33,405 p=2551036 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 12:50:33,459 p=2551036 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 12:50:33,557 p=2551036 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 12:50:33,649 p=2551036 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 12:50:33,706 p=2551036 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 12:50:33,859 p=2551036 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 12:50:34,001 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:34,056 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:34,120 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:34,125 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:34,163 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:34,197 p=2551036 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 12:50:35,053 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:35,181 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:35,268 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:35,271 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:35,327 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:35,353 p=2551036 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 12:50:36,265 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:36,324 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:36,406 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:36,484 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:36,484 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:36,498 p=2551036 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 12:50:36,586 p=2551036 u=root n=ansible | ok: [host1]
2025-09-28 12:50:36,625 p=2551036 u=root n=ansible | ok: [host2]
2025-09-28 12:50:36,668 p=2551036 u=root n=ansible | ok: [host3]
2025-09-28 12:50:36,688 p=2551036 u=root n=ansible | ok: [bda]
2025-09-28 12:50:36,750 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:36,775 p=2551036 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 12:50:36,847 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:36,904 p=2551036 u=root n=ansible | skipping: [host2]
2025-09-28 12:50:36,958 p=2551036 u=root n=ansible | skipping: [host3]
2025-09-28 12:50:37,016 p=2551036 u=root n=ansible | skipping: [bda]
2025-09-28 12:50:37,893 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:37,937 p=2551036 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 12:50:38,023 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:38,086 p=2551036 u=root n=ansible | skipping: [host2]
2025-09-28 12:50:38,140 p=2551036 u=root n=ansible | skipping: [host3]
2025-09-28 12:50:38,203 p=2551036 u=root n=ansible | skipping: [bda]
2025-09-28 12:50:38,258 p=2551036 u=root n=ansible | ok: [lb1]
2025-09-28 12:50:38,288 p=2551036 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 12:50:38,381 p=2551036 u=root n=ansible | skipping: [host1]
2025-09-28 12:50:38,443 p=2551036 u=root n=ansible | skipping: [host2]
2025-09-28 12:50:38,543 p=2551036 u=root n=ansible | skipping: [host3]
2025-09-28 12:50:38,546 p=2551036 u=root n=ansible | skipping: [bda]
2025-09-28 12:50:38,580 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:38,692 p=2551036 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************
2025-09-28 12:50:38,827 p=2551036 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 12:50:38,883 p=2551036 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 12:50:38,928 p=2551036 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 12:50:38,942 p=2551036 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 12:50:39,003 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,055 p=2551036 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************
2025-09-28 12:50:39,149 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,280 p=2551036 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************
2025-09-28 12:50:39,345 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,476 p=2551036 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 12:50:39,528 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,617 p=2551036 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 12:50:39,658 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,710 p=2551036 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************
2025-09-28 12:50:39,814 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:39,923 p=2551036 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 12:50:40,055 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:40,266 p=2551036 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************
2025-09-28 12:50:40,360 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:40,484 p=2551036 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************
2025-09-28 12:50:40,561 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:40,609 p=2551036 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 12:50:40,670 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:40,754 p=2551036 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************
2025-09-28 12:50:40,857 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:40,957 p=2551036 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************
2025-09-28 12:50:41,045 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:41,092 p=2551036 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************
2025-09-28 12:50:41,191 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:41,246 p=2551036 u=root n=ansible | TASK [install_elastic : Update package cache] ***********************************************************************
2025-09-28 12:50:41,320 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:41,425 p=2551036 u=root n=ansible | TASK [install_elastic : Install required packages] ******************************************************************
2025-09-28 12:50:41,554 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:41,668 p=2551036 u=root n=ansible | TASK [install_elastic : Start and enable Docker service] ************************************************************
2025-09-28 12:50:41,789 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:41,889 p=2551036 u=root n=ansible | TASK [install_elastic : Add user to docker group] *******************************************************************
2025-09-28 12:50:41,979 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,024 p=2551036 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-28 12:50:42,092 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 12:50:42,135 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 12:50:42,178 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 12:50:42,198 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 12:50:42,215 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 12:50:42,217 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,280 p=2551036 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-28 12:50:42,374 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,471 p=2551036 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-28 12:50:42,552 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,625 p=2551036 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-28 12:50:42,691 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,787 p=2551036 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-28 12:50:42,886 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:42,950 p=2551036 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-28 12:50:43,003 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,092 p=2551036 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-28 12:50:43,145 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,228 p=2551036 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************
2025-09-28 12:50:43,355 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,460 p=2551036 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************
2025-09-28 12:50:43,561 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,623 p=2551036 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************
2025-09-28 12:50:43,719 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,804 p=2551036 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************
2025-09-28 12:50:43,925 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:43,979 p=2551036 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-28 12:50:44,086 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:44,156 p=2551036 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-28 12:50:44,226 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:44,369 p=2551036 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************
2025-09-28 12:50:44,431 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:44,614 p=2551036 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************
2025-09-28 12:50:44,711 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:44,787 p=2551036 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************
2025-09-28 12:50:44,858 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:44,940 p=2551036 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************
2025-09-28 12:50:45,044 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 12:50:45,070 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 12:50:45,088 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 12:50:45,090 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:45,135 p=2551036 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 12:50:45,223 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:45,290 p=2551036 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-28 12:50:45,391 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:45,529 p=2551036 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************
2025-09-28 12:50:45,621 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 12:50:45,649 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 12:50:45,682 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 12:50:45,684 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:45,766 p=2551036 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************
2025-09-28 12:50:45,835 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:45,951 p=2551036 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-28 12:50:46,046 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:46,168 p=2551036 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-28 12:50:46,277 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:46,384 p=2551036 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-28 12:50:46,441 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:46,512 p=2551036 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************
2025-09-28 12:50:46,596 p=2551036 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 12:50:46,635 p=2551036 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 12:50:46,638 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:46,744 p=2551036 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************
2025-09-28 12:50:46,843 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:46,963 p=2551036 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************
2025-09-28 12:50:47,022 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,143 p=2551036 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************
2025-09-28 12:50:47,229 p=2551036 u=root n=ansible | failed: [lb1 -> {{ groups.get('physical_hosts', [inventory_hostname])[0] }}] (item=None) => {"ansible_loop_var": "node", "changed": false, "msg": "Failed to template loop_control.label: 'None' has no attribute 'name'. 'None' has no attribute 'name'", "node": null, "skip_reason": "Conditional result was False"}
2025-09-28 12:50:47,265 p=2551036 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 12:50:47,370 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,404 p=2551036 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 12:50:47,486 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,499 p=2551036 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************
2025-09-28 12:50:47,570 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,593 p=2551036 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 12:50:47,671 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,700 p=2551036 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 12:50:47,799 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,824 p=2551036 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************
2025-09-28 12:50:47,890 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:47,906 p=2551036 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************
2025-09-28 12:50:47,990 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,002 p=2551036 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************
2025-09-28 12:50:48,123 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 12:50:48,138 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 12:50:48,150 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 12:50:48,163 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 12:50:48,178 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 12:50:48,193 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 12:50:48,205 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 12:50:48,206 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,228 p=2551036 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************
2025-09-28 12:50:48,282 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,308 p=2551036 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************
2025-09-28 12:50:48,383 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,425 p=2551036 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************
2025-09-28 12:50:48,536 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,562 p=2551036 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************
2025-09-28 12:50:48,612 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,628 p=2551036 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************
2025-09-28 12:50:48,715 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,744 p=2551036 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************
2025-09-28 12:50:48,837 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,861 p=2551036 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 12:50:48,932 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:48,958 p=2551036 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************
2025-09-28 12:50:49,023 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,048 p=2551036 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 12:50:49,113 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,129 p=2551036 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 12:50:49,317 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,330 p=2551036 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 12:50:49,409 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,422 p=2551036 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************
2025-09-28 12:50:49,498 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,520 p=2551036 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 12:50:49,614 p=2551036 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 12:50:49,631 p=2551036 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 12:50:49,633 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,666 p=2551036 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 12:50:49,761 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 12:50:49,778 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 12:50:49,779 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,800 p=2551036 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 12:50:49,854 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,874 p=2551036 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 12:50:49,923 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:49,949 p=2551036 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 12:50:50,022 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,032 p=2551036 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 12:50:50,107 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,129 p=2551036 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 12:50:50,212 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,234 p=2551036 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 12:50:50,320 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,337 p=2551036 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************
2025-09-28 12:50:50,419 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,450 p=2551036 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************
2025-09-28 12:50:50,499 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,520 p=2551036 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************
2025-09-28 12:50:50,602 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,623 p=2551036 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************
2025-09-28 12:50:50,722 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,740 p=2551036 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************
2025-09-28 12:50:50,829 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,848 p=2551036 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************
2025-09-28 12:50:50,939 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:50,964 p=2551036 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************
2025-09-28 12:50:51,044 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,066 p=2551036 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************
2025-09-28 12:50:51,148 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,176 p=2551036 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************
2025-09-28 12:50:51,262 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,287 p=2551036 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************
2025-09-28 12:50:51,374 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,388 p=2551036 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************
2025-09-28 12:50:51,469 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,499 p=2551036 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************
2025-09-28 12:50:51,582 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,595 p=2551036 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************
2025-09-28 12:50:51,701 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,710 p=2551036 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************
2025-09-28 12:50:51,757 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,778 p=2551036 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************
2025-09-28 12:50:51,846 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,872 p=2551036 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************
2025-09-28 12:50:51,964 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:51,990 p=2551036 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************
2025-09-28 12:50:52,074 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,102 p=2551036 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************
2025-09-28 12:50:52,189 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,219 p=2551036 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************
2025-09-28 12:50:52,309 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,336 p=2551036 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************
2025-09-28 12:50:52,435 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,463 p=2551036 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************
2025-09-28 12:50:52,556 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,580 p=2551036 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************
2025-09-28 12:50:52,667 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,691 p=2551036 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************
2025-09-28 12:50:52,784 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,812 p=2551036 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************
2025-09-28 12:50:52,898 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:52,921 p=2551036 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************
2025-09-28 12:50:53,009 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,038 p=2551036 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************
2025-09-28 12:50:53,150 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,163 p=2551036 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************
2025-09-28 12:50:53,248 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,267 p=2551036 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 12:50:53,369 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,402 p=2551036 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************
2025-09-28 12:50:53,497 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,527 p=2551036 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************
2025-09-28 12:50:53,608 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,637 p=2551036 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************
2025-09-28 12:50:53,724 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,749 p=2551036 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************
2025-09-28 12:50:53,835 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,861 p=2551036 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************
2025-09-28 12:50:53,967 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:53,989 p=2551036 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************
2025-09-28 12:50:54,079 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,103 p=2551036 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************
2025-09-28 12:50:54,198 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,233 p=2551036 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************
2025-09-28 12:50:54,324 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,360 p=2551036 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************
2025-09-28 12:50:54,463 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,488 p=2551036 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************
2025-09-28 12:50:54,572 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,610 p=2551036 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************
2025-09-28 12:50:54,691 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,715 p=2551036 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************
2025-09-28 12:50:54,817 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 12:50:54,837 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 12:50:54,858 p=2551036 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 12:50:54,860 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,881 p=2551036 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************
2025-09-28 12:50:54,940 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:54,960 p=2551036 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************
2025-09-28 12:50:55,081 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,174 p=2551036 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************
2025-09-28 12:50:55,292 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,311 p=2551036 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************
2025-09-28 12:50:55,376 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,401 p=2551036 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************
2025-09-28 12:50:55,487 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,513 p=2551036 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************
2025-09-28 12:50:55,609 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,638 p=2551036 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************
2025-09-28 12:50:55,774 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,822 p=2551036 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************
2025-09-28 12:50:55,890 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:55,957 p=2551036 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 12:50:56,019 p=2551036 u=root n=ansible | skipping: [lb1]
2025-09-28 12:50:56,064 p=2551036 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 12:50:56,065 p=2551036 u=root n=ansible | bda                        : ok=11   changed=2    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 12:50:56,065 p=2551036 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 12:50:56,066 p=2551036 u=root n=ansible | host2                      : ok=11   changed=2    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 12:50:56,066 p=2551036 u=root n=ansible | host3                      : ok=11   changed=2    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 12:50:56,066 p=2551036 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=121  rescued=1    ignored=0   
2025-09-28 15:44:54,288 p=2558882 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************
2025-09-28 15:44:54,439 p=2558882 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 15:44:58,047 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:44:58,077 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:44:58,107 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:44:58,416 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:44:58,537 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:44:58,572 p=2558882 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 15:44:58,643 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:44:58,720 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:44:58,785 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:44:58,788 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:44:58,840 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:44:59,062 p=2558882 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 15:45:01,140 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:01,341 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:01,348 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:01,481 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:01,716 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:01,742 p=2558882 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 15:45:01,821 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:01,918 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:01,987 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:01,991 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:02,034 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:02,057 p=2558882 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 15:45:02,093 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:02,111 p=2558882 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 15:45:02,140 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:02,155 p=2558882 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 15:45:02,177 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:02,194 p=2558882 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 15:45:03,305 p=2558882 u=root n=ansible | changed: [host3]
2025-09-28 15:45:03,329 p=2558882 u=root n=ansible | changed: [bda]
2025-09-28 15:45:03,516 p=2558882 u=root n=ansible | changed: [host2]
2025-09-28 15:45:03,520 p=2558882 u=root n=ansible | changed: [lb1]
2025-09-28 15:45:03,557 p=2558882 u=root n=ansible | changed: [host1]
2025-09-28 15:45:03,586 p=2558882 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 15:45:03,624 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:03,661 p=2558882 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 15:45:06,033 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:06,075 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:06,104 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:06,108 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:06,181 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:06,212 p=2558882 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 15:45:07,222 p=2558882 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 15:45:07,251 p=2558882 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 15:45:07,284 p=2558882 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 15:45:07,328 p=2558882 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 15:45:07,344 p=2558882 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 15:45:07,865 p=2558882 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 15:45:07,943 p=2558882 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 15:45:07,972 p=2558882 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 15:45:08,127 p=2558882 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 15:45:08,218 p=2558882 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 15:45:08,339 p=2558882 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 15:45:08,434 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:08,500 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:08,642 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:08,698 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:08,731 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:08,760 p=2558882 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 15:45:09,485 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:09,568 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:09,619 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:09,651 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:09,714 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:09,731 p=2558882 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 15:45:10,523 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:10,540 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:10,598 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:10,639 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:10,758 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:10,784 p=2558882 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 15:45:10,919 p=2558882 u=root n=ansible | ok: [host1]
2025-09-28 15:45:10,966 p=2558882 u=root n=ansible | ok: [host2]
2025-09-28 15:45:11,024 p=2558882 u=root n=ansible | ok: [host3]
2025-09-28 15:45:11,033 p=2558882 u=root n=ansible | ok: [bda]
2025-09-28 15:45:11,062 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:11,098 p=2558882 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 15:45:11,211 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:11,259 p=2558882 u=root n=ansible | skipping: [host2]
2025-09-28 15:45:11,306 p=2558882 u=root n=ansible | skipping: [host3]
2025-09-28 15:45:11,310 p=2558882 u=root n=ansible | skipping: [bda]
2025-09-28 15:45:12,085 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:12,119 p=2558882 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 15:45:12,199 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:12,312 p=2558882 u=root n=ansible | skipping: [host2]
2025-09-28 15:45:12,365 p=2558882 u=root n=ansible | skipping: [host3]
2025-09-28 15:45:12,368 p=2558882 u=root n=ansible | skipping: [bda]
2025-09-28 15:45:12,410 p=2558882 u=root n=ansible | ok: [lb1]
2025-09-28 15:45:12,440 p=2558882 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 15:45:12,528 p=2558882 u=root n=ansible | skipping: [host1]
2025-09-28 15:45:12,592 p=2558882 u=root n=ansible | skipping: [host2]
2025-09-28 15:45:12,638 p=2558882 u=root n=ansible | skipping: [host3]
2025-09-28 15:45:12,692 p=2558882 u=root n=ansible | skipping: [bda]
2025-09-28 15:45:12,732 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:12,868 p=2558882 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************
2025-09-28 15:45:12,974 p=2558882 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:45:13,041 p=2558882 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:45:13,092 p=2558882 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:45:13,104 p=2558882 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:45:13,157 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:13,229 p=2558882 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************
2025-09-28 15:45:13,307 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:13,411 p=2558882 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************
2025-09-28 15:45:13,512 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:13,575 p=2558882 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 15:45:13,684 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:13,793 p=2558882 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 15:45:13,829 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:13,878 p=2558882 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************
2025-09-28 15:45:13,977 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:14,032 p=2558882 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 15:45:14,132 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:14,272 p=2558882 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************
2025-09-28 15:45:14,404 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:14,450 p=2558882 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************
2025-09-28 15:45:14,546 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:14,764 p=2558882 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 15:45:14,822 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:14,898 p=2558882 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************
2025-09-28 15:45:14,968 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,055 p=2558882 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************
2025-09-28 15:45:15,147 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,224 p=2558882 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************
2025-09-28 15:45:15,324 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,382 p=2558882 u=root n=ansible | TASK [install_elastic : Update package cache] ***********************************************************************
2025-09-28 15:45:15,500 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,607 p=2558882 u=root n=ansible | TASK [install_elastic : Install required packages] ******************************************************************
2025-09-28 15:45:15,667 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,745 p=2558882 u=root n=ansible | TASK [install_elastic : Start and enable Docker service] ************************************************************
2025-09-28 15:45:15,809 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:15,883 p=2558882 u=root n=ansible | TASK [install_elastic : Add user to docker group] *******************************************************************
2025-09-28 15:45:15,952 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,060 p=2558882 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-28 15:45:16,170 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 15:45:16,186 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 15:45:16,220 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 15:45:16,264 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 15:45:16,304 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 15:45:16,306 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,380 p=2558882 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-28 15:45:16,458 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,526 p=2558882 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-28 15:45:16,586 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,650 p=2558882 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-28 15:45:16,738 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,784 p=2558882 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-28 15:45:16,866 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:16,970 p=2558882 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-28 15:45:17,045 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:17,110 p=2558882 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-28 15:45:17,173 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:17,296 p=2558882 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************
2025-09-28 15:45:17,380 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:17,440 p=2558882 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************
2025-09-28 15:45:17,499 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:17,588 p=2558882 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************
2025-09-28 15:45:17,718 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:17,817 p=2558882 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************
2025-09-28 15:45:17,921 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:18,038 p=2558882 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-28 15:45:18,143 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:18,252 p=2558882 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-28 15:45:18,351 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:18,455 p=2558882 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************
2025-09-28 15:45:18,555 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:18,667 p=2558882 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************
2025-09-28 15:45:18,765 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:18,897 p=2558882 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************
2025-09-28 15:45:19,009 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:19,109 p=2558882 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************
2025-09-28 15:45:19,218 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 15:45:19,247 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 15:45:19,273 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 15:45:19,275 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:19,389 p=2558882 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 15:45:19,489 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:19,636 p=2558882 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-28 15:45:19,737 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:19,853 p=2558882 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************
2025-09-28 15:45:19,965 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 15:45:19,982 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 15:45:20,005 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 15:45:20,007 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:20,123 p=2558882 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************
2025-09-28 15:45:20,373 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:20,480 p=2558882 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-28 15:45:20,570 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:20,731 p=2558882 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-28 15:45:20,831 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:20,995 p=2558882 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-28 15:45:21,056 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:21,197 p=2558882 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************
2025-09-28 15:45:21,331 p=2558882 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 15:45:21,370 p=2558882 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 15:45:21,373 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:21,490 p=2558882 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************
2025-09-28 15:45:21,594 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:21,700 p=2558882 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************
2025-09-28 15:45:21,806 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:21,920 p=2558882 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************
2025-09-28 15:45:22,032 p=2558882 u=root n=ansible | failed: [lb1 -> {{ groups.get('physical_hosts', [inventory_hostname])[0] }}] (item=None) => {"ansible_loop_var": "node", "changed": false, "msg": "Failed to template loop_control.label: 'None' has no attribute 'name'. 'None' has no attribute 'name'", "node": null, "skip_reason": "Conditional result was False"}
2025-09-28 15:45:22,051 p=2558882 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 15:45:22,160 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,189 p=2558882 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 15:45:22,261 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,279 p=2558882 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************
2025-09-28 15:45:22,373 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,389 p=2558882 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 15:45:22,475 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,493 p=2558882 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 15:45:22,583 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,615 p=2558882 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************
2025-09-28 15:45:22,724 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,743 p=2558882 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************
2025-09-28 15:45:22,856 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:22,899 p=2558882 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************
2025-09-28 15:45:22,997 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 15:45:23,020 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 15:45:23,042 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 15:45:23,068 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 15:45:23,101 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 15:45:23,132 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 15:45:23,157 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 15:45:23,159 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,184 p=2558882 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************
2025-09-28 15:45:23,249 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,275 p=2558882 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************
2025-09-28 15:45:23,343 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,372 p=2558882 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************
2025-09-28 15:45:23,440 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,459 p=2558882 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************
2025-09-28 15:45:23,540 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,561 p=2558882 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************
2025-09-28 15:45:23,642 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,661 p=2558882 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************
2025-09-28 15:45:23,746 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,785 p=2558882 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 15:45:23,865 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,898 p=2558882 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************
2025-09-28 15:45:23,959 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:23,973 p=2558882 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 15:45:24,029 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,044 p=2558882 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 15:45:24,144 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,165 p=2558882 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 15:45:24,243 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,264 p=2558882 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************
2025-09-28 15:45:24,341 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,373 p=2558882 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 15:45:24,457 p=2558882 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 15:45:24,483 p=2558882 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 15:45:24,486 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,512 p=2558882 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 15:45:24,609 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 15:45:24,636 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 15:45:24,638 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,656 p=2558882 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 15:45:24,749 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,766 p=2558882 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 15:45:24,856 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:24,885 p=2558882 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 15:45:24,978 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,009 p=2558882 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 15:45:25,069 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,084 p=2558882 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 15:45:25,219 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,255 p=2558882 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 15:45:25,365 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,404 p=2558882 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************
2025-09-28 15:45:25,513 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,536 p=2558882 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************
2025-09-28 15:45:25,603 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,617 p=2558882 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************
2025-09-28 15:45:25,734 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:25,773 p=2558882 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************
2025-09-28 15:45:26,028 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,051 p=2558882 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************
2025-09-28 15:45:26,120 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,154 p=2558882 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************
2025-09-28 15:45:26,265 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,283 p=2558882 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************
2025-09-28 15:45:26,371 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,399 p=2558882 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************
2025-09-28 15:45:26,476 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,514 p=2558882 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************
2025-09-28 15:45:26,585 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,607 p=2558882 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************
2025-09-28 15:45:26,694 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,712 p=2558882 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************
2025-09-28 15:45:26,765 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,779 p=2558882 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************
2025-09-28 15:45:26,840 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,862 p=2558882 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************
2025-09-28 15:45:26,929 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:26,947 p=2558882 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************
2025-09-28 15:45:27,010 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,031 p=2558882 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************
2025-09-28 15:45:27,124 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,152 p=2558882 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************
2025-09-28 15:45:27,234 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,258 p=2558882 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************
2025-09-28 15:45:27,342 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,356 p=2558882 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************
2025-09-28 15:45:27,442 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,470 p=2558882 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************
2025-09-28 15:45:27,556 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,586 p=2558882 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************
2025-09-28 15:45:27,674 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,692 p=2558882 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************
2025-09-28 15:45:27,788 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,812 p=2558882 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************
2025-09-28 15:45:27,875 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,892 p=2558882 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************
2025-09-28 15:45:27,946 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:27,964 p=2558882 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************
2025-09-28 15:45:28,066 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,095 p=2558882 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************
2025-09-28 15:45:28,173 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,186 p=2558882 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************
2025-09-28 15:45:28,282 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,303 p=2558882 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************
2025-09-28 15:45:28,372 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,393 p=2558882 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 15:45:28,459 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,515 p=2558882 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************
2025-09-28 15:45:28,603 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,650 p=2558882 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************
2025-09-28 15:45:28,730 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,752 p=2558882 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************
2025-09-28 15:45:28,809 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,831 p=2558882 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************
2025-09-28 15:45:28,893 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,915 p=2558882 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************
2025-09-28 15:45:28,971 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:28,988 p=2558882 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************
2025-09-28 15:45:29,085 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,115 p=2558882 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************
2025-09-28 15:45:29,184 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,199 p=2558882 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************
2025-09-28 15:45:29,282 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,294 p=2558882 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************
2025-09-28 15:45:29,376 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,398 p=2558882 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************
2025-09-28 15:45:29,446 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,478 p=2558882 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************
2025-09-28 15:45:29,595 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,611 p=2558882 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************
2025-09-28 15:45:29,711 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 15:45:29,734 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 15:45:29,753 p=2558882 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 15:45:29,755 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,781 p=2558882 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************
2025-09-28 15:45:29,842 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,865 p=2558882 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************
2025-09-28 15:45:29,964 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:29,979 p=2558882 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************
2025-09-28 15:45:30,056 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,072 p=2558882 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************
2025-09-28 15:45:30,148 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,181 p=2558882 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************
2025-09-28 15:45:30,260 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,285 p=2558882 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************
2025-09-28 15:45:30,374 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,411 p=2558882 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************
2025-09-28 15:45:30,504 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,531 p=2558882 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************
2025-09-28 15:45:30,614 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,675 p=2558882 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 15:45:30,736 p=2558882 u=root n=ansible | skipping: [lb1]
2025-09-28 15:45:30,803 p=2558882 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 15:45:30,804 p=2558882 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:45:30,804 p=2558882 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:45:30,804 p=2558882 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:45:30,805 p=2558882 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:45:30,805 p=2558882 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=121  rescued=1    ignored=0   
2025-09-28 15:52:36,572 p=2560954 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************
2025-09-28 15:52:36,692 p=2560954 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 15:52:40,116 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:40,204 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:40,276 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:40,304 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:40,314 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:40,336 p=2560954 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 15:52:40,404 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:40,489 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:40,536 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:40,542 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:40,582 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:40,734 p=2560954 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 15:52:42,873 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:42,928 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:43,030 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:43,033 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:43,184 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:43,206 p=2560954 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 15:52:43,342 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:43,408 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:43,455 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:43,463 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:43,497 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:43,511 p=2560954 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 15:52:43,533 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:43,544 p=2560954 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 15:52:43,560 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:43,575 p=2560954 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 15:52:43,603 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:43,617 p=2560954 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 15:52:44,620 p=2560954 u=root n=ansible | changed: [host2]
2025-09-28 15:52:44,627 p=2560954 u=root n=ansible | changed: [host1]
2025-09-28 15:52:44,642 p=2560954 u=root n=ansible | changed: [host3]
2025-09-28 15:52:44,723 p=2560954 u=root n=ansible | changed: [lb1]
2025-09-28 15:52:44,834 p=2560954 u=root n=ansible | changed: [bda]
2025-09-28 15:52:44,861 p=2560954 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 15:52:44,885 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:44,906 p=2560954 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 15:52:46,973 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:47,045 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:47,051 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:47,074 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:47,078 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:47,097 p=2560954 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 15:52:48,131 p=2560954 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 15:52:48,151 p=2560954 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 15:52:48,160 p=2560954 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 15:52:48,161 p=2560954 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 15:52:48,185 p=2560954 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 15:52:48,742 p=2560954 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 15:52:48,826 p=2560954 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 15:52:48,849 p=2560954 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 15:52:48,859 p=2560954 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 15:52:48,910 p=2560954 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 15:52:49,002 p=2560954 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 15:52:49,108 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:49,160 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:49,215 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:49,219 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:49,239 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:49,263 p=2560954 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 15:52:50,029 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:50,225 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:50,286 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:50,304 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:50,318 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:50,332 p=2560954 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 15:52:51,165 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:51,170 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:51,192 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:51,324 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:51,393 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:51,415 p=2560954 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 15:52:51,541 p=2560954 u=root n=ansible | ok: [host1]
2025-09-28 15:52:51,603 p=2560954 u=root n=ansible | ok: [host2]
2025-09-28 15:52:51,657 p=2560954 u=root n=ansible | ok: [host3]
2025-09-28 15:52:51,660 p=2560954 u=root n=ansible | ok: [bda]
2025-09-28 15:52:51,727 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:51,758 p=2560954 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 15:52:51,837 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:51,906 p=2560954 u=root n=ansible | skipping: [host2]
2025-09-28 15:52:52,035 p=2560954 u=root n=ansible | skipping: [host3]
2025-09-28 15:52:52,040 p=2560954 u=root n=ansible | skipping: [bda]
2025-09-28 15:52:52,968 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:52,990 p=2560954 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 15:52:53,059 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:53,112 p=2560954 u=root n=ansible | skipping: [host2]
2025-09-28 15:52:53,163 p=2560954 u=root n=ansible | skipping: [host3]
2025-09-28 15:52:53,214 p=2560954 u=root n=ansible | skipping: [bda]
2025-09-28 15:52:53,274 p=2560954 u=root n=ansible | ok: [lb1]
2025-09-28 15:52:53,298 p=2560954 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 15:52:53,375 p=2560954 u=root n=ansible | skipping: [host1]
2025-09-28 15:52:53,485 p=2560954 u=root n=ansible | skipping: [host2]
2025-09-28 15:52:53,537 p=2560954 u=root n=ansible | skipping: [host3]
2025-09-28 15:52:53,539 p=2560954 u=root n=ansible | skipping: [bda]
2025-09-28 15:52:53,562 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:53,676 p=2560954 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************
2025-09-28 15:52:53,772 p=2560954 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:52:53,828 p=2560954 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:52:53,835 p=2560954 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:52:53,851 p=2560954 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 15:52:53,899 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:53,990 p=2560954 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************
2025-09-28 15:52:54,045 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:54,194 p=2560954 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************
2025-09-28 15:52:54,301 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:54,398 p=2560954 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 15:52:54,493 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:54,594 p=2560954 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 15:52:54,656 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:54,723 p=2560954 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************
2025-09-28 15:52:54,813 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:54,894 p=2560954 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 15:52:54,981 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:55,073 p=2560954 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************
2025-09-28 15:52:55,165 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:55,211 p=2560954 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************
2025-09-28 15:52:55,353 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:55,466 p=2560954 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 15:52:55,534 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:55,619 p=2560954 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************
2025-09-28 15:52:55,717 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:55,812 p=2560954 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************
2025-09-28 15:52:55,943 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:56,085 p=2560954 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************
2025-09-28 15:52:56,147 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:56,238 p=2560954 u=root n=ansible | TASK [install_elastic : Update package cache] ***********************************************************************
2025-09-28 15:52:56,335 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:56,427 p=2560954 u=root n=ansible | TASK [install_elastic : Install required packages] ******************************************************************
2025-09-28 15:52:56,523 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:56,630 p=2560954 u=root n=ansible | TASK [install_elastic : Start and enable Docker service] ************************************************************
2025-09-28 15:52:56,775 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:56,927 p=2560954 u=root n=ansible | TASK [install_elastic : Add user to docker group] *******************************************************************
2025-09-28 15:52:57,046 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:57,268 p=2560954 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-28 15:52:57,373 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 15:52:57,402 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 15:52:57,428 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 15:52:57,453 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 15:52:57,475 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 15:52:57,477 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:57,573 p=2560954 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-28 15:52:57,665 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:57,772 p=2560954 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-28 15:52:57,862 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:57,959 p=2560954 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-28 15:52:58,073 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,133 p=2560954 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-28 15:52:58,223 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,308 p=2560954 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-28 15:52:58,400 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,488 p=2560954 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-28 15:52:58,579 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,668 p=2560954 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************
2025-09-28 15:52:58,771 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,863 p=2560954 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************
2025-09-28 15:52:58,953 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:58,998 p=2560954 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************
2025-09-28 15:52:59,098 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:59,189 p=2560954 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************
2025-09-28 15:52:59,283 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:59,389 p=2560954 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-28 15:52:59,488 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:59,577 p=2560954 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-28 15:52:59,670 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:59,781 p=2560954 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************
2025-09-28 15:52:59,881 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:52:59,992 p=2560954 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************
2025-09-28 15:53:00,094 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:00,184 p=2560954 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************
2025-09-28 15:53:00,261 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:00,381 p=2560954 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************
2025-09-28 15:53:00,484 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 15:53:00,514 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 15:53:00,528 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 15:53:00,531 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:00,694 p=2560954 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 15:53:00,788 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:00,886 p=2560954 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-28 15:53:01,002 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:01,118 p=2560954 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************
2025-09-28 15:53:01,179 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 15:53:01,193 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 15:53:01,210 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 15:53:01,212 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:01,267 p=2560954 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************
2025-09-28 15:53:01,349 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:01,425 p=2560954 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-28 15:53:01,490 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:01,623 p=2560954 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-28 15:53:01,736 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:01,875 p=2560954 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-28 15:53:01,936 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:02,031 p=2560954 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************
2025-09-28 15:53:02,149 p=2560954 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 15:53:02,166 p=2560954 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 15:53:02,167 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:02,295 p=2560954 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************
2025-09-28 15:53:02,396 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:02,452 p=2560954 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************
2025-09-28 15:53:02,539 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:02,676 p=2560954 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************
2025-09-28 15:53:02,881 p=2560954 u=root n=ansible | failed: [lb1 -> {{ groups.get('physical_hosts', [inventory_hostname])[0] }}] (item=None) => {"ansible_loop_var": "node", "changed": false, "msg": "Failed to template loop_control.label: 'None' has no attribute 'name'. 'None' has no attribute 'name'", "node": null, "skip_reason": "Conditional result was False"}
2025-09-28 15:53:02,894 p=2560954 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 15:53:02,963 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:02,993 p=2560954 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 15:53:03,057 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,090 p=2560954 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************
2025-09-28 15:53:03,155 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,168 p=2560954 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 15:53:03,227 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,241 p=2560954 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 15:53:03,330 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,348 p=2560954 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************
2025-09-28 15:53:03,404 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,421 p=2560954 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************
2025-09-28 15:53:03,489 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,511 p=2560954 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************
2025-09-28 15:53:03,598 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 15:53:03,616 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 15:53:03,637 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 15:53:03,658 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 15:53:03,680 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 15:53:03,699 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 15:53:03,721 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 15:53:03,723 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,745 p=2560954 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************
2025-09-28 15:53:03,850 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,869 p=2560954 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************
2025-09-28 15:53:03,970 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:03,987 p=2560954 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************
2025-09-28 15:53:04,080 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,099 p=2560954 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************
2025-09-28 15:53:04,212 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,229 p=2560954 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************
2025-09-28 15:53:04,325 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,339 p=2560954 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************
2025-09-28 15:53:04,444 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,463 p=2560954 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 15:53:04,560 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,580 p=2560954 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************
2025-09-28 15:53:04,681 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,695 p=2560954 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 15:53:04,756 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,777 p=2560954 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 15:53:04,836 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,854 p=2560954 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 15:53:04,908 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,920 p=2560954 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************
2025-09-28 15:53:04,974 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:04,999 p=2560954 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 15:53:05,121 p=2560954 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 15:53:05,139 p=2560954 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 15:53:05,141 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,160 p=2560954 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 15:53:05,260 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 15:53:05,288 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 15:53:05,291 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,316 p=2560954 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 15:53:05,399 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,421 p=2560954 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 15:53:05,508 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,532 p=2560954 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 15:53:05,605 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,632 p=2560954 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 15:53:05,710 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,732 p=2560954 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 15:53:05,828 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,866 p=2560954 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 15:53:05,955 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:05,981 p=2560954 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************
2025-09-28 15:53:06,043 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,061 p=2560954 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************
2025-09-28 15:53:06,120 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,154 p=2560954 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************
2025-09-28 15:53:06,270 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,296 p=2560954 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************
2025-09-28 15:53:06,358 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,370 p=2560954 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************
2025-09-28 15:53:06,464 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,491 p=2560954 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************
2025-09-28 15:53:06,567 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,588 p=2560954 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************
2025-09-28 15:53:06,644 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,655 p=2560954 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************
2025-09-28 15:53:06,721 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,746 p=2560954 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************
2025-09-28 15:53:06,816 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,834 p=2560954 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************
2025-09-28 15:53:06,921 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:06,948 p=2560954 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************
2025-09-28 15:53:07,017 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,055 p=2560954 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************
2025-09-28 15:53:07,161 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,183 p=2560954 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************
2025-09-28 15:53:07,267 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,297 p=2560954 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************
2025-09-28 15:53:07,391 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,425 p=2560954 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************
2025-09-28 15:53:07,524 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,547 p=2560954 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************
2025-09-28 15:53:07,607 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,641 p=2560954 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************
2025-09-28 15:53:07,704 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,723 p=2560954 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************
2025-09-28 15:53:07,806 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,818 p=2560954 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************
2025-09-28 15:53:07,908 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:07,925 p=2560954 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************
2025-09-28 15:53:08,026 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,056 p=2560954 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************
2025-09-28 15:53:08,140 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,163 p=2560954 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************
2025-09-28 15:53:08,228 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,249 p=2560954 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************
2025-09-28 15:53:08,367 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,393 p=2560954 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************
2025-09-28 15:53:08,446 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,455 p=2560954 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************
2025-09-28 15:53:08,507 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,526 p=2560954 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************
2025-09-28 15:53:08,597 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,620 p=2560954 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************
2025-09-28 15:53:08,717 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,736 p=2560954 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 15:53:08,799 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:08,956 p=2560954 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************
2025-09-28 15:53:09,046 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,071 p=2560954 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************
2025-09-28 15:53:09,162 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,192 p=2560954 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************
2025-09-28 15:53:09,288 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,315 p=2560954 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************
2025-09-28 15:53:09,414 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,452 p=2560954 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************
2025-09-28 15:53:09,531 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,565 p=2560954 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************
2025-09-28 15:53:09,620 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,635 p=2560954 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************
2025-09-28 15:53:09,695 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,717 p=2560954 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************
2025-09-28 15:53:09,788 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,811 p=2560954 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************
2025-09-28 15:53:09,868 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:09,884 p=2560954 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************
2025-09-28 15:53:09,984 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,016 p=2560954 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************
2025-09-28 15:53:10,071 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,086 p=2560954 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************
2025-09-28 15:53:10,149 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 15:53:10,161 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 15:53:10,172 p=2560954 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 15:53:10,174 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,197 p=2560954 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************
2025-09-28 15:53:10,260 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,277 p=2560954 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************
2025-09-28 15:53:10,333 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,350 p=2560954 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************
2025-09-28 15:53:10,400 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,431 p=2560954 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************
2025-09-28 15:53:10,521 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,531 p=2560954 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************
2025-09-28 15:53:10,601 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,619 p=2560954 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************
2025-09-28 15:53:10,678 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,704 p=2560954 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************
2025-09-28 15:53:10,761 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,778 p=2560954 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************
2025-09-28 15:53:10,831 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,862 p=2560954 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 15:53:10,905 p=2560954 u=root n=ansible | skipping: [lb1]
2025-09-28 15:53:10,939 p=2560954 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 15:53:10,940 p=2560954 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:53:10,940 p=2560954 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:53:10,940 p=2560954 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:53:10,940 p=2560954 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 15:53:10,941 p=2560954 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=121  rescued=1    ignored=0   
2025-09-28 16:34:14,078 p=2564215 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************
2025-09-28 16:34:14,185 p=2564215 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 16:34:17,817 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:17,928 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:18,003 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:18,058 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:18,121 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:18,158 p=2564215 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 16:34:18,305 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:18,331 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:18,356 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:18,362 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:18,419 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:18,576 p=2564215 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 16:34:20,804 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:20,836 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:20,842 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:21,173 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:21,176 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:21,194 p=2564215 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 16:34:21,315 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:21,357 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:21,398 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:21,400 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:21,453 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:21,477 p=2564215 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 16:34:21,515 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:21,533 p=2564215 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 16:34:21,561 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:21,581 p=2564215 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 16:34:21,617 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:21,633 p=2564215 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 16:34:22,642 p=2564215 u=root n=ansible | changed: [bda]
2025-09-28 16:34:22,672 p=2564215 u=root n=ansible | changed: [host3]
2025-09-28 16:34:22,716 p=2564215 u=root n=ansible | changed: [host1]
2025-09-28 16:34:22,783 p=2564215 u=root n=ansible | changed: [host2]
2025-09-28 16:34:22,797 p=2564215 u=root n=ansible | changed: [lb1]
2025-09-28 16:34:22,812 p=2564215 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 16:34:22,828 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:22,840 p=2564215 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 16:34:24,824 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:24,837 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:24,857 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:24,866 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:24,878 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:24,904 p=2564215 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 16:34:26,154 p=2564215 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 16:34:26,183 p=2564215 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 16:34:26,242 p=2564215 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 16:34:26,270 p=2564215 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 16:34:26,311 p=2564215 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 16:34:26,869 p=2564215 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 16:34:26,955 p=2564215 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 16:34:26,999 p=2564215 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 16:34:27,016 p=2564215 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 16:34:27,156 p=2564215 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 16:34:27,237 p=2564215 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 16:34:27,363 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:27,424 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:27,475 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:27,478 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:27,501 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:27,530 p=2564215 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 16:34:28,427 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:28,491 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:28,555 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:28,572 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:28,606 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:28,623 p=2564215 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 16:34:29,374 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:29,483 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:29,498 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:29,522 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:29,570 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:29,586 p=2564215 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 16:34:29,687 p=2564215 u=root n=ansible | ok: [host1]
2025-09-28 16:34:29,727 p=2564215 u=root n=ansible | ok: [host2]
2025-09-28 16:34:29,759 p=2564215 u=root n=ansible | ok: [host3]
2025-09-28 16:34:29,767 p=2564215 u=root n=ansible | ok: [bda]
2025-09-28 16:34:29,816 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:29,835 p=2564215 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 16:34:29,895 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:29,957 p=2564215 u=root n=ansible | skipping: [host2]
2025-09-28 16:34:30,023 p=2564215 u=root n=ansible | skipping: [host3]
2025-09-28 16:34:30,059 p=2564215 u=root n=ansible | skipping: [bda]
2025-09-28 16:34:30,726 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:30,753 p=2564215 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 16:34:30,863 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:30,909 p=2564215 u=root n=ansible | skipping: [host2]
2025-09-28 16:34:30,957 p=2564215 u=root n=ansible | skipping: [host3]
2025-09-28 16:34:30,961 p=2564215 u=root n=ansible | skipping: [bda]
2025-09-28 16:34:31,010 p=2564215 u=root n=ansible | ok: [lb1]
2025-09-28 16:34:31,031 p=2564215 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 16:34:31,113 p=2564215 u=root n=ansible | skipping: [host1]
2025-09-28 16:34:31,151 p=2564215 u=root n=ansible | skipping: [host2]
2025-09-28 16:34:31,189 p=2564215 u=root n=ansible | skipping: [host3]
2025-09-28 16:34:31,198 p=2564215 u=root n=ansible | skipping: [bda]
2025-09-28 16:34:31,219 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:31,310 p=2564215 u=root n=ansible | TASK [install_elastic : Display installation banner] ****************************************************************
2025-09-28 16:34:31,415 p=2564215 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 16:34:31,457 p=2564215 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 16:34:31,507 p=2564215 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 16:34:31,510 p=2564215 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Display installation banner\n      ^ here\n"}
2025-09-28 16:34:31,614 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:31,685 p=2564215 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************
2025-09-28 16:34:31,752 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:31,854 p=2564215 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************
2025-09-28 16:34:31,958 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,032 p=2564215 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 16:34:32,129 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,171 p=2564215 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 16:34:32,197 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,243 p=2564215 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************
2025-09-28 16:34:32,354 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,421 p=2564215 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 16:34:32,471 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,547 p=2564215 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************
2025-09-28 16:34:32,668 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,753 p=2564215 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************
2025-09-28 16:34:32,841 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:32,939 p=2564215 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 16:34:33,052 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:33,145 p=2564215 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************
2025-09-28 16:34:33,227 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:33,350 p=2564215 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************
2025-09-28 16:34:33,456 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:33,518 p=2564215 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************
2025-09-28 16:34:33,607 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:33,765 p=2564215 u=root n=ansible | TASK [install_elastic : Update package cache] ***********************************************************************
2025-09-28 16:34:33,866 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:33,959 p=2564215 u=root n=ansible | TASK [install_elastic : Install required packages] ******************************************************************
2025-09-28 16:34:34,029 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:34,127 p=2564215 u=root n=ansible | TASK [install_elastic : Start and enable Docker service] ************************************************************
2025-09-28 16:34:34,225 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:34,329 p=2564215 u=root n=ansible | TASK [install_elastic : Add user to docker group] *******************************************************************
2025-09-28 16:34:34,421 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:34,518 p=2564215 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-28 16:34:34,642 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:34:34,679 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 16:34:34,729 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 16:34:34,776 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 16:34:34,791 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:34:34,794 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:34,917 p=2564215 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-28 16:34:34,993 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:35,107 p=2564215 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-28 16:34:35,196 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:35,294 p=2564215 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-28 16:34:35,401 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:35,506 p=2564215 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-28 16:34:35,605 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:35,668 p=2564215 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-28 16:34:35,769 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:35,891 p=2564215 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-28 16:34:35,989 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,091 p=2564215 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************
2025-09-28 16:34:36,178 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,269 p=2564215 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************
2025-09-28 16:34:36,396 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,439 p=2564215 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************
2025-09-28 16:34:36,549 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,606 p=2564215 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************
2025-09-28 16:34:36,659 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,747 p=2564215 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-28 16:34:36,831 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:36,941 p=2564215 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-28 16:34:37,014 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:37,124 p=2564215 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************
2025-09-28 16:34:37,207 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:37,311 p=2564215 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************
2025-09-28 16:34:37,415 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:37,506 p=2564215 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************
2025-09-28 16:34:37,595 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:37,691 p=2564215 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************
2025-09-28 16:34:37,797 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:34:37,822 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 16:34:37,845 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:34:37,848 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:37,949 p=2564215 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 16:34:38,051 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:38,216 p=2564215 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-28 16:34:38,307 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:38,413 p=2564215 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************
2025-09-28 16:34:38,479 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 16:34:38,487 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 16:34:38,499 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 16:34:38,502 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:38,595 p=2564215 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************
2025-09-28 16:34:38,690 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:38,809 p=2564215 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-28 16:34:38,925 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:39,047 p=2564215 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-28 16:34:39,146 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:39,255 p=2564215 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-28 16:34:39,365 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:39,439 p=2564215 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************
2025-09-28 16:34:39,545 p=2564215 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 16:34:39,571 p=2564215 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 16:34:39,574 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:39,698 p=2564215 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************
2025-09-28 16:34:39,801 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:39,940 p=2564215 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************
2025-09-28 16:34:40,007 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,131 p=2564215 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************
2025-09-28 16:34:40,232 p=2564215 u=root n=ansible | failed: [lb1 -> {{ groups.get('physical_hosts', [inventory_hostname])[0] }}] (item=None) => {"ansible_loop_var": "node", "changed": false, "msg": "Failed to template loop_control.label: 'None' has no attribute 'name'. 'None' has no attribute 'name'", "node": null, "skip_reason": "Conditional result was False"}
2025-09-28 16:34:40,276 p=2564215 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 16:34:40,382 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,424 p=2564215 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 16:34:40,492 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,505 p=2564215 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************
2025-09-28 16:34:40,569 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,593 p=2564215 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 16:34:40,658 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,676 p=2564215 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 16:34:40,761 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,785 p=2564215 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************
2025-09-28 16:34:40,847 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,868 p=2564215 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************
2025-09-28 16:34:40,953 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:40,974 p=2564215 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************
2025-09-28 16:34:41,097 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 16:34:41,125 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 16:34:41,149 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 16:34:41,171 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 16:34:41,197 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 16:34:41,224 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 16:34:41,241 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 16:34:41,244 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,292 p=2564215 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************
2025-09-28 16:34:41,362 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,378 p=2564215 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************
2025-09-28 16:34:41,432 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,452 p=2564215 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************
2025-09-28 16:34:41,543 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,566 p=2564215 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************
2025-09-28 16:34:41,656 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,679 p=2564215 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************
2025-09-28 16:34:41,737 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,760 p=2564215 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************
2025-09-28 16:34:41,852 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,868 p=2564215 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 16:34:41,959 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:41,973 p=2564215 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************
2025-09-28 16:34:42,030 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,061 p=2564215 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 16:34:42,187 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,212 p=2564215 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 16:34:42,279 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,301 p=2564215 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 16:34:42,392 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,421 p=2564215 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************
2025-09-28 16:34:42,508 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,529 p=2564215 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 16:34:42,607 p=2564215 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 16:34:42,615 p=2564215 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 16:34:42,617 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,635 p=2564215 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 16:34:42,736 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 16:34:42,755 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 16:34:42,758 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,787 p=2564215 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 16:34:42,884 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:42,908 p=2564215 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 16:34:42,992 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,015 p=2564215 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 16:34:43,099 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,120 p=2564215 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 16:34:43,229 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,322 p=2564215 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 16:34:43,439 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,459 p=2564215 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 16:34:43,671 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,687 p=2564215 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************
2025-09-28 16:34:43,755 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,771 p=2564215 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************
2025-09-28 16:34:43,882 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:43,930 p=2564215 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************
2025-09-28 16:34:44,045 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,060 p=2564215 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************
2025-09-28 16:34:44,106 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,117 p=2564215 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************
2025-09-28 16:34:44,168 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,183 p=2564215 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************
2025-09-28 16:34:44,238 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,259 p=2564215 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************
2025-09-28 16:34:44,349 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,373 p=2564215 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************
2025-09-28 16:34:44,464 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,498 p=2564215 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************
2025-09-28 16:34:44,613 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,648 p=2564215 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************
2025-09-28 16:34:44,727 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,747 p=2564215 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************
2025-09-28 16:34:44,823 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,836 p=2564215 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************
2025-09-28 16:34:44,944 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:44,957 p=2564215 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************
2025-09-28 16:34:45,038 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,056 p=2564215 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************
2025-09-28 16:34:45,145 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,167 p=2564215 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************
2025-09-28 16:34:45,250 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,279 p=2564215 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************
2025-09-28 16:34:45,360 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,376 p=2564215 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************
2025-09-28 16:34:45,476 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,489 p=2564215 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************
2025-09-28 16:34:45,567 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,596 p=2564215 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************
2025-09-28 16:34:45,677 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,697 p=2564215 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************
2025-09-28 16:34:45,780 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,798 p=2564215 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************
2025-09-28 16:34:45,884 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:45,898 p=2564215 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************
2025-09-28 16:34:45,981 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,010 p=2564215 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************
2025-09-28 16:34:46,113 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,123 p=2564215 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************
2025-09-28 16:34:46,217 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,244 p=2564215 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************
2025-09-28 16:34:46,306 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,326 p=2564215 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************
2025-09-28 16:34:46,402 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,424 p=2564215 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************
2025-09-28 16:34:46,485 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,494 p=2564215 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 16:34:46,556 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,589 p=2564215 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************
2025-09-28 16:34:46,647 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,691 p=2564215 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************
2025-09-28 16:34:46,781 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,812 p=2564215 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************
2025-09-28 16:34:46,891 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:46,906 p=2564215 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************
2025-09-28 16:34:46,990 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,025 p=2564215 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************
2025-09-28 16:34:47,124 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,155 p=2564215 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************
2025-09-28 16:34:47,215 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,245 p=2564215 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************
2025-09-28 16:34:47,311 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,340 p=2564215 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************
2025-09-28 16:34:47,390 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,404 p=2564215 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************
2025-09-28 16:34:47,484 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,508 p=2564215 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************
2025-09-28 16:34:47,598 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,610 p=2564215 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************
2025-09-28 16:34:47,693 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,715 p=2564215 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************
2025-09-28 16:34:47,816 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 16:34:47,841 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 16:34:47,863 p=2564215 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 16:34:47,864 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:47,878 p=2564215 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************
2025-09-28 16:34:47,969 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,011 p=2564215 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************
2025-09-28 16:34:48,100 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,113 p=2564215 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************
2025-09-28 16:34:48,197 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,213 p=2564215 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************
2025-09-28 16:34:48,272 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,295 p=2564215 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************
2025-09-28 16:34:48,377 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,404 p=2564215 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************
2025-09-28 16:34:48,501 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,524 p=2564215 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************
2025-09-28 16:34:48,593 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,617 p=2564215 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************
2025-09-28 16:34:48,697 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,777 p=2564215 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 16:34:48,837 p=2564215 u=root n=ansible | skipping: [lb1]
2025-09-28 16:34:48,875 p=2564215 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 16:34:48,875 p=2564215 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 16:34:48,876 p=2564215 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 16:34:48,876 p=2564215 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 16:34:48,876 p=2564215 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-28 16:34:48,877 p=2564215 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=121  rescued=1    ignored=0   
2025-09-28 16:41:06,444 p=2566172 u=root n=ansible | [WARNING]: While constructing a mapping from /root/roles/install_elastic/tasks/elasticsearch-ssl-multinode.yml, line 65, column 7, found a duplicate dict key (vars). Using last defined value only.

2025-09-28 16:41:06,477 p=2566172 u=root n=ansible | ERROR! duplicate loop in task: items

The error appears to be in '/root/roles/install_elastic/tasks/elasticsearch-ssl-multinode.yml': line 65, column 7, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:


    - name: Build comprehensive node list for certificate generation
      ^ here

2025-09-28 16:44:46,553 p=2566313 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 16:44:46,752 p=2566313 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 16:44:50,172 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:44:50,181 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:44:50,251 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:44:50,337 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:44:50,368 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:44:50,386 p=2566313 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 16:44:50,477 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:44:50,519 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:44:50,557 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:44:50,564 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:44:50,601 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:44:50,753 p=2566313 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 16:44:52,864 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:44:52,891 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:44:53,011 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:44:53,057 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:44:53,106 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:44:53,125 p=2566313 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 16:44:53,204 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:44:53,255 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:44:53,348 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:44:53,402 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:44:53,494 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:44:53,534 p=2566313 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 16:44:53,563 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:44:53,575 p=2566313 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 16:44:53,597 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:44:53,607 p=2566313 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 16:44:53,624 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:44:53,633 p=2566313 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 16:44:54,808 p=2566313 u=root n=ansible | changed: [lb1]
2025-09-28 16:44:54,839 p=2566313 u=root n=ansible | changed: [bda]
2025-09-28 16:44:54,853 p=2566313 u=root n=ansible | changed: [host3]
2025-09-28 16:44:54,884 p=2566313 u=root n=ansible | changed: [host2]
2025-09-28 16:44:54,992 p=2566313 u=root n=ansible | changed: [host1]
2025-09-28 16:44:55,008 p=2566313 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 16:44:55,023 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:44:55,037 p=2566313 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 16:44:57,272 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:44:57,277 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:44:57,290 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:44:57,372 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:44:57,503 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:44:57,528 p=2566313 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 16:44:58,777 p=2566313 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 16:44:58,905 p=2566313 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 16:44:58,907 p=2566313 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 16:44:58,928 p=2566313 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 16:44:59,004 p=2566313 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 16:44:59,604 p=2566313 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 16:44:59,662 p=2566313 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 16:44:59,705 p=2566313 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 16:44:59,714 p=2566313 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 16:44:59,780 p=2566313 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 16:44:59,933 p=2566313 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 16:45:00,018 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:45:00,089 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:45:00,091 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:45:00,101 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:45:00,145 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:00,165 p=2566313 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 16:45:01,001 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:45:01,026 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:45:01,092 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:45:01,168 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:01,204 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:45:01,242 p=2566313 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 16:45:02,021 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:45:02,099 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:45:02,197 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:45:02,369 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:02,411 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:45:02,439 p=2566313 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 16:45:02,585 p=2566313 u=root n=ansible | ok: [host1]
2025-09-28 16:45:02,650 p=2566313 u=root n=ansible | ok: [host2]
2025-09-28 16:45:02,706 p=2566313 u=root n=ansible | ok: [host3]
2025-09-28 16:45:02,709 p=2566313 u=root n=ansible | ok: [bda]
2025-09-28 16:45:02,741 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:02,772 p=2566313 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 16:45:02,861 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:45:02,932 p=2566313 u=root n=ansible | skipping: [host2]
2025-09-28 16:45:02,987 p=2566313 u=root n=ansible | skipping: [host3]
2025-09-28 16:45:03,022 p=2566313 u=root n=ansible | skipping: [bda]
2025-09-28 16:45:03,829 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:03,855 p=2566313 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 16:45:03,928 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:45:03,978 p=2566313 u=root n=ansible | skipping: [host2]
2025-09-28 16:45:04,026 p=2566313 u=root n=ansible | skipping: [host3]
2025-09-28 16:45:04,077 p=2566313 u=root n=ansible | skipping: [bda]
2025-09-28 16:45:04,123 p=2566313 u=root n=ansible | ok: [lb1]
2025-09-28 16:45:04,151 p=2566313 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 16:45:04,218 p=2566313 u=root n=ansible | skipping: [host1]
2025-09-28 16:45:04,288 p=2566313 u=root n=ansible | skipping: [host2]
2025-09-28 16:45:04,348 p=2566313 u=root n=ansible | skipping: [host3]
2025-09-28 16:45:04,396 p=2566313 u=root n=ansible | skipping: [bda]
2025-09-28 16:45:04,418 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:04,531 p=2566313 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************************************************************************************************************************************
2025-09-28 16:45:04,664 p=2566313 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:45:04,718 p=2566313 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:45:04,796 p=2566313 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:45:04,800 p=2566313 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:45:04,860 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:04,905 p=2566313 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************************************************************************************************************************************
2025-09-28 16:45:05,025 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:05,119 p=2566313 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:45:05,208 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:05,329 p=2566313 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 16:45:05,377 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:05,453 p=2566313 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 16:45:05,563 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:05,683 p=2566313 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 16:45:05,784 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:05,869 p=2566313 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************************************************************************************************************************************
2025-09-28 16:45:05,970 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:06,030 p=2566313 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************************************************************************************************************************************
2025-09-28 16:45:06,140 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:06,274 p=2566313 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 16:45:06,375 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:06,479 p=2566313 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************************************************************************************************************************************
2025-09-28 16:45:06,574 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:06,643 p=2566313 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************************************************************************************************************************************
2025-09-28 16:45:06,727 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:06,798 p=2566313 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:07,029 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:07,116 p=2566313 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:07,216 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:45:07,242 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 16:45:07,269 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 16:45:07,297 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 16:45:07,320 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:45:07,321 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:07,473 p=2566313 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 16:45:07,578 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:07,644 p=2566313 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 16:45:07,765 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:07,817 p=2566313 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 16:45:07,907 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:07,961 p=2566313 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:08,022 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:08,134 p=2566313 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 16:45:08,219 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:08,316 p=2566313 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 16:45:08,422 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:08,545 p=2566313 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 16:45:08,631 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:08,761 p=2566313 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 16:45:08,831 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:08,900 p=2566313 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 16:45:08,976 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,068 p=2566313 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 16:45:09,147 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,276 p=2566313 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 16:45:09,366 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,450 p=2566313 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 16:45:09,562 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,617 p=2566313 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 16:45:09,719 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,779 p=2566313 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:09,878 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:09,930 p=2566313 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 16:45:10,010 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:10,097 p=2566313 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:45:10,198 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:45:10,220 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 16:45:10,245 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:45:10,247 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:10,329 p=2566313 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:10,428 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:10,510 p=2566313 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 16:45:10,606 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:10,670 p=2566313 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 16:45:10,774 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 16:45:10,791 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 16:45:10,808 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 16:45:10,810 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:10,910 p=2566313 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 16:45:11,002 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:11,057 p=2566313 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 16:45:11,108 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:11,178 p=2566313 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:11,273 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:11,418 p=2566313 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:11,506 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:11,569 p=2566313 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 16:45:11,847 p=2566313 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 16:45:11,881 p=2566313 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 16:45:11,882 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:11,957 p=2566313 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 16:45:12,066 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:12,146 p=2566313 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 16:45:12,239 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:12,317 p=2566313 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 16:45:12,417 p=2566313 u=root n=ansible | failed: [lb1 -> {{ groups.get('physical_hosts', [inventory_hostname])[0] }}] (item=None) => {"ansible_loop_var": "node", "changed": false, "msg": "Failed to template loop_control.label: 'None' has no attribute 'name'. 'None' has no attribute 'name'", "node": null, "skip_reason": "Conditional result was False"}
2025-09-28 16:45:12,440 p=2566313 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 16:45:12,576 p=2566313 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:45:12,636 p=2566313 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:45:12,686 p=2566313 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:45:12,689 p=2566313 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:45:12,770 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:12,815 p=2566313 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 16:45:12,917 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:12,930 p=2566313 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************************************************************************************************************************************
2025-09-28 16:45:13,012 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,036 p=2566313 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:13,147 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,161 p=2566313 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 16:45:13,239 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,254 p=2566313 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************************************************************************************************************************************
2025-09-28 16:45:13,339 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,354 p=2566313 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************************************************************************************************************************************
2025-09-28 16:45:13,444 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,468 p=2566313 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 16:45:13,580 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 16:45:13,592 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 16:45:13,606 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 16:45:13,619 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 16:45:13,633 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 16:45:13,644 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 16:45:13,660 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 16:45:13,664 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,703 p=2566313 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************************************************************************************************************************************
2025-09-28 16:45:13,801 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,826 p=2566313 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:13,929 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:13,955 p=2566313 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:14,041 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,065 p=2566313 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************************************************************************************************************************************
2025-09-28 16:45:14,125 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,147 p=2566313 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************************************************************************************************************************************
2025-09-28 16:45:14,204 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,217 p=2566313 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************************************************************************************************************************************
2025-09-28 16:45:14,317 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,346 p=2566313 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:14,457 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,482 p=2566313 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************************************************************************************************************************************
2025-09-28 16:45:14,538 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,553 p=2566313 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 16:45:14,634 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,648 p=2566313 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 16:45:14,736 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,752 p=2566313 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 16:45:14,814 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,842 p=2566313 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************************************************************************************************************************************
2025-09-28 16:45:14,902 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:14,929 p=2566313 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 16:45:15,029 p=2566313 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 16:45:15,049 p=2566313 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 16:45:15,051 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,075 p=2566313 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 16:45:15,147 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 16:45:15,162 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 16:45:15,164 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,178 p=2566313 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 16:45:15,257 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,287 p=2566313 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 16:45:15,345 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,371 p=2566313 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 16:45:15,453 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,489 p=2566313 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 16:45:15,586 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,620 p=2566313 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 16:45:15,702 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,725 p=2566313 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 16:45:15,824 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,845 p=2566313 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 16:45:15,937 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:15,946 p=2566313 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 16:45:16,031 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,059 p=2566313 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************************************************************************************************************************************
2025-09-28 16:45:16,110 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,137 p=2566313 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************************************************************************************************************************************
2025-09-28 16:45:16,229 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,244 p=2566313 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************************************************************************************************************************************
2025-09-28 16:45:16,323 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,353 p=2566313 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************************************************************************************************************************************
2025-09-28 16:45:16,436 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,458 p=2566313 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************************************************************************************************************************************
2025-09-28 16:45:16,541 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,562 p=2566313 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:16,645 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,659 p=2566313 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 16:45:16,781 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:16,829 p=2566313 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 16:45:16,995 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,018 p=2566313 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 16:45:17,071 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,091 p=2566313 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 16:45:17,182 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,196 p=2566313 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 16:45:17,282 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,311 p=2566313 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 16:45:17,390 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,419 p=2566313 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 16:45:17,518 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,585 p=2566313 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:17,636 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,649 p=2566313 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 16:45:17,701 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,715 p=2566313 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 16:45:17,770 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:17,789 p=2566313 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 16:45:17,985 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,003 p=2566313 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 16:45:18,135 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,173 p=2566313 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 16:45:18,304 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,322 p=2566313 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 16:45:18,402 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,422 p=2566313 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 16:45:18,510 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,546 p=2566313 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 16:45:18,666 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,698 p=2566313 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 16:45:18,801 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,815 p=2566313 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 16:45:18,863 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,877 p=2566313 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 16:45:18,953 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:18,978 p=2566313 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 16:45:19,035 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,067 p=2566313 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 16:45:19,165 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,209 p=2566313 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 16:45:19,320 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,354 p=2566313 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 16:45:19,432 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,464 p=2566313 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 16:45:19,552 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,576 p=2566313 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 16:45:19,678 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,700 p=2566313 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 16:45:19,801 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,837 p=2566313 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 16:45:19,904 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:19,929 p=2566313 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 16:45:19,997 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,019 p=2566313 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 16:45:20,085 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,110 p=2566313 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 16:45:20,181 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,202 p=2566313 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 16:45:20,294 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,319 p=2566313 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 16:45:20,441 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 16:45:20,480 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 16:45:20,507 p=2566313 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 16:45:20,509 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,537 p=2566313 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 16:45:20,629 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,652 p=2566313 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 16:45:20,754 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,786 p=2566313 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 16:45:20,870 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,893 p=2566313 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 16:45:20,972 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:20,992 p=2566313 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 16:45:21,044 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:21,063 p=2566313 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 16:45:21,154 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:21,189 p=2566313 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 16:45:21,282 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:21,308 p=2566313 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 16:45:21,400 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:21,495 p=2566313 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 16:45:21,565 p=2566313 u=root n=ansible | skipping: [lb1]
2025-09-28 16:45:21,613 p=2566313 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 16:45:21,614 p=2566313 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:45:21,614 p=2566313 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:45:21,614 p=2566313 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:45:21,615 p=2566313 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:45:21,615 p=2566313 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=116  rescued=1    ignored=0   
2025-09-28 16:56:29,078 p=2568469 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 16:56:29,288 p=2568469 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 16:56:32,929 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:33,085 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:33,131 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:33,224 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:33,398 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:33,412 p=2568469 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 16:56:33,536 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:33,602 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:33,664 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:33,668 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:33,702 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:33,804 p=2568469 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 16:56:35,904 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:35,908 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:36,172 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:36,208 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:36,294 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:36,309 p=2568469 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 16:56:36,413 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:36,455 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:36,515 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:36,519 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:36,582 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:36,608 p=2568469 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 16:56:36,648 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:36,669 p=2568469 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 16:56:36,734 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:36,760 p=2568469 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 16:56:36,794 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:36,808 p=2568469 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 16:56:37,816 p=2568469 u=root n=ansible | changed: [host1]
2025-09-28 16:56:37,854 p=2568469 u=root n=ansible | changed: [host2]
2025-09-28 16:56:37,861 p=2568469 u=root n=ansible | changed: [host3]
2025-09-28 16:56:37,866 p=2568469 u=root n=ansible | changed: [lb1]
2025-09-28 16:56:37,959 p=2568469 u=root n=ansible | changed: [bda]
2025-09-28 16:56:37,978 p=2568469 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 16:56:37,998 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:38,014 p=2568469 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 16:56:39,930 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:39,932 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:39,954 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:40,024 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:40,034 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:40,068 p=2568469 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:41,183 p=2568469 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 16:56:41,190 p=2568469 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 16:56:41,279 p=2568469 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 16:56:41,412 p=2568469 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 16:56:41,505 p=2568469 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 16:56:41,968 p=2568469 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 16:56:42,043 p=2568469 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 16:56:42,059 p=2568469 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 16:56:42,065 p=2568469 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 16:56:42,525 p=2568469 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 16:56:42,654 p=2568469 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 16:56:42,772 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:42,837 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:42,895 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:42,898 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:42,937 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:42,969 p=2568469 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 16:56:43,721 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:43,892 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:43,898 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:43,974 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:43,978 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:44,006 p=2568469 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 16:56:44,829 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:44,919 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:44,922 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:44,980 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:45,092 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:45,130 p=2568469 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 16:56:45,241 p=2568469 u=root n=ansible | ok: [host1]
2025-09-28 16:56:45,276 p=2568469 u=root n=ansible | ok: [host2]
2025-09-28 16:56:45,308 p=2568469 u=root n=ansible | ok: [host3]
2025-09-28 16:56:45,320 p=2568469 u=root n=ansible | ok: [bda]
2025-09-28 16:56:45,351 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:45,370 p=2568469 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 16:56:45,430 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:45,553 p=2568469 u=root n=ansible | skipping: [host2]
2025-09-28 16:56:45,617 p=2568469 u=root n=ansible | skipping: [host3]
2025-09-28 16:56:45,621 p=2568469 u=root n=ansible | skipping: [bda]
2025-09-28 16:56:46,398 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:46,415 p=2568469 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 16:56:46,498 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:46,537 p=2568469 u=root n=ansible | skipping: [host2]
2025-09-28 16:56:46,572 p=2568469 u=root n=ansible | skipping: [host3]
2025-09-28 16:56:46,575 p=2568469 u=root n=ansible | skipping: [bda]
2025-09-28 16:56:46,626 p=2568469 u=root n=ansible | ok: [lb1]
2025-09-28 16:56:46,643 p=2568469 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 16:56:46,731 p=2568469 u=root n=ansible | skipping: [host1]
2025-09-28 16:56:46,779 p=2568469 u=root n=ansible | skipping: [host2]
2025-09-28 16:56:46,816 p=2568469 u=root n=ansible | skipping: [host3]
2025-09-28 16:56:46,832 p=2568469 u=root n=ansible | skipping: [bda]
2025-09-28 16:56:46,847 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:46,979 p=2568469 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************************************************************************************************************************************
2025-09-28 16:56:47,067 p=2568469 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:56:47,098 p=2568469 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:56:47,137 p=2568469 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:56:47,141 p=2568469 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:56:47,208 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:47,260 p=2568469 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************************************************************************************************************************************
2025-09-28 16:56:47,335 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:47,438 p=2568469 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:56:47,563 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:47,664 p=2568469 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 16:56:47,720 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:47,823 p=2568469 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 16:56:47,934 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,073 p=2568469 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 16:56:48,198 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,295 p=2568469 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************************************************************************************************************************************
2025-09-28 16:56:48,373 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,476 p=2568469 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************************************************************************************************************************************
2025-09-28 16:56:48,531 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,609 p=2568469 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 16:56:48,714 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,776 p=2568469 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************************************************************************************************************************************
2025-09-28 16:56:48,884 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:48,994 p=2568469 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************************************************************************************************************************************
2025-09-28 16:56:49,101 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:49,285 p=2568469 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:49,381 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:49,465 p=2568469 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:49,577 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:56:49,594 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 16:56:49,614 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 16:56:49,657 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 16:56:49,684 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:56:49,686 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:49,776 p=2568469 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 16:56:49,843 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:49,907 p=2568469 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 16:56:50,007 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:50,085 p=2568469 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 16:56:50,193 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:50,342 p=2568469 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:50,464 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:50,583 p=2568469 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 16:56:50,663 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:50,767 p=2568469 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 16:56:50,830 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:50,959 p=2568469 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 16:56:51,063 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,146 p=2568469 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 16:56:51,209 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,291 p=2568469 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 16:56:51,381 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,449 p=2568469 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 16:56:51,504 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,600 p=2568469 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 16:56:51,697 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,782 p=2568469 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 16:56:51,859 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:51,932 p=2568469 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 16:56:52,003 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:52,102 p=2568469 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 16:56:52,191 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:52,302 p=2568469 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 16:56:52,414 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:52,498 p=2568469 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:56:52,622 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:56:52,640 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 16:56:52,669 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:56:52,672 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:52,822 p=2568469 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:52,927 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:52,982 p=2568469 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 16:56:53,058 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:53,198 p=2568469 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 16:56:53,321 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 16:56:53,369 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 16:56:53,396 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 16:56:53,398 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:53,489 p=2568469 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 16:56:53,540 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:53,673 p=2568469 u=root n=ansible | TASK [install_elastic : Set primary host fact] **********************************************************************************************************************************************************************************************
2025-09-28 16:56:53,737 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:53,865 p=2568469 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 16:56:53,929 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:54,013 p=2568469 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 16:56:54,225 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:54,302 p=2568469 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 16:56:54,356 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:54,516 p=2568469 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 16:56:54,606 p=2568469 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 16:56:54,655 p=2568469 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 16:56:54,657 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:54,764 p=2568469 u=root n=ansible | TASK [install_elastic : Set primary host fact for delegation] *******************************************************************************************************************************************************************************
2025-09-28 16:56:54,867 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:54,930 p=2568469 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 16:56:54,998 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:55,097 p=2568469 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 16:56:55,178 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:55,264 p=2568469 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 16:56:55,390 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:55,462 p=2568469 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:55,522 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:55,643 p=2568469 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************************************************************************************************************************************
2025-09-28 16:56:55,729 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:55,838 p=2568469 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************************************************************************************************************************************
2025-09-28 16:56:55,947 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:56,084 p=2568469 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************************************************************************************************************************************
2025-09-28 16:56:56,166 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:56,285 p=2568469 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************************************************************************************************************************************
2025-09-28 16:56:56,402 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:56,536 p=2568469 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************************************************************************************************************************************
2025-09-28 16:56:56,663 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:56,811 p=2568469 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************************************************************************************************************************************
2025-09-28 16:56:56,941 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,028 p=2568469 u=root n=ansible | TASK [install_elastic : Set primary host fact] **********************************************************************************************************************************************************************************************
2025-09-28 16:56:57,131 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,234 p=2568469 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************************************************************************************************************************************
2025-09-28 16:56:57,354 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,469 p=2568469 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************************************************************************************************************************************
2025-09-28 16:56:57,518 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,623 p=2568469 u=root n=ansible | TASK [install_elastic : Define has_elasticsearch_nodes fact] ********************************************************************************************************************************************************************************
2025-09-28 16:56:57,729 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,810 p=2568469 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************************************************************************************************************************************
2025-09-28 16:56:57,875 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:57,951 p=2568469 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************************************************************************************************************************************
2025-09-28 16:56:58,016 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,085 p=2568469 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************************************************************************************************************************************
2025-09-28 16:56:58,174 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,295 p=2568469 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************************************************************************************************************************************
2025-09-28 16:56:58,416 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,492 p=2568469 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 16:56:58,597 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,660 p=2568469 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for {{ deployment_type }} deployment] **************************************************************************************************************************************************
2025-09-28 16:56:58,747 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,824 p=2568469 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 16:56:58,884 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:58,947 p=2568469 u=root n=ansible | TASK [install_elastic : Display docker-compose creation status] *****************************************************************************************************************************************************************************
2025-09-28 16:56:59,003 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:59,055 p=2568469 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 16:56:59,125 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:59,223 p=2568469 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:59,315 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:59,455 p=2568469 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************************************************************************************************************************************
2025-09-28 16:56:59,562 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:56:59,700 p=2568469 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************************************************************************************************************************************
2025-09-28 16:56:59,949 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,070 p=2568469 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************************************************************************************************************************************
2025-09-28 16:57:00,157 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,280 p=2568469 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************************************************************************************************************************************
2025-09-28 16:57:00,395 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,481 p=2568469 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 16:57:00,552 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,625 p=2568469 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 16:57:00,743 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,806 p=2568469 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************************************************************************************************************************************
2025-09-28 16:57:00,903 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:00,971 p=2568469 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************************************************************************************************************************************
2025-09-28 16:57:01,033 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,095 p=2568469 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************************************************************************************************************************************
2025-09-28 16:57:01,150 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,210 p=2568469 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 16:57:01,272 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,352 p=2568469 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************************************************************************************************************************************
2025-09-28 16:57:01,424 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,534 p=2568469 u=root n=ansible | TASK [install_elastic : Remove any existing docker-compose file to force regeneration] ******************************************************************************************************************************************************
2025-09-28 16:57:01,632 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,696 p=2568469 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************************************************************************************************************************************
2025-09-28 16:57:01,751 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,807 p=2568469 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************************************************************************************************************************************
2025-09-28 16:57:01,863 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:01,913 p=2568469 u=root n=ansible | TASK [install_elastic : Check if docker-compose file was created] ***************************************************************************************************************************************************************************
2025-09-28 16:57:02,005 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:02,123 p=2568469 u=root n=ansible | TASK [install_elastic : Fail if compose file was not created] *******************************************************************************************************************************************************************************
2025-09-28 16:57:02,199 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:02,327 p=2568469 u=root n=ansible | TASK [install_elastic : Validate YAML syntax using docker-compose] **************************************************************************************************************************************************************************
2025-09-28 16:57:02,445 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:02,508 p=2568469 u=root n=ansible | TASK [install_elastic : Display validation success] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:02,572 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:02,685 p=2568469 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************************************************************************************************************************************
2025-09-28 16:57:02,782 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:02,913 p=2568469 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************************************************************************************************************************************
2025-09-28 16:57:02,977 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:03,030 p=2568469 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************************************************************************************************************************************
2025-09-28 16:57:03,141 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:03,207 p=2568469 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-28 16:57:03,307 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:03,433 p=2568469 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-28 16:57:03,507 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:03,670 p=2568469 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************************************************************************************************************************************
2025-09-28 16:57:03,744 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:03,810 p=2568469 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:03,989 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,013 p=2568469 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 16:57:04,152 p=2568469 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:57:04,206 p=2568469 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:57:04,242 p=2568469 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:57:04,243 p=2568469 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:57:04,288 p=2568469 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 16:57:04,369 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,408 p=2568469 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************************************************************************************************************************************
2025-09-28 16:57:04,513 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,553 p=2568469 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 16:57:04,656 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,682 p=2568469 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 16:57:04,768 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,787 p=2568469 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************************************************************************************************************************************
2025-09-28 16:57:04,880 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:04,912 p=2568469 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************************************************************************************************************************************
2025-09-28 16:57:05,029 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,050 p=2568469 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 16:57:05,168 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 16:57:05,193 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 16:57:05,226 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 16:57:05,253 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 16:57:05,278 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 16:57:05,304 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 16:57:05,341 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 16:57:05,345 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,382 p=2568469 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************************************************************************************************************************************
2025-09-28 16:57:05,476 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,504 p=2568469 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:57:05,594 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,619 p=2568469 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:57:05,716 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,732 p=2568469 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:05,794 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,831 p=2568469 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************************************************************************************************************************************
2025-09-28 16:57:05,891 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,913 p=2568469 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************************************************************************************************************************************
2025-09-28 16:57:05,982 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:05,998 p=2568469 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 16:57:06,072 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,095 p=2568469 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************************************************************************************************************************************
2025-09-28 16:57:06,193 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,210 p=2568469 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:06,300 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,325 p=2568469 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 16:57:06,413 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,436 p=2568469 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 16:57:06,536 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,550 p=2568469 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************************************************************************************************************************************
2025-09-28 16:57:06,640 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,666 p=2568469 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:06,773 p=2568469 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 16:57:06,794 p=2568469 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 16:57:06,797 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,820 p=2568469 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 16:57:06,920 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 16:57:06,940 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 16:57:06,943 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:06,970 p=2568469 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 16:57:07,068 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,096 p=2568469 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 16:57:07,161 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,198 p=2568469 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 16:57:07,296 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,320 p=2568469 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 16:57:07,421 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,449 p=2568469 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 16:57:07,557 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,572 p=2568469 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 16:57:07,631 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,659 p=2568469 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 16:57:07,741 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,768 p=2568469 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 16:57:07,896 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:07,935 p=2568469 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************************************************************************************************************************************
2025-09-28 16:57:08,039 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,062 p=2568469 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************************************************************************************************************************************
2025-09-28 16:57:08,153 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,179 p=2568469 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************************************************************************************************************************************
2025-09-28 16:57:08,270 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,296 p=2568469 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************************************************************************************************************************************
2025-09-28 16:57:08,395 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,422 p=2568469 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************************************************************************************************************************************
2025-09-28 16:57:08,515 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,543 p=2568469 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 16:57:08,648 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,673 p=2568469 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 16:57:08,778 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,806 p=2568469 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 16:57:08,866 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,879 p=2568469 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 16:57:08,965 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:08,990 p=2568469 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 16:57:09,049 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,080 p=2568469 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 16:57:09,175 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,201 p=2568469 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 16:57:09,293 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,316 p=2568469 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 16:57:09,397 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,420 p=2568469 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 16:57:09,509 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,534 p=2568469 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 16:57:09,635 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,659 p=2568469 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 16:57:09,767 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,790 p=2568469 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 16:57:09,885 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:09,923 p=2568469 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 16:57:10,025 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,056 p=2568469 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 16:57:10,156 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,169 p=2568469 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 16:57:10,258 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,277 p=2568469 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 16:57:10,391 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,428 p=2568469 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 16:57:10,530 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,547 p=2568469 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 16:57:10,658 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,688 p=2568469 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 16:57:10,786 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:10,813 p=2568469 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 16:57:11,031 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,046 p=2568469 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 16:57:11,151 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,170 p=2568469 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 16:57:11,255 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,276 p=2568469 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 16:57:11,366 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,383 p=2568469 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 16:57:11,477 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,494 p=2568469 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 16:57:11,606 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,635 p=2568469 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 16:57:11,727 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,747 p=2568469 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 16:57:11,864 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:11,901 p=2568469 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 16:57:11,992 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,023 p=2568469 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 16:57:12,126 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,164 p=2568469 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 16:57:12,228 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,253 p=2568469 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 16:57:12,363 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,385 p=2568469 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 16:57:12,497 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,531 p=2568469 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 16:57:12,654 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 16:57:12,666 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 16:57:12,678 p=2568469 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 16:57:12,681 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,724 p=2568469 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 16:57:12,816 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,833 p=2568469 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 16:57:12,920 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:12,950 p=2568469 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 16:57:13,007 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,020 p=2568469 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 16:57:13,074 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,099 p=2568469 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 16:57:13,159 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,183 p=2568469 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 16:57:13,254 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,281 p=2568469 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 16:57:13,344 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,392 p=2568469 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 16:57:13,489 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,572 p=2568469 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 16:57:13,642 p=2568469 u=root n=ansible | skipping: [lb1]
2025-09-28 16:57:13,678 p=2568469 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 16:57:13,679 p=2568469 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:57:13,679 p=2568469 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:57:13,679 p=2568469 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:57:13,680 p=2568469 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:57:13,680 p=2568469 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=164  rescued=0    ignored=0   
2025-09-28 16:58:45,065 p=2570393 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************************************************************************************************************************************
2025-09-28 16:58:45,352 p=2570393 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 16:58:48,869 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:48,906 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:48,951 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:49,030 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:49,207 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:49,223 p=2570393 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 16:58:49,268 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:49,327 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:49,356 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:49,360 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:49,387 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:49,568 p=2570393 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 16:58:51,670 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:51,795 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:51,874 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:52,056 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:52,062 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:52,088 p=2570393 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 16:58:52,213 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:52,270 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:52,273 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:52,297 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:52,339 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:52,354 p=2570393 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 16:58:52,375 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:58:52,389 p=2570393 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 16:58:52,409 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:58:52,421 p=2570393 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 16:58:52,444 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:58:52,456 p=2570393 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 16:58:53,541 p=2570393 u=root n=ansible | changed: [host1]
2025-09-28 16:58:53,614 p=2570393 u=root n=ansible | changed: [host3]
2025-09-28 16:58:53,639 p=2570393 u=root n=ansible | changed: [bda]
2025-09-28 16:58:53,661 p=2570393 u=root n=ansible | changed: [host2]
2025-09-28 16:58:53,738 p=2570393 u=root n=ansible | changed: [lb1]
2025-09-28 16:58:53,757 p=2570393 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 16:58:53,778 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:58:53,795 p=2570393 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 16:58:55,843 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:55,844 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:55,845 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:55,894 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:55,932 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:55,949 p=2570393 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 16:58:57,177 p=2570393 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 16:58:57,182 p=2570393 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 16:58:57,220 p=2570393 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 16:58:57,230 p=2570393 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 16:58:57,338 p=2570393 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 16:58:57,851 p=2570393 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 16:58:57,859 p=2570393 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 16:58:57,887 p=2570393 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 16:58:57,980 p=2570393 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 16:58:58,167 p=2570393 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 16:58:58,242 p=2570393 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 16:58:58,283 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:58,313 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:58,382 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:58,396 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:58,403 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:58,428 p=2570393 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 16:58:59,186 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:58:59,202 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:58:59,312 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:58:59,347 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:58:59,473 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:58:59,489 p=2570393 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 16:59:00,321 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:59:00,402 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:59:00,423 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:59:00,464 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:59:00,518 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:59:00,545 p=2570393 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 16:59:00,624 p=2570393 u=root n=ansible | ok: [host1]
2025-09-28 16:59:00,709 p=2570393 u=root n=ansible | ok: [host2]
2025-09-28 16:59:00,765 p=2570393 u=root n=ansible | ok: [host3]
2025-09-28 16:59:00,768 p=2570393 u=root n=ansible | ok: [bda]
2025-09-28 16:59:00,820 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:59:00,843 p=2570393 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 16:59:00,959 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:59:01,003 p=2570393 u=root n=ansible | skipping: [host2]
2025-09-28 16:59:01,052 p=2570393 u=root n=ansible | skipping: [host3]
2025-09-28 16:59:01,056 p=2570393 u=root n=ansible | skipping: [bda]
2025-09-28 16:59:01,774 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:59:01,788 p=2570393 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 16:59:01,869 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:59:01,902 p=2570393 u=root n=ansible | skipping: [host2]
2025-09-28 16:59:01,936 p=2570393 u=root n=ansible | skipping: [host3]
2025-09-28 16:59:01,944 p=2570393 u=root n=ansible | skipping: [bda]
2025-09-28 16:59:01,988 p=2570393 u=root n=ansible | ok: [lb1]
2025-09-28 16:59:02,012 p=2570393 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 16:59:02,084 p=2570393 u=root n=ansible | skipping: [host1]
2025-09-28 16:59:02,142 p=2570393 u=root n=ansible | skipping: [host2]
2025-09-28 16:59:02,263 p=2570393 u=root n=ansible | skipping: [host3]
2025-09-28 16:59:02,266 p=2570393 u=root n=ansible | skipping: [bda]
2025-09-28 16:59:02,315 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:02,490 p=2570393 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************************************************************************************************************************************
2025-09-28 16:59:02,655 p=2570393 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:59:02,690 p=2570393 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:59:02,695 p=2570393 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:59:02,706 p=2570393 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 16:59:02,771 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:02,851 p=2570393 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************************************************************************************************************************************
2025-09-28 16:59:02,952 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,048 p=2570393 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:59:03,143 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,237 p=2570393 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 16:59:03,279 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,336 p=2570393 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************************************************************************************************************************************
2025-09-28 16:59:03,453 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,545 p=2570393 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 16:59:03,630 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,721 p=2570393 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************************************************************************************************************************************
2025-09-28 16:59:03,839 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:03,928 p=2570393 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************************************************************************************************************************************
2025-09-28 16:59:04,033 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:04,119 p=2570393 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:04,216 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:04,340 p=2570393 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************************************************************************************************************************************
2025-09-28 16:59:04,479 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:04,583 p=2570393 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************************************************************************************************************************************
2025-09-28 16:59:04,685 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:04,797 p=2570393 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:04,889 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:04,981 p=2570393 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:05,115 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:59:05,143 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 16:59:05,179 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 16:59:05,209 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 16:59:05,236 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:59:05,239 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:05,370 p=2570393 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 16:59:05,496 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:05,584 p=2570393 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 16:59:05,687 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:05,770 p=2570393 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 16:59:05,888 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:05,979 p=2570393 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:06,078 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:06,201 p=2570393 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 16:59:06,317 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:06,506 p=2570393 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 16:59:06,588 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:06,672 p=2570393 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************************************************************************************************************************************
2025-09-28 16:59:06,765 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:06,888 p=2570393 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************************************************************************************************************************************
2025-09-28 16:59:07,026 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:07,116 p=2570393 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************************************************************************************************************************************
2025-09-28 16:59:07,214 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:07,306 p=2570393 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************************************************************************************************************************************
2025-09-28 16:59:07,399 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:07,541 p=2570393 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 16:59:07,664 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:07,753 p=2570393 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 16:59:07,852 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:07,937 p=2570393 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************************************************************************************************************************************
2025-09-28 16:59:08,033 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:08,133 p=2570393 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:08,228 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:08,370 p=2570393 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************************************************************************************************************************************
2025-09-28 16:59:08,505 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:08,598 p=2570393 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************************************************************************************************************************************
2025-09-28 16:59:08,668 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 16:59:08,689 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 16:59:08,712 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 16:59:08,714 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:08,786 p=2570393 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:08,879 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:08,960 p=2570393 u=root n=ansible | TASK [install_elastic : Define elasticsearch node facts] ************************************************************************************************************************************************************************************
2025-09-28 16:59:09,014 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:09,104 p=2570393 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 16:59:09,198 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:09,294 p=2570393 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************************************************************************************************************************************
2025-09-28 16:59:09,352 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 16:59:09,363 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 16:59:09,393 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 16:59:09,395 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:09,448 p=2570393 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************************************************************************************************************************************
2025-09-28 16:59:09,517 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:09,643 p=2570393 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 16:59:09,751 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:09,857 p=2570393 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:09,977 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,076 p=2570393 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:10,171 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,274 p=2570393 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************************************************************************************************************************************
2025-09-28 16:59:10,391 p=2570393 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 16:59:10,399 p=2570393 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 16:59:10,401 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,488 p=2570393 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************************************************************************************************************************************
2025-09-28 16:59:10,581 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,677 p=2570393 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************************************************************************************************************************************
2025-09-28 16:59:10,770 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,823 p=2570393 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************************************************************************************************************************************
2025-09-28 16:59:10,910 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:10,968 p=2570393 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:11,069 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:11,162 p=2570393 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************************************************************************************************************************************
2025-09-28 16:59:11,259 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:11,370 p=2570393 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************************************************************************************************************************************
2025-09-28 16:59:11,504 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:11,604 p=2570393 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************************************************************************************************************************************
2025-09-28 16:59:11,660 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:11,775 p=2570393 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************************************************************************************************************************************
2025-09-28 16:59:11,877 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:11,984 p=2570393 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************************************************************************************************************************************
2025-09-28 16:59:12,043 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,103 p=2570393 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************************************************************************************************************************************
2025-09-28 16:59:12,202 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,300 p=2570393 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************************************************************************************************************************************
2025-09-28 16:59:12,363 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,466 p=2570393 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************************************************************************************************************************************
2025-09-28 16:59:12,520 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,711 p=2570393 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************************************************************************************************************************************
2025-09-28 16:59:12,747 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,802 p=2570393 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************************************************************************************************************************************
2025-09-28 16:59:12,855 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:12,932 p=2570393 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************************************************************************************************************************************
2025-09-28 16:59:13,029 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:13,111 p=2570393 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************************************************************************************************************************************
2025-09-28 16:59:13,217 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:13,320 p=2570393 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 16:59:13,404 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:13,514 p=2570393 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for {{ deployment_type }} deployment] **************************************************************************************************************************************************
2025-09-28 16:59:13,576 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:13,686 p=2570393 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 16:59:13,785 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:13,881 p=2570393 u=root n=ansible | TASK [install_elastic : Display docker-compose creation status] *****************************************************************************************************************************************************************************
2025-09-28 16:59:13,982 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,125 p=2570393 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 16:59:14,187 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,250 p=2570393 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:14,333 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,417 p=2570393 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************************************************************************************************************************************
2025-09-28 16:59:14,499 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,605 p=2570393 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:14,707 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,756 p=2570393 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************************************************************************************************************************************
2025-09-28 16:59:14,846 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:14,961 p=2570393 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************************************************************************************************************************************
2025-09-28 16:59:15,039 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,181 p=2570393 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 16:59:15,252 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,328 p=2570393 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************************************************************************************************************************************
2025-09-28 16:59:15,432 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,483 p=2570393 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************************************************************************************************************************************
2025-09-28 16:59:15,550 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,610 p=2570393 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************************************************************************************************************************************
2025-09-28 16:59:15,671 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,705 p=2570393 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************************************************************************************************************************************
2025-09-28 16:59:15,750 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,792 p=2570393 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:15,873 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:15,985 p=2570393 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************************************************************************************************************************************
2025-09-28 16:59:16,051 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,144 p=2570393 u=root n=ansible | TASK [install_elastic : Remove any existing docker-compose file to force regeneration] ******************************************************************************************************************************************************
2025-09-28 16:59:16,221 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,311 p=2570393 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************************************************************************************************************************************
2025-09-28 16:59:16,365 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,466 p=2570393 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************************************************************************************************************************************
2025-09-28 16:59:16,537 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,612 p=2570393 u=root n=ansible | TASK [install_elastic : Check if docker-compose file was created] ***************************************************************************************************************************************************************************
2025-09-28 16:59:16,679 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,757 p=2570393 u=root n=ansible | TASK [install_elastic : Fail if compose file was not created] *******************************************************************************************************************************************************************************
2025-09-28 16:59:16,833 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:16,920 p=2570393 u=root n=ansible | TASK [install_elastic : Validate YAML syntax using docker-compose] **************************************************************************************************************************************************************************
2025-09-28 16:59:17,027 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,068 p=2570393 u=root n=ansible | TASK [install_elastic : Display validation success] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:17,290 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,376 p=2570393 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:17,433 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,526 p=2570393 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************************************************************************************************************************************
2025-09-28 16:59:17,619 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,683 p=2570393 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************************************************************************************************************************************
2025-09-28 16:59:17,733 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,793 p=2570393 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-28 16:59:17,860 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:17,934 p=2570393 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-28 16:59:18,023 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,082 p=2570393 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************************************************************************************************************************************
2025-09-28 16:59:18,161 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,222 p=2570393 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:18,308 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,333 p=2570393 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 16:59:18,409 p=2570393 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:59:18,522 p=2570393 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:59:18,559 p=2570393 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:59:18,560 p=2570393 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 16:59:18,592 p=2570393 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 16:59:18,653 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,674 p=2570393 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************************************************************************************************************************************
2025-09-28 16:59:18,769 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,792 p=2570393 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:18,892 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,921 p=2570393 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 16:59:18,969 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:18,993 p=2570393 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************************************************************************************************************************************
2025-09-28 16:59:19,074 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,092 p=2570393 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************************************************************************************************************************************
2025-09-28 16:59:19,172 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,195 p=2570393 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************************************************************************************************************************************
2025-09-28 16:59:19,310 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 16:59:19,335 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 16:59:19,361 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 16:59:19,392 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 16:59:19,416 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 16:59:19,432 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 16:59:19,441 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 16:59:19,442 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,484 p=2570393 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************************************************************************************************************************************
2025-09-28 16:59:19,579 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,602 p=2570393 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:19,667 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,693 p=2570393 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:19,760 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,783 p=2570393 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:19,848 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,860 p=2570393 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************************************************************************************************************************************
2025-09-28 16:59:19,972 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:19,990 p=2570393 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************************************************************************************************************************************
2025-09-28 16:59:20,088 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,119 p=2570393 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:20,235 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,251 p=2570393 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************************************************************************************************************************************
2025-09-28 16:59:20,336 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,365 p=2570393 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:20,468 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,486 p=2570393 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 16:59:20,575 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,591 p=2570393 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 16:59:20,672 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,698 p=2570393 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************************************************************************************************************************************
2025-09-28 16:59:20,755 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,782 p=2570393 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:20,871 p=2570393 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 16:59:20,883 p=2570393 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 16:59:20,885 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:20,902 p=2570393 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:20,996 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 16:59:21,015 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 16:59:21,017 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,038 p=2570393 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 16:59:21,130 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,152 p=2570393 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 16:59:21,235 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,247 p=2570393 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 16:59:21,335 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,349 p=2570393 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 16:59:21,425 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,459 p=2570393 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 16:59:21,567 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,582 p=2570393 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 16:59:21,682 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,698 p=2570393 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************************************************************************************************************************************
2025-09-28 16:59:21,787 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,800 p=2570393 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************************************************************************************************************************************
2025-09-28 16:59:21,886 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:21,908 p=2570393 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************************************************************************************************************************************
2025-09-28 16:59:21,991 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,012 p=2570393 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************************************************************************************************************************************
2025-09-28 16:59:22,071 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,086 p=2570393 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************************************************************************************************************************************
2025-09-28 16:59:22,177 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,199 p=2570393 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************************************************************************************************************************************
2025-09-28 16:59:22,259 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,280 p=2570393 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************************************************************************************************************************************
2025-09-28 16:59:22,374 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,396 p=2570393 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:22,453 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,470 p=2570393 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************************************************************************************************************************************
2025-09-28 16:59:22,561 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,583 p=2570393 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************************************************************************************************************************************
2025-09-28 16:59:22,664 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,780 p=2570393 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************************************************************************************************************************************
2025-09-28 16:59:22,860 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,882 p=2570393 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************************************************************************************************************************************
2025-09-28 16:59:22,947 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:22,970 p=2570393 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************************************************************************************************************************************
2025-09-28 16:59:23,029 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,065 p=2570393 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************************************************************************************************************************************
2025-09-28 16:59:23,168 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,190 p=2570393 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************************************************************************************************************************************
2025-09-28 16:59:23,291 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,324 p=2570393 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:23,426 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,446 p=2570393 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************************************************************************************************************************************
2025-09-28 16:59:23,505 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,530 p=2570393 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************************************************************************************************************************************
2025-09-28 16:59:23,615 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,643 p=2570393 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************************************************************************************************************************************
2025-09-28 16:59:23,722 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,746 p=2570393 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************************************************************************************************************************************
2025-09-28 16:59:23,845 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,872 p=2570393 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************************************************************************************************************************************
2025-09-28 16:59:23,968 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:23,997 p=2570393 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************************************************************************************************************************************
2025-09-28 16:59:24,089 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,114 p=2570393 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************************************************************************************************************************************
2025-09-28 16:59:24,206 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,229 p=2570393 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************************************************************************************************************************************
2025-09-28 16:59:24,316 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,338 p=2570393 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************************************************************************************************************************************
2025-09-28 16:59:24,428 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,457 p=2570393 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************************************************************************************************************************************
2025-09-28 16:59:24,571 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,594 p=2570393 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************************************************************************************************************************************
2025-09-28 16:59:24,684 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,706 p=2570393 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 16:59:24,795 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,826 p=2570393 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************************************************************************************************************************************
2025-09-28 16:59:24,915 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:24,945 p=2570393 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************************************************************************************************************************************
2025-09-28 16:59:25,034 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,081 p=2570393 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************************************************************************************************************************************
2025-09-28 16:59:25,210 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,242 p=2570393 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************************************************************************************************************************************
2025-09-28 16:59:25,338 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,368 p=2570393 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************************************************************************************************************************************
2025-09-28 16:59:25,476 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,505 p=2570393 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************************************************************************************************************************************
2025-09-28 16:59:25,618 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,642 p=2570393 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************************************************************************************************************************************
2025-09-28 16:59:25,750 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,776 p=2570393 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************************************************************************************************************************************
2025-09-28 16:59:25,872 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:25,898 p=2570393 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************************************************************************************************************************************
2025-09-28 16:59:26,005 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,029 p=2570393 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:26,134 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,159 p=2570393 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************************************************************************************************************************************
2025-09-28 16:59:26,251 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,276 p=2570393 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************************************************************************************************************************************
2025-09-28 16:59:26,386 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 16:59:26,412 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 16:59:26,434 p=2570393 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 16:59:26,437 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,466 p=2570393 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************************************************************************************************************************************
2025-09-28 16:59:26,580 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,603 p=2570393 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:26,701 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,726 p=2570393 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************************************************************************************************************************************
2025-09-28 16:59:26,843 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,879 p=2570393 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************************************************************************************************************************************
2025-09-28 16:59:26,970 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:26,998 p=2570393 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************************************************************************************************************************************
2025-09-28 16:59:27,112 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:27,145 p=2570393 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************************************************************************************************************************************
2025-09-28 16:59:27,266 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:27,309 p=2570393 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************************************************************************************************************************************
2025-09-28 16:59:27,425 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:27,464 p=2570393 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************************************************************************************************************************************
2025-09-28 16:59:27,585 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:27,679 p=2570393 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 16:59:27,759 p=2570393 u=root n=ansible | skipping: [lb1]
2025-09-28 16:59:27,817 p=2570393 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 16:59:27,818 p=2570393 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:59:27,818 p=2570393 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:59:27,818 p=2570393 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:59:27,819 p=2570393 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 16:59:27,819 p=2570393 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=161  rescued=0    ignored=0   
2025-09-28 21:40:57,329 p=2582115 u=root n=ansible | PLAY [APK SIEM Product Installer - Fixed Version] *******************************************************************
2025-09-28 21:40:57,454 p=2582115 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 21:41:01,014 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:01,057 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:01,091 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:01,290 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:01,487 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:01,508 p=2582115 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 21:41:01,650 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:01,705 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:01,836 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:01,840 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:01,890 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:01,999 p=2582115 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 21:41:04,189 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:04,241 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:04,494 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:04,500 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:04,504 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:04,516 p=2582115 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 21:41:04,620 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:04,687 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:04,741 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:04,754 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:04,783 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:04,809 p=2582115 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 21:41:04,860 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:04,890 p=2582115 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 21:41:04,938 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:04,969 p=2582115 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 21:41:05,010 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:05,025 p=2582115 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 21:41:06,199 p=2582115 u=root n=ansible | changed: [host3]
2025-09-28 21:41:06,236 p=2582115 u=root n=ansible | changed: [bda]
2025-09-28 21:41:06,263 p=2582115 u=root n=ansible | changed: [lb1]
2025-09-28 21:41:06,278 p=2582115 u=root n=ansible | changed: [host1]
2025-09-28 21:41:07,276 p=2582115 u=root n=ansible | changed: [host2]
2025-09-28 21:41:07,306 p=2582115 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 21:41:07,341 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:07,371 p=2582115 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 21:41:09,387 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:09,403 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:09,447 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:09,475 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:09,490 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:09,512 p=2582115 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 21:41:10,568 p=2582115 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 21:41:10,634 p=2582115 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 21:41:10,699 p=2582115 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 21:41:10,707 p=2582115 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 21:41:10,720 p=2582115 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 21:41:11,259 p=2582115 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 21:41:11,301 p=2582115 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 21:41:11,337 p=2582115 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 21:41:11,381 p=2582115 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 21:41:11,386 p=2582115 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 21:41:11,462 p=2582115 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 21:41:11,522 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:11,561 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:11,609 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:11,648 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:11,671 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:11,688 p=2582115 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 21:41:12,347 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:12,469 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:12,500 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:12,596 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:12,622 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:12,646 p=2582115 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 21:41:13,403 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:13,530 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:13,591 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:13,612 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:13,708 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:13,728 p=2582115 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 21:41:13,801 p=2582115 u=root n=ansible | ok: [host1]
2025-09-28 21:41:13,855 p=2582115 u=root n=ansible | ok: [host2]
2025-09-28 21:41:13,916 p=2582115 u=root n=ansible | ok: [host3]
2025-09-28 21:41:13,923 p=2582115 u=root n=ansible | ok: [bda]
2025-09-28 21:41:13,950 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:13,964 p=2582115 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 21:41:14,061 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:14,112 p=2582115 u=root n=ansible | skipping: [host2]
2025-09-28 21:41:14,161 p=2582115 u=root n=ansible | skipping: [host3]
2025-09-28 21:41:14,164 p=2582115 u=root n=ansible | skipping: [bda]
2025-09-28 21:41:14,972 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:14,989 p=2582115 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 21:41:15,086 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:15,117 p=2582115 u=root n=ansible | skipping: [host2]
2025-09-28 21:41:15,154 p=2582115 u=root n=ansible | skipping: [host3]
2025-09-28 21:41:15,156 p=2582115 u=root n=ansible | skipping: [bda]
2025-09-28 21:41:15,215 p=2582115 u=root n=ansible | ok: [lb1]
2025-09-28 21:41:15,232 p=2582115 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 21:41:15,345 p=2582115 u=root n=ansible | skipping: [host1]
2025-09-28 21:41:15,409 p=2582115 u=root n=ansible | skipping: [host2]
2025-09-28 21:41:15,484 p=2582115 u=root n=ansible | skipping: [host3]
2025-09-28 21:41:15,488 p=2582115 u=root n=ansible | skipping: [bda]
2025-09-28 21:41:15,541 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:15,642 p=2582115 u=root n=ansible | TASK [install_elastic : Set default elasticsearch_nodes if not defined] *********************************************
2025-09-28 21:41:15,733 p=2582115 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 21:41:15,794 p=2582115 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 21:41:15,827 p=2582115 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 21:41:15,874 p=2582115 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 6, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set default elasticsearch_nodes if not defined\n          ^ here\n"}
2025-09-28 21:41:15,886 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:15,951 p=2582115 u=root n=ansible | TASK [install_elastic : Debug elasticsearch_nodes] ******************************************************************
2025-09-28 21:41:16,044 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,120 p=2582115 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 21:41:16,200 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,245 p=2582115 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 21:41:16,271 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,315 p=2582115 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all physical hosts] **************************************
2025-09-28 21:41:16,413 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,506 p=2582115 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 21:41:16,598 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,707 p=2582115 u=root n=ansible | TASK [install_elastic : Set discovery configuration with fallback] **************************************************
2025-09-28 21:41:16,810 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:16,931 p=2582115 u=root n=ansible | TASK [install_elastic : Display cluster discovery configuration] ****************************************************
2025-09-28 21:41:17,028 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:17,146 p=2582115 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 21:41:17,237 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:17,350 p=2582115 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for template compatibility] ************************************
2025-09-28 21:41:17,454 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:17,517 p=2582115 u=root n=ansible | TASK [install_elastic : Set required Docker variables with defaults] ************************************************
2025-09-28 21:41:17,595 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:17,734 p=2582115 u=root n=ansible | TASK [install_elastic : Display deployment configuration] ***********************************************************
2025-09-28 21:41:17,822 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:17,907 p=2582115 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-28 21:41:17,969 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 21:41:17,978 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/data) 
2025-09-28 21:41:17,991 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/logs) 
2025-09-28 21:41:18,007 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/config) 
2025-09-28 21:41:18,030 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 21:41:18,033 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,121 p=2582115 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-28 21:41:18,209 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,293 p=2582115 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-28 21:41:18,385 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,475 p=2582115 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-28 21:41:18,569 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,653 p=2582115 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-28 21:41:18,736 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,827 p=2582115 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-28 21:41:18,911 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:18,992 p=2582115 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-28 21:41:19,082 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:19,176 p=2582115 u=root n=ansible | TASK [install_elastic : Set fs.file-max] ****************************************************************************
2025-09-28 21:41:19,323 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:19,425 p=2582115 u=root n=ansible | TASK [install_elastic : Make fs.file-max persistent] ****************************************************************
2025-09-28 21:41:19,528 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:19,606 p=2582115 u=root n=ansible | TASK [install_elastic : Verify kernel parameters] *******************************************************************
2025-09-28 21:41:19,705 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:19,796 p=2582115 u=root n=ansible | TASK [install_elastic : Display verification results] ***************************************************************
2025-09-28 21:41:19,881 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:19,975 p=2582115 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-28 21:41:20,063 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:20,158 p=2582115 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-28 21:41:20,272 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:20,366 p=2582115 u=root n=ansible | TASK [install_elastic : Comment out swap in fstab (optional)] *******************************************************
2025-09-28 21:41:20,425 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:20,522 p=2582115 u=root n=ansible | TASK [install_elastic : Check final swap status] ********************************************************************
2025-09-28 21:41:20,614 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:20,741 p=2582115 u=root n=ansible | TASK [install_elastic : Display swap status] ************************************************************************
2025-09-28 21:41:20,812 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:20,905 p=2582115 u=root n=ansible | TASK [install_elastic : Create base directories for all nodes] ******************************************************
2025-09-28 21:41:21,006 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 21:41:21,031 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/shared-config) 
2025-09-28 21:41:21,071 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-28 21:41:21,073 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:21,157 p=2582115 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 21:41:21,258 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:21,358 p=2582115 u=root n=ansible | TASK [install_elastic : Define elasticsearch node facts] ************************************************************
2025-09-28 21:41:21,488 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:21,623 p=2582115 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-28 21:41:21,679 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:21,796 p=2582115 u=root n=ansible | TASK [install_elastic : Create certificate directory structure] *****************************************************
2025-09-28 21:41:21,886 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/ca) 
2025-09-28 21:41:21,908 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/fleet-server) 
2025-09-28 21:41:21,929 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs/kibana) 
2025-09-28 21:41:21,932 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:22,038 p=2582115 u=root n=ansible | TASK [install_elastic : Create node-specific certificate directories] ***********************************************
2025-09-28 21:41:22,081 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:22,161 p=2582115 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-28 21:41:22,226 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:22,340 p=2582115 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-28 21:41:22,456 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:22,579 p=2582115 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-28 21:41:22,763 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:22,861 p=2582115 u=root n=ansible | TASK [install_elastic : Set CA certificate permissions] *************************************************************
2025-09-28 21:41:22,966 p=2582115 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-28 21:41:22,988 p=2582115 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-28 21:41:22,990 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,072 p=2582115 u=root n=ansible | TASK [install_elastic : Create comprehensive node list for certificate generation] **********************************
2025-09-28 21:41:23,167 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,226 p=2582115 u=root n=ansible | TASK [install_elastic : Debug nodes list for certificate generation] ************************************************
2025-09-28 21:41:23,318 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,408 p=2582115 u=root n=ansible | TASK [install_elastic : Create certificate directories for all cluster nodes] ***************************************
2025-09-28 21:41:23,515 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,591 p=2582115 u=root n=ansible | TASK [install_elastic : Check existing node certificates] ***********************************************************
2025-09-28 21:41:23,686 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,761 p=2582115 u=root n=ansible | TASK [install_elastic : Generate private keys for all nodes] ********************************************************
2025-09-28 21:41:23,829 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:23,928 p=2582115 u=root n=ansible | TASK [install_elastic : Create certificate configs for all nodes] ***************************************************
2025-09-28 21:41:24,027 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:24,135 p=2582115 u=root n=ansible | TASK [install_elastic : Generate certificate requests for all nodes] ************************************************
2025-09-28 21:41:24,199 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:24,274 p=2582115 u=root n=ansible | TASK [install_elastic : Sign certificates with CA for all nodes] ****************************************************
2025-09-28 21:41:24,411 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:24,575 p=2582115 u=root n=ansible | TASK [install_elastic : Set certificate file permissions for all nodes] *********************************************
2025-09-28 21:41:24,635 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:24,701 p=2582115 u=root n=ansible | TASK [install_elastic : Clean up temporary certificate files] *******************************************************
2025-09-28 21:41:24,811 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:24,920 p=2582115 u=root n=ansible | TASK [install_elastic : Synchronize certificate directory to other hosts] *******************************************
2025-09-28 21:41:25,094 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:25,194 p=2582115 u=root n=ansible | TASK [install_elastic : Ensure private key permissions on distributed certificates] *********************************
2025-09-28 21:41:25,224 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:25,283 p=2582115 u=root n=ansible | TASK [install_elastic : Verify node certificates exist] *************************************************************
2025-09-28 21:41:25,325 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:25,400 p=2582115 u=root n=ansible | TASK [install_elastic : Test certificate chain for each node] *******************************************************
2025-09-28 21:41:25,450 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:25,545 p=2582115 u=root n=ansible | TASK [install_elastic : Display SSL certificate setup success] ******************************************************
2025-09-28 21:41:25,647 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:25,762 p=2582115 u=root n=ansible | TASK [install_elastic : Generate node-specific configurations] ******************************************************
2025-09-28 21:41:25,924 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,022 p=2582115 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-28 21:41:26,109 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,186 p=2582115 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for {{ deployment_type }} deployment] **************************
2025-09-28 21:41:26,294 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,407 p=2582115 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-28 21:41:26,463 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,520 p=2582115 u=root n=ansible | TASK [install_elastic : Display docker-compose creation status] *****************************************************
2025-09-28 21:41:26,566 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,614 p=2582115 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-28 21:41:26,709 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:26,747 p=2582115 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************
2025-09-28 21:41:26,835 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,037 p=2582115 u=root n=ansible | TASK [install_elastic : Check if Docker image file exists in files directory] ***************************************
2025-09-28 21:41:27,096 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,160 p=2582115 u=root n=ansible | TASK [install_elastic : Display Docker image file status] ***********************************************************
2025-09-28 21:41:27,245 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,316 p=2582115 u=root n=ansible | TASK [install_elastic : Create cache directory for Docker images] ***************************************************
2025-09-28 21:41:27,409 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,457 p=2582115 u=root n=ansible | TASK [install_elastic : Check if Elasticsearch Docker image already exists locally] *********************************
2025-09-28 21:41:27,550 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,686 p=2582115 u=root n=ansible | TASK [install_elastic : Copy Elasticsearch Docker image if not present] *********************************************
2025-09-28 21:41:27,776 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:27,871 p=2582115 u=root n=ansible | TASK [install_elastic : Load Elasticsearch Docker image if not present] *********************************************
2025-09-28 21:41:27,955 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,051 p=2582115 u=root n=ansible | TASK [install_elastic : Remove temporary Docker image file] *********************************************************
2025-09-28 21:41:28,111 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,195 p=2582115 u=root n=ansible | TASK [install_elastic : Verify Elasticsearch Docker image exists after loading] *************************************
2025-09-28 21:41:28,248 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,348 p=2582115 u=root n=ansible | TASK [install_elastic : Display found image] ************************************************************************
2025-09-28 21:41:28,438 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,535 p=2582115 u=root n=ansible | TASK [install_elastic : Detect deployment type] *********************************************************************
2025-09-28 21:41:28,612 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,705 p=2582115 u=root n=ansible | TASK [install_elastic : Set elasticsearch_node_roles for single-node compatibility] *********************************
2025-09-28 21:41:28,757 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:28,844 p=2582115 u=root n=ansible | TASK [install_elastic : Remove any existing docker-compose file to force regeneration] ******************************
2025-09-28 21:41:28,926 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,064 p=2582115 u=root n=ansible | TASK [install_elastic : Generate Multi-Node Docker Compose file] ****************************************************
2025-09-28 21:41:29,127 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,185 p=2582115 u=root n=ansible | TASK [install_elastic : Generate Single-Node Docker Compose file] ***************************************************
2025-09-28 21:41:29,242 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,331 p=2582115 u=root n=ansible | TASK [install_elastic : Check if docker-compose file was created] ***************************************************
2025-09-28 21:41:29,416 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,476 p=2582115 u=root n=ansible | TASK [install_elastic : Fail if compose file was not created] *******************************************************
2025-09-28 21:41:29,557 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,661 p=2582115 u=root n=ansible | TASK [install_elastic : Validate YAML syntax using docker-compose] **************************************************
2025-09-28 21:41:29,758 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,847 p=2582115 u=root n=ansible | TASK [install_elastic : Display validation success] *****************************************************************
2025-09-28 21:41:29,941 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:29,999 p=2582115 u=root n=ansible | TASK [install_elastic : Create environment file] ********************************************************************
2025-09-28 21:41:30,097 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:30,190 p=2582115 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch container if config changed] ************************************
2025-09-28 21:41:30,294 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:30,412 p=2582115 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose (local image only)] *******************************
2025-09-28 21:41:30,478 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:30,584 p=2582115 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************
2025-09-28 21:41:30,694 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:30,790 p=2582115 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************
2025-09-28 21:41:30,884 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:30,981 p=2582115 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************
2025-09-28 21:41:31,085 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,203 p=2582115 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-28 21:41:31,290 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,313 p=2582115 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 21:41:31,451 p=2582115 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 21:41:31,511 p=2582115 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 21:41:31,544 p=2582115 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 21:41:31,545 p=2582115 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 254, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 21:41:31,578 p=2582115 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 21:41:31,635 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,646 p=2582115 u=root n=ansible | TASK [install_kibana : Set required Kibana variables with defaults] *************************************************
2025-09-28 21:41:31,724 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,740 p=2582115 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 21:41:31,825 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,847 p=2582115 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 21:41:31,954 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:31,968 p=2582115 u=root n=ansible | TASK [install_kibana : Install Docker if not present] ***************************************************************
2025-09-28 21:41:32,057 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,074 p=2582115 u=root n=ansible | TASK [install_kibana : Start Docker service] ************************************************************************
2025-09-28 21:41:32,136 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,150 p=2582115 u=root n=ansible | TASK [install_kibana : Create Kibana Docker directories] ************************************************************
2025-09-28 21:41:32,264 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 21:41:32,295 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 21:41:32,336 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 21:41:32,370 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 21:41:32,388 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 21:41:32,402 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana) 
2025-09-28 21:41:32,416 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/ca) 
2025-09-28 21:41:32,418 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,436 p=2582115 u=root n=ansible | TASK [install_kibana : Check if Kibana Docker image file exists] ****************************************************
2025-09-28 21:41:32,492 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,515 p=2582115 u=root n=ansible | TASK [install_kibana : Copy Kibana Docker image] ********************************************************************
2025-09-28 21:41:32,582 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,599 p=2582115 u=root n=ansible | TASK [install_kibana : Load Kibana Docker image] ********************************************************************
2025-09-28 21:41:32,650 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,675 p=2582115 u=root n=ansible | TASK [install_kibana : Remove temporary image file] *****************************************************************
2025-09-28 21:41:32,762 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,792 p=2582115 u=root n=ansible | TASK [install_kibana : Check if image is available in Docker] *******************************************************
2025-09-28 21:41:32,855 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,867 p=2582115 u=root n=ansible | TASK [install_kibana : Display image status] ************************************************************************
2025-09-28 21:41:32,918 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:32,935 p=2582115 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 21:41:32,983 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,006 p=2582115 u=root n=ansible | TASK [install_kibana : Check if Kibana certificates exist] **********************************************************
2025-09-28 21:41:33,065 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,084 p=2582115 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 21:41:33,146 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,165 p=2582115 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 21:41:33,250 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,269 p=2582115 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 21:41:33,354 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,365 p=2582115 u=root n=ansible | TASK [install_kibana : Sign certificate with Elasticsearch CA] ******************************************************
2025-09-28 21:41:33,423 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,437 p=2582115 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 21:41:33,505 p=2582115 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.key', 'mode': '0600'}) 
2025-09-28 21:41:33,521 p=2582115 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana/kibana.crt', 'mode': '0644'}) 
2025-09-28 21:41:33,523 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,539 p=2582115 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 21:41:33,607 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.csr) 
2025-09-28 21:41:33,615 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana/kibana.conf) 
2025-09-28 21:41:33,617 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,631 p=2582115 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 21:41:33,717 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,733 p=2582115 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 21:41:33,825 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,846 p=2582115 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 21:41:33,912 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:33,934 p=2582115 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 21:41:33,986 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,018 p=2582115 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 21:41:34,075 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,102 p=2582115 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 21:41:34,207 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,227 p=2582115 u=root n=ansible | TASK [install_kibana : Generate certificate fingerprint] ************************************************************
2025-09-28 21:41:34,281 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,304 p=2582115 u=root n=ansible | TASK [install_kibana : Set certificate fingerprint] *****************************************************************
2025-09-28 21:41:34,366 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,399 p=2582115 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration file] **********************************************************
2025-09-28 21:41:34,463 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,488 p=2582115 u=root n=ansible | TASK [install_kibana : Generate Kibana Docker Compose file] *********************************************************
2025-09-28 21:41:34,540 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,552 p=2582115 u=root n=ansible | TASK [install_kibana : Verify Kibana docker-compose file was created] ***********************************************
2025-09-28 21:41:34,599 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,617 p=2582115 u=root n=ansible | TASK [install_kibana : Display Kibana compose file status] **********************************************************
2025-09-28 21:41:34,688 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,709 p=2582115 u=root n=ansible | TASK [install_kibana : Fail if Kibana docker-compose file was not created] ******************************************
2025-09-28 21:41:34,793 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,816 p=2582115 u=root n=ansible | TASK [install_kibana : Verify docker-compose file exists] ***********************************************************
2025-09-28 21:41:34,894 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,906 p=2582115 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file is missing] ******************************************************
2025-09-28 21:41:34,957 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:34,976 p=2582115 u=root n=ansible | TASK [install_kibana : Check if elastic network exists] *************************************************************
2025-09-28 21:41:35,044 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,058 p=2582115 u=root n=ansible | TASK [install_kibana : Create elastic network if it doesn't exist] **************************************************
2025-09-28 21:41:35,097 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,109 p=2582115 u=root n=ansible | TASK [install_kibana : Stop existing Kibana container if running] ***************************************************
2025-09-28 21:41:35,167 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,180 p=2582115 u=root n=ansible | TASK [install_kibana : Start Kibana Docker containers] **************************************************************
2025-09-28 21:41:35,284 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,319 p=2582115 u=root n=ansible | TASK [install_kibana : Display container startup result] ************************************************************
2025-09-28 21:41:35,423 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,460 p=2582115 u=root n=ansible | TASK [install_kibana : Wait for Kibana container to be running] *****************************************************
2025-09-28 21:41:35,522 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,540 p=2582115 u=root n=ansible | TASK [install_kibana : Display container status] ********************************************************************
2025-09-28 21:41:35,624 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,652 p=2582115 u=root n=ansible | TASK [install_kibana : Check container logs if startup failed] ******************************************************
2025-09-28 21:41:35,746 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,772 p=2582115 u=root n=ansible | TASK [install_kibana : Display container logs on failure] ***********************************************************
2025-09-28 21:41:35,875 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,906 p=2582115 u=root n=ansible | TASK [install_kibana : Wait for Kibana API to be ready] *************************************************************
2025-09-28 21:41:35,973 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:35,991 p=2582115 u=root n=ansible | TASK [install_kibana : Display Kibana health check result] **********************************************************
2025-09-28 21:41:36,074 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,097 p=2582115 u=root n=ansible | TASK [install_kibana : Show final status and access information] ****************************************************
2025-09-28 21:41:36,187 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,206 p=2582115 u=root n=ansible | TASK [install_kibana : create Geo ip database folder] ***************************************************************
2025-09-28 21:41:36,294 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,307 p=2582115 u=root n=ansible | TASK [install_kibana : Copy geo IP database to destination] *********************************************************
2025-09-28 21:41:36,389 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,408 p=2582115 u=root n=ansible | TASK [install_kibana : Copy nginx config file to serve geo ips] *****************************************************
2025-09-28 21:41:36,452 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,470 p=2582115 u=root n=ansible | TASK [install_kibana : Disable nginx default web page] **************************************************************
2025-09-28 21:41:36,530 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,541 p=2582115 u=root n=ansible | TASK [install_kibana : Enable nginx module] *************************************************************************
2025-09-28 21:41:36,623 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,639 p=2582115 u=root n=ansible | TASK [install_kibana : Load nginx configuration file] ***************************************************************
2025-09-28 21:41:36,723 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,745 p=2582115 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 21:41:36,829 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,850 p=2582115 u=root n=ansible | TASK [install_kibana : Check if host already exists in kibana.yml] **************************************************
2025-09-28 21:41:36,928 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:36,957 p=2582115 u=root n=ansible | TASK [install_kibana : Add new host to xpack.fleet.outputs.hosts] ***************************************************
2025-09-28 21:41:37,045 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,066 p=2582115 u=root n=ansible | TASK [install_kibana : Verify the change] ***************************************************************************
2025-09-28 21:41:37,147 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,171 p=2582115 u=root n=ansible | TASK [install_kibana : Take Backup from kibana before update] *******************************************************
2025-09-28 21:41:37,378 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,388 p=2582115 u=root n=ansible | TASK [install_kibana : Check status of the kibana service] **********************************************************
2025-09-28 21:41:37,454 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,476 p=2582115 u=root n=ansible | TASK [install_kibana : Shotdown Kibana] *****************************************************************************
2025-09-28 21:41:37,569 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,591 p=2582115 u=root n=ansible | TASK [install_kibana : Check for installed kibana plugins] **********************************************************
2025-09-28 21:41:37,651 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,664 p=2582115 u=root n=ansible | TASK [install_kibana : Set fact for plugin names] *******************************************************************
2025-09-28 21:41:37,718 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,731 p=2582115 u=root n=ansible | TASK [install_kibana : Remove installed kibana plugins if exist] ****************************************************
2025-09-28 21:41:37,803 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,825 p=2582115 u=root n=ansible | TASK [install_kibana : Remove api elastic file] *********************************************************************
2025-09-28 21:41:37,882 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:37,908 p=2582115 u=root n=ansible | TASK [install_kibana : Remove kibana backup directory] **************************************************************
2025-09-28 21:41:37,992 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,017 p=2582115 u=root n=ansible | TASK [install_kibana : Create tmp kibana backup directory] **********************************************************
2025-09-28 21:41:38,121 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup) 
2025-09-28 21:41:38,142 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/data) 
2025-09-28 21:41:38,162 p=2582115 u=root n=ansible | skipping: [lb1] => (item=/var/siem/tmp/kibana-backup/config) 
2025-09-28 21:41:38,164 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,187 p=2582115 u=root n=ansible | TASK [install_kibana : Backup from kibana config] *******************************************************************
2025-09-28 21:41:38,276 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,288 p=2582115 u=root n=ansible | TASK [install_kibana : Backup from kibana data] *********************************************************************
2025-09-28 21:41:38,367 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,399 p=2582115 u=root n=ansible | TASK [install_kibana : Upgrade Kibana package] **********************************************************************
2025-09-28 21:41:38,495 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,507 p=2582115 u=root n=ansible | TASK [install_kibana : Restore from kibana config] ******************************************************************
2025-09-28 21:41:38,583 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,606 p=2582115 u=root n=ansible | TASK [install_kibana : Restore from kibana data] ********************************************************************
2025-09-28 21:41:38,680 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,708 p=2582115 u=root n=ansible | TASK [install_kibana : Start the upgraded node] *********************************************************************
2025-09-28 21:41:38,773 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,786 p=2582115 u=root n=ansible | TASK [install_kibana : Wait for Kibana service to be ready] *********************************************************
2025-09-28 21:41:38,833 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:38,855 p=2582115 u=root n=ansible | TASK [install_kibana : Remove updater user] *************************************************************************
2025-09-28 21:41:38,913 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:39,014 p=2582115 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 21:41:39,071 p=2582115 u=root n=ansible | skipping: [lb1]
2025-09-28 21:41:39,121 p=2582115 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 21:41:39,121 p=2582115 u=root n=ansible | bda                        : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 21:41:39,121 p=2582115 u=root n=ansible | host1                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 21:41:39,122 p=2582115 u=root n=ansible | host2                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 21:41:39,122 p=2582115 u=root n=ansible | host3                      : ok=11   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 21:41:39,122 p=2582115 u=root n=ansible | lb1                        : ok=13   changed=1    unreachable=0    failed=0    skipped=161  rescued=0    ignored=0   
2025-09-28 22:49:02,870 p=2586374 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************
2025-09-28 22:49:02,917 p=2586374 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-28 22:49:06,122 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:06,297 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:06,310 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:06,490 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:06,584 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:06,603 p=2586374 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-28 22:49:06,716 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:06,757 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:06,799 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:06,802 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:06,842 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:06,852 p=2586374 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************
2025-09-28 22:49:06,960 p=2586374 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:19:05Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:49:07,005 p=2586374 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:19:05Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:49:07,052 p=2586374 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:19:06Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:49:07,055 p=2586374 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:19:05Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:49:07,092 p=2586374 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:19:05Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:49:07,267 p=2586374 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-28 22:49:09,164 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:09,375 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:09,508 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:09,553 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:09,577 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:09,609 p=2586374 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-28 22:49:09,744 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:09,801 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:09,851 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:09,853 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:09,890 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:09,916 p=2586374 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-28 22:49:09,953 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:09,973 p=2586374 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-28 22:49:10,009 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:10,034 p=2586374 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-28 22:49:10,068 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:10,086 p=2586374 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-28 22:49:11,153 p=2586374 u=root n=ansible | changed: [bda]
2025-09-28 22:49:11,155 p=2586374 u=root n=ansible | changed: [lb1]
2025-09-28 22:49:11,300 p=2586374 u=root n=ansible | changed: [host2]
2025-09-28 22:49:11,301 p=2586374 u=root n=ansible | changed: [host1]
2025-09-28 22:49:11,301 p=2586374 u=root n=ansible | changed: [host3]
2025-09-28 22:49:11,322 p=2586374 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-28 22:49:11,342 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:11,359 p=2586374 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-28 22:49:13,338 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:13,386 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:13,388 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:13,425 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:13,470 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:13,484 p=2586374 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-28 22:49:14,711 p=2586374 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 22:49:14,751 p=2586374 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 22:49:14,793 p=2586374 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 22:49:14,805 p=2586374 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 22:49:14,879 p=2586374 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 22:49:15,393 p=2586374 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 22:49:15,542 p=2586374 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 22:49:15,584 p=2586374 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 22:49:15,587 p=2586374 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 22:49:15,631 p=2586374 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 22:49:15,710 p=2586374 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-28 22:49:15,826 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:15,874 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:15,927 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:15,931 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:15,955 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:15,980 p=2586374 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-28 22:49:16,870 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:17,004 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:17,015 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:17,092 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:17,177 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:17,207 p=2586374 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-28 22:49:18,028 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:18,215 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:18,258 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:18,279 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:18,350 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:18,379 p=2586374 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-28 22:49:18,508 p=2586374 u=root n=ansible | ok: [host1]
2025-09-28 22:49:18,553 p=2586374 u=root n=ansible | ok: [host2]
2025-09-28 22:49:18,601 p=2586374 u=root n=ansible | ok: [host3]
2025-09-28 22:49:18,604 p=2586374 u=root n=ansible | ok: [bda]
2025-09-28 22:49:18,654 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:18,677 p=2586374 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-28 22:49:18,809 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:18,858 p=2586374 u=root n=ansible | skipping: [host2]
2025-09-28 22:49:18,909 p=2586374 u=root n=ansible | skipping: [host3]
2025-09-28 22:49:18,912 p=2586374 u=root n=ansible | skipping: [bda]
2025-09-28 22:49:19,664 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:19,685 p=2586374 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-28 22:49:19,768 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:19,807 p=2586374 u=root n=ansible | skipping: [host2]
2025-09-28 22:49:19,870 p=2586374 u=root n=ansible | skipping: [host3]
2025-09-28 22:49:19,872 p=2586374 u=root n=ansible | skipping: [bda]
2025-09-28 22:49:19,927 p=2586374 u=root n=ansible | ok: [lb1]
2025-09-28 22:49:19,952 p=2586374 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-28 22:49:20,039 p=2586374 u=root n=ansible | skipping: [host1]
2025-09-28 22:49:20,169 p=2586374 u=root n=ansible | skipping: [host2]
2025-09-28 22:49:20,224 p=2586374 u=root n=ansible | skipping: [host3]
2025-09-28 22:49:20,269 p=2586374 u=root n=ansible | skipping: [bda]
2025-09-28 22:49:20,301 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:20,462 p=2586374 u=root n=ansible | TASK [install_elastic : Set elasticsearch_nodes from inventory if not defined] **************************************
2025-09-28 22:49:20,570 p=2586374 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 7, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set elasticsearch_nodes from inventory if not defined\n          ^ here\n"}
2025-09-28 22:49:20,619 p=2586374 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 7, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set elasticsearch_nodes from inventory if not defined\n          ^ here\n"}
2025-09-28 22:49:20,625 p=2586374 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 7, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set elasticsearch_nodes from inventory if not defined\n          ^ here\n"}
2025-09-28 22:49:20,659 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:20,661 p=2586374 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 7, column 11, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      block:\n        - name: Set elasticsearch_nodes from inventory if not defined\n          ^ here\n"}
2025-09-28 22:49:20,707 p=2586374 u=root n=ansible | TASK [install_elastic : Check if host has Elasticsearch nodes] ******************************************************
2025-09-28 22:49:20,744 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:20,806 p=2586374 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-28 22:49:20,828 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:20,879 p=2586374 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************
2025-09-28 22:49:20,954 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,021 p=2586374 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************
2025-09-28 22:49:21,093 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,177 p=2586374 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all hosts] ***********************************************
2025-09-28 22:49:21,243 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,343 p=2586374 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************
2025-09-28 22:49:21,420 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,463 p=2586374 u=root n=ansible | TASK [install_elastic : Set discovery configuration] ****************************************************************
2025-09-28 22:49:21,531 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,623 p=2586374 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************
2025-09-28 22:49:21,696 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,802 p=2586374 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************
2025-09-28 22:49:21,882 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 22:49:21,889 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 22:49:21,893 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:21,998 p=2586374 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-28 22:49:22,069 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,165 p=2586374 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************
2025-09-28 22:49:22,238 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,315 p=2586374 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************
2025-09-28 22:49:22,383 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,491 p=2586374 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-28 22:49:22,571 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,677 p=2586374 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-28 22:49:22,722 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,793 p=2586374 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-28 22:49:22,843 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:22,914 p=2586374 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-28 22:49:22,974 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:23,080 p=2586374 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-28 22:49:23,157 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:23,289 p=2586374 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************
2025-09-28 22:49:23,390 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:23,453 p=2586374 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-28 22:49:23,513 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:23,529 p=2586374 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-28 22:49:23,636 p=2586374 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 215, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 22:49:23,658 p=2586374 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 215, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 22:49:23,677 p=2586374 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 215, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 22:49:23,740 p=2586374 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The conditional check 'has_elasticsearch_nodes' failed. The error was: error while evaluating conditional (has_elasticsearch_nodes): 'has_elasticsearch_nodes' is undefined. 'has_elasticsearch_nodes' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 215, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  rescue:\n    - name: Handle installation failure\n      ^ here\n"}
2025-09-28 22:49:23,778 p=2586374 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************
2025-09-28 22:49:23,818 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:23,949 p=2586374 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************
2025-09-28 22:49:24,010 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,026 p=2586374 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************
2025-09-28 22:49:24,089 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,115 p=2586374 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************
2025-09-28 22:49:24,186 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,211 p=2586374 u=root n=ansible | TASK [install_kibana : Ensure Docker is available] ******************************************************************
2025-09-28 22:49:24,262 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,287 p=2586374 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************
2025-09-28 22:49:24,355 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 22:49:24,363 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 22:49:24,376 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 22:49:24,392 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 22:49:24,397 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 22:49:24,399 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,420 p=2586374 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************
2025-09-28 22:49:24,492 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,505 p=2586374 u=root n=ansible | TASK [install_kibana : Check if Kibana certificate exists] **********************************************************
2025-09-28 22:49:24,566 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,594 p=2586374 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************
2025-09-28 22:49:24,657 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,673 p=2586374 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************
2025-09-28 22:49:24,713 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,740 p=2586374 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************
2025-09-28 22:49:24,813 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,836 p=2586374 u=root n=ansible | TASK [install_kibana : Sign certificate with CA] ********************************************************************
2025-09-28 22:49:24,908 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:24,934 p=2586374 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************
2025-09-28 22:49:24,987 p=2586374 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 22:49:24,993 p=2586374 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 22:49:24,995 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,019 p=2586374 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************
2025-09-28 22:49:25,099 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 22:49:25,106 p=2586374 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 22:49:25,108 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,122 p=2586374 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************
2025-09-28 22:49:25,181 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,196 p=2586374 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************
2025-09-28 22:49:25,236 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,263 p=2586374 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************
2025-09-28 22:49:25,312 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,330 p=2586374 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************
2025-09-28 22:49:25,390 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,417 p=2586374 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************
2025-09-28 22:49:25,487 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,518 p=2586374 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************
2025-09-28 22:49:25,562 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,576 p=2586374 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration] ***************************************************************
2025-09-28 22:49:25,635 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,651 p=2586374 u=root n=ansible | TASK [install_kibana : Generate Docker Compose file] ****************************************************************
2025-09-28 22:49:25,720 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,739 p=2586374 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************
2025-09-28 22:49:25,794 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,819 p=2586374 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file was not created] *************************************************
2025-09-28 22:49:25,881 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,907 p=2586374 u=root n=ansible | TASK [install_kibana : Deploy Kibana using Docker Compose] **********************************************************
2025-09-28 22:49:25,969 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:25,994 p=2586374 u=root n=ansible | TASK [install_kibana : Verify Kibana installation] ******************************************************************
2025-09-28 22:49:26,037 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:26,063 p=2586374 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************
2025-09-28 22:49:26,105 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:26,171 p=2586374 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-28 22:49:26,209 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:26,237 p=2586374 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************
2025-09-28 22:49:26,278 p=2586374 u=root n=ansible | skipping: [lb1]
2025-09-28 22:49:26,339 p=2586374 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-28 22:49:26,339 p=2586374 u=root n=ansible | bda                        : ok=12   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 22:49:26,340 p=2586374 u=root n=ansible | host1                      : ok=12   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 22:49:26,340 p=2586374 u=root n=ansible | host2                      : ok=12   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 22:49:26,340 p=2586374 u=root n=ansible | host3                      : ok=12   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-28 22:49:26,341 p=2586374 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=49   rescued=0    ignored=0   
2025-09-28 22:59:38,023 p=2588342 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 22:59:38,079 p=2588342 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 22:59:41,256 p=2588342 u=root n=ansible | ok: [host3]
2025-09-28 22:59:41,382 p=2588342 u=root n=ansible | ok: [lb1]
2025-09-28 22:59:41,484 p=2588342 u=root n=ansible | ok: [bda]
2025-09-28 22:59:41,585 p=2588342 u=root n=ansible | ok: [host1]
2025-09-28 22:59:41,606 p=2588342 u=root n=ansible | ok: [host2]
2025-09-28 22:59:41,618 p=2588342 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 22:59:41,702 p=2588342 u=root n=ansible | ok: [host1]
2025-09-28 22:59:41,756 p=2588342 u=root n=ansible | ok: [host2]
2025-09-28 22:59:41,812 p=2588342 u=root n=ansible | ok: [host3]
2025-09-28 22:59:41,815 p=2588342 u=root n=ansible | ok: [bda]
2025-09-28 22:59:41,869 p=2588342 u=root n=ansible | ok: [lb1]
2025-09-28 22:59:41,888 p=2588342 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 22:59:41,984 p=2588342 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:40Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:42,037 p=2588342 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:40Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:42,087 p=2588342 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:40Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:42,095 p=2588342 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:40Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:42,140 p=2588342 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:41Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:42,332 p=2588342 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 22:59:44,462 p=2588342 u=root n=ansible | ok: [lb1]
2025-09-28 22:59:44,480 p=2588342 u=root n=ansible | ok: [host2]
2025-09-28 22:59:44,572 p=2588342 u=root n=ansible | ok: [host3]
2025-09-28 22:59:44,620 p=2588342 u=root n=ansible | ok: [host1]
2025-09-28 22:59:44,656 p=2588342 u=root n=ansible | ok: [bda]
2025-09-28 22:59:44,680 p=2588342 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 22:59:44,793 p=2588342 u=root n=ansible | ok: [host1]
2025-09-28 22:59:44,827 p=2588342 u=root n=ansible | ok: [host2]
2025-09-28 22:59:44,866 p=2588342 u=root n=ansible | ok: [host3]
2025-09-28 22:59:44,895 p=2588342 u=root n=ansible | ok: [lb1]
2025-09-28 22:59:44,901 p=2588342 u=root n=ansible | ok: [bda]
2025-09-28 22:59:44,923 p=2588342 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 22:59:44,957 p=2588342 u=root n=ansible | skipping: [host1]
2025-09-28 22:59:44,973 p=2588342 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 22:59:44,999 p=2588342 u=root n=ansible | skipping: [host1]
2025-09-28 22:59:45,020 p=2588342 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 22:59:45,050 p=2588342 u=root n=ansible | skipping: [host1]
2025-09-28 22:59:45,069 p=2588342 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 22:59:46,130 p=2588342 u=root n=ansible | skipping: [host3]
2025-09-28 22:59:46,132 p=2588342 u=root n=ansible | skipping: [host1]
2025-09-28 22:59:46,149 p=2588342 u=root n=ansible | skipping: [host2]
2025-09-28 22:59:46,342 p=2588342 u=root n=ansible | skipping: [lb1]
2025-09-28 22:59:46,343 p=2588342 u=root n=ansible | skipping: [bda]
2025-09-28 22:59:46,371 p=2588342 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 22:59:46,390 p=2588342 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 22:59:46,390 p=2588342 u=root n=ansible | bda                        : ok=5    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
2025-09-28 22:59:46,390 p=2588342 u=root n=ansible | host1                      : ok=5    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
2025-09-28 22:59:46,391 p=2588342 u=root n=ansible | host2                      : ok=5    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
2025-09-28 22:59:46,391 p=2588342 u=root n=ansible | host3                      : ok=5    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
2025-09-28 22:59:46,391 p=2588342 u=root n=ansible | lb1                        : ok=5    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
2025-09-28 22:59:56,359 p=2589171 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 22:59:56,404 p=2589171 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 22:59:59,196 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 22:59:59,225 p=2589171 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 22:59:59,292 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 22:59:59,318 p=2589171 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 22:59:59,407 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:29:58Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 22:59:59,461 p=2589171 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:00:01,426 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:01,442 p=2589171 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:00:01,494 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:01,516 p=2589171 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:00:01,559 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:01,579 p=2589171 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:00:01,611 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:01,626 p=2589171 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:00:01,643 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:01,653 p=2589171 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:00:02,680 p=2589171 u=root n=ansible | changed: [bda]
2025-09-28 23:00:02,704 p=2589171 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:00:02,728 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:02,753 p=2589171 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:00:04,799 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:04,821 p=2589171 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:00:05,917 p=2589171 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:00:06,591 p=2589171 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:00:06,620 p=2589171 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:00:06,671 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:06,687 p=2589171 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:00:07,496 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:07,530 p=2589171 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:00:08,452 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:08,491 p=2589171 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:00:08,580 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:08,598 p=2589171 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:00:08,643 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:08,657 p=2589171 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:00:08,696 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:08,718 p=2589171 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:00:08,756 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:08,811 p=2589171 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:00:08,991 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:09,021 p=2589171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:00:09,121 p=2589171 u=root n=ansible | skipping: [bda]
2025-09-28 23:00:09,137 p=2589171 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:00:09,248 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:00:09,266 p=2589171 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:00:09,429 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:09,442 p=2589171 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all hosts] ***********************************************************************************************************************************************************************
2025-09-28 23:00:09,533 p=2589171 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset)\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:00:09,557 p=2589171 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 23:00:09,680 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:00:09,730 p=2589171 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 23:00:09,835 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              KIBANA INSTALLATION STARTED                     ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Version: 8.18.2            ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:00:09,845 p=2589171 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-28 23:00:09,962 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:09,987 p=2589171 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 23:00:11,555 p=2589171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "redirected": false, "status": -1, "url": "https://192.168.166.130:9200/_cluster/health"}
2025-09-28 23:00:11,557 p=2589171 u=root n=ansible | ...ignoring
2025-09-28 23:00:11,586 p=2589171 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 23:00:11,659 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "📊 Elasticsearch Connection: Failed\n"
}
2025-09-28 23:00:11,682 p=2589171 u=root n=ansible | TASK [install_kibana : Ensure Docker is available] ******************************************************************************************************************************************************************************************
2025-09-28 23:00:13,587 p=2589171 u=root n=ansible | ok: [bda]
2025-09-28 23:00:13,605 p=2589171 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-28 23:00:14,513 p=2589171 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana)
2025-09-28 23:00:15,274 p=2589171 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-28 23:00:16,085 p=2589171 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-28 23:00:17,020 p=2589171 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-28 23:00:18,016 p=2589171 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-28 23:00:18,046 p=2589171 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 23:00:19,242 p=2589171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Source /usr/share/siem/certs/ca/ca.crt not found"}
2025-09-28 23:00:19,270 p=2589171 u=root n=ansible | TASK [install_kibana : Handle Kibana installation failure] **********************************************************************************************************************************************************************************
2025-09-28 23:00:19,334 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Kibana installation failed!\n\nTroubleshooting steps:\n1. Check Elasticsearch: curl -k -u elastic:PASSWORD https://192.168.166.130:9200/_cluster/health\n2. Check Docker: systemctl status docker\n3. Check certificates: ls -la /usr/share/siem/kibana/certs/\n4. Check logs: docker logs kibana-bda\n"
}
2025-09-28 23:00:19,414 p=2589171 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 23:00:19,616 p=2589171 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-28T19:29:58Z                      ║\n║ End Time: 2025-09-28T19:30:00Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:00:19,639 p=2589171 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-28 23:00:19,896 p=2589171 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: If you are using a module and expect the file to exist on the remote, see the remote_src option
2025-09-28 23:00:19,897 p=2589171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Could not find or access 'cluster-verification.sh.j2'\nSearched in:\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2 on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}
2025-09-28 23:00:19,901 p=2589171 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 23:00:19,901 p=2589171 u=root n=ansible | bda                        : ok=24   changed=2    unreachable=0    failed=1    skipped=3    rescued=2    ignored=1   
2025-09-28 23:00:58,514 p=2590062 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 23:00:58,613 p=2590062 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 23:01:01,601 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:01,620 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:01,688 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:01,859 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:01,957 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:02,000 p=2590062 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 23:01:02,185 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:02,251 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:02,325 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:02,327 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:02,350 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:02,376 p=2590062 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 23:01:02,490 p=2590062 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:31:00Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:02,539 p=2590062 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:31:00Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:02,602 p=2590062 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:31:01Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:02,603 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:31:01Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:02,651 p=2590062 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:31:00Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:02,845 p=2590062 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:01:04,886 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:04,908 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:05,102 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:05,203 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:05,211 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:05,246 p=2590062 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:01:05,353 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:05,392 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:05,437 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:05,459 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:05,479 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:05,508 p=2590062 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:01:05,547 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:05,565 p=2590062 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:01:05,598 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:05,616 p=2590062 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:01:05,638 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:05,650 p=2590062 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:01:06,886 p=2590062 u=root n=ansible | changed: [host1]
2025-09-28 23:01:06,920 p=2590062 u=root n=ansible | changed: [lb1]
2025-09-28 23:01:06,921 p=2590062 u=root n=ansible | changed: [host3]
2025-09-28 23:01:07,034 p=2590062 u=root n=ansible | changed: [host2]
2025-09-28 23:01:07,035 p=2590062 u=root n=ansible | changed: [bda]
2025-09-28 23:01:07,047 p=2590062 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:01:07,060 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:07,071 p=2590062 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:01:09,178 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:09,188 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:09,194 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:09,199 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:09,227 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:09,242 p=2590062 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:01:10,408 p=2590062 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 23:01:10,456 p=2590062 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 23:01:10,483 p=2590062 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 23:01:10,578 p=2590062 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:01:10,611 p=2590062 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 23:01:11,061 p=2590062 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 23:01:11,203 p=2590062 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 23:01:11,291 p=2590062 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 23:01:11,387 p=2590062 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 23:01:11,414 p=2590062 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:01:11,546 p=2590062 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:01:11,643 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:11,706 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:11,761 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:11,823 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:11,842 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:11,862 p=2590062 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:01:12,665 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:12,782 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:12,822 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:12,874 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:12,940 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:12,962 p=2590062 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:01:13,784 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:13,791 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:13,815 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:13,843 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:13,856 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:13,872 p=2590062 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:01:13,971 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:14,027 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:14,105 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:14,109 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:14,154 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:14,183 p=2590062 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:01:14,309 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:14,381 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:14,437 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:14,441 p=2590062 u=root n=ansible | skipping: [bda]
2025-09-28 23:01:15,257 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:15,277 p=2590062 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:01:15,328 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:15,410 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:15,463 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:15,466 p=2590062 u=root n=ansible | skipping: [bda]
2025-09-28 23:01:15,491 p=2590062 u=root n=ansible | ok: [lb1]
2025-09-28 23:01:15,510 p=2590062 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:01:15,592 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:15,623 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:15,680 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:15,683 p=2590062 u=root n=ansible | skipping: [bda]
2025-09-28 23:01:15,752 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:15,994 p=2590062 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:01:16,179 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:16,184 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:16,219 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:16,222 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:16,262 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:16,274 p=2590062 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:01:16,321 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:16,330 p=2590062 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:01:16,371 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:16,381 p=2590062 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:01:16,416 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:16,427 p=2590062 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:01:16,467 p=2590062 u=root n=ansible | skipping: [bda]
2025-09-28 23:01:16,476 p=2590062 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:01:16,489 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:16,499 p=2590062 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:01:16,642 p=2590062 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-28 23:01:16,645 p=2590062 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-28 23:01:16,681 p=2590062 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-28 23:01:16,681 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:01:16,684 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:16,704 p=2590062 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:01:16,823 p=2590062 u=root n=ansible | ok: [host1]
2025-09-28 23:01:16,878 p=2590062 u=root n=ansible | ok: [host2]
2025-09-28 23:01:16,893 p=2590062 u=root n=ansible | ok: [host3]
2025-09-28 23:01:16,912 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:16,950 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:16,961 p=2590062 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all hosts] ***********************************************************************************************************************************************************************
2025-09-28 23:01:17,117 p=2590062 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset)\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:01:17,158 p=2590062 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset)\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:01:17,159 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:17,207 p=2590062 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset)\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:01:17,219 p=2590062 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset)\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:01:17,359 p=2590062 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 23:01:17,449 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:17,554 p=2590062 u=root n=ansible | TASK [install_elastic : Set discovery configuration] ****************************************************************************************************************************************************************************************
2025-09-28 23:01:17,635 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:17,747 p=2590062 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-28 23:01:17,825 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:17,876 p=2590062 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-28 23:01:17,938 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 23:01:17,943 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 23:01:17,945 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,044 p=2590062 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:01:18,124 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,222 p=2590062 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-28 23:01:18,301 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,355 p=2590062 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-28 23:01:18,426 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,521 p=2590062 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 23:01:18,610 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,692 p=2590062 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-28 23:01:18,736 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:18,845 p=2590062 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 23:01:18,892 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:19,033 p=2590062 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 23:01:19,108 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:19,221 p=2590062 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-28 23:01:19,294 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:19,417 p=2590062 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-28 23:01:19,491 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:19,592 p=2590062 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 23:01:19,667 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:19,691 p=2590062 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 23:01:19,841 p=2590062 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:01:20,025 p=2590062 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:01:20,046 p=2590062 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:01:20,082 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:01:20,177 p=2590062 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 23:01:20,316 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:20,372 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:20,375 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:20,401 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:20,421 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              KIBANA INSTALLATION STARTED                     ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Version: 8.18.2            ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:20,436 p=2590062 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-28 23:01:20,520 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:20,572 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:20,620 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:20,671 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:20,681 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:20,701 p=2590062 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 23:01:20,812 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:20,869 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:20,906 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:20,951 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:22,541 p=2590062 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "redirected": false, "status": -1, "url": "https://192.168.166.130:9200/_cluster/health"}
2025-09-28 23:01:22,542 p=2590062 u=root n=ansible | ...ignoring
2025-09-28 23:01:22,567 p=2590062 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 23:01:22,640 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:22,726 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:22,780 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:22,830 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:22,832 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "📊 Elasticsearch Connection: Failed\n"
}
2025-09-28 23:01:22,858 p=2590062 u=root n=ansible | TASK [install_kibana : Ensure Docker is available] ******************************************************************************************************************************************************************************************
2025-09-28 23:01:22,981 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:23,038 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:23,097 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:23,144 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:24,792 p=2590062 u=root n=ansible | ok: [bda]
2025-09-28 23:01:24,810 p=2590062 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-28 23:01:24,902 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:01:24,907 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:01:24,925 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:01:24,927 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:01:24,938 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:01:24,941 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 23:01:24,962 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:01:24,964 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:24,969 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 23:01:24,971 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:01:24,972 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:01:24,978 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:01:24,983 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:01:25,007 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:01:25,010 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:01:25,013 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:01:25,041 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:25,045 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:25,107 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:01:25,124 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:01:25,145 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:01:25,168 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:01:25,184 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:01:25,187 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:25,962 p=2590062 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana)
2025-09-28 23:01:26,726 p=2590062 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-28 23:01:27,431 p=2590062 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-28 23:01:28,190 p=2590062 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-28 23:01:28,881 p=2590062 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-28 23:01:28,925 p=2590062 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 23:01:29,008 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:29,054 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:29,135 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:29,196 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:30,304 p=2590062 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Source /usr/share/siem/certs/ca/ca.crt not found"}
2025-09-28 23:01:30,321 p=2590062 u=root n=ansible | TASK [install_kibana : Check if Kibana certificate exists] **********************************************************************************************************************************************************************************
2025-09-28 23:01:30,428 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:30,538 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:30,540 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:30,566 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:30,582 p=2590062 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 23:01:30,674 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:30,702 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:30,743 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:30,780 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:30,801 p=2590062 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:01:30,917 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:30,944 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:30,971 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:31,012 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:31,030 p=2590062 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 23:01:31,126 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:31,150 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:31,181 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:31,222 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:31,249 p=2590062 u=root n=ansible | TASK [install_kibana : Sign certificate with CA] ********************************************************************************************************************************************************************************************
2025-09-28 23:01:31,319 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:31,400 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:31,439 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:31,483 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:31,511 p=2590062 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 23:01:31,589 p=2590062 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:01:31,600 p=2590062 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:01:31,628 p=2590062 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:01:31,640 p=2590062 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:01:31,645 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:31,688 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:31,725 p=2590062 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:01:31,730 p=2590062 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:01:31,733 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:31,754 p=2590062 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:01:31,756 p=2590062 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:01:31,758 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:31,787 p=2590062 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 23:01:31,856 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:01:31,887 p=2590062 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:01:31,947 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:31,954 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:01:31,957 p=2590062 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:01:31,973 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:32,004 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:01:32,011 p=2590062 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:01:32,015 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:32,037 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:01:32,039 p=2590062 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:01:32,041 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:32,056 p=2590062 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 23:01:32,138 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:32,171 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:32,212 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:32,278 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:32,314 p=2590062 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 23:01:32,403 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:32,473 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:32,512 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:32,572 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:32,586 p=2590062 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 23:01:32,666 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:32,690 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:32,714 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:32,743 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:32,758 p=2590062 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 23:01:32,873 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:32,909 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:32,947 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:32,981 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:32,995 p=2590062 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 23:01:33,090 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:33,121 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:33,160 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:33,193 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:33,208 p=2590062 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 23:01:33,300 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:33,335 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:33,382 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:33,424 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:33,443 p=2590062 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration] ***************************************************************************************************************************************************************************************
2025-09-28 23:01:33,504 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:33,620 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:33,654 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:33,683 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:33,716 p=2590062 u=root n=ansible | TASK [install_kibana : Generate Docker Compose file] ****************************************************************************************************************************************************************************************
2025-09-28 23:01:33,787 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:33,842 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:33,904 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:33,979 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:34,018 p=2590062 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 23:01:34,121 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:34,146 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:34,182 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:34,234 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:34,270 p=2590062 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file was not created] *************************************************************************************************************************************************************************
2025-09-28 23:01:34,391 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:34,417 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:34,437 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:34,483 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:34,523 p=2590062 u=root n=ansible | TASK [install_kibana : Deploy Kibana using Docker Compose] **********************************************************************************************************************************************************************************
2025-09-28 23:01:34,615 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:34,690 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:34,727 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:34,770 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:34,789 p=2590062 u=root n=ansible | TASK [install_kibana : Verify Kibana installation] ******************************************************************************************************************************************************************************************
2025-09-28 23:01:34,886 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:34,926 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:34,963 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:34,989 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:35,016 p=2590062 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 23:01:35,095 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:35,163 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:35,244 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:35,277 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:35,329 p=2590062 u=root n=ansible | TASK [install_kibana : Handle Kibana installation failure] **********************************************************************************************************************************************************************************
2025-09-28 23:01:35,389 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Kibana installation failed!\n\nTroubleshooting steps:\n1. Check Elasticsearch: curl -k -u elastic:PASSWORD https://192.168.166.130:9200/_cluster/health\n2. Check Docker: systemctl status docker\n3. Check certificates: ls -la /usr/share/siem/kibana/certs/\n4. Check logs: docker logs kibana-bda\n"
}
2025-09-28 23:01:35,606 p=2590062 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 23:01:35,779 p=2590062 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-28T19:31:00Z                      ║\n║ End Time: 2025-09-28T19:31:04Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:35,808 p=2590062 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-28T19:31:01Z                      ║\n║ End Time: 2025-09-28T19:31:04Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:35,820 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:35,824 p=2590062 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-28T19:31:00Z                      ║\n║ End Time: 2025-09-28T19:31:04Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:35,898 p=2590062 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-28T19:31:01Z                      ║\n║ End Time: 2025-09-28T19:31:04Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:01:35,930 p=2590062 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-28 23:01:36,065 p=2590062 u=root n=ansible | skipping: [host1]
2025-09-28 23:01:36,121 p=2590062 u=root n=ansible | skipping: [host2]
2025-09-28 23:01:36,158 p=2590062 u=root n=ansible | skipping: [host3]
2025-09-28 23:01:36,184 p=2590062 u=root n=ansible | skipping: [lb1]
2025-09-28 23:01:36,382 p=2590062 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: If you are using a module and expect the file to exist on the remote, see the remote_src option
2025-09-28 23:01:36,382 p=2590062 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Could not find or access 'cluster-verification.sh.j2'\nSearched in:\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2 on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}
2025-09-28 23:01:36,462 p=2590062 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 23:01:36,462 p=2590062 u=root n=ansible | bda                        : ok=24   changed=2    unreachable=0    failed=1    skipped=3    rescued=2    ignored=1   
2025-09-28 23:01:36,462 p=2590062 u=root n=ansible | host1                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:01:36,462 p=2590062 u=root n=ansible | host2                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:01:36,462 p=2590062 u=root n=ansible | host3                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:01:36,463 p=2590062 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=48   rescued=0    ignored=0   
2025-09-28 23:05:49,187 p=2592324 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 23:05:49,237 p=2592324 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 23:05:52,661 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:05:52,671 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:05:52,820 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:05:52,826 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:05:52,829 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:05:52,847 p=2592324 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 23:05:52,960 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:05:53,003 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:05:53,050 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:05:53,052 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:05:53,084 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:05:53,110 p=2592324 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 23:05:53,249 p=2592324 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:05:53,301 p=2592324 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:05:53,355 p=2592324 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:35:52Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:05:53,357 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:05:53,398 p=2592324 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:05:53,581 p=2592324 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:05:55,588 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:05:55,757 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:05:55,768 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:05:55,871 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:05:55,923 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:05:55,937 p=2592324 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:05:56,071 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:05:56,135 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:05:56,139 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:05:56,139 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:05:56,194 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:05:56,221 p=2592324 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:05:56,268 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:05:56,286 p=2592324 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:05:56,328 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:05:56,357 p=2592324 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:05:56,394 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:05:56,403 p=2592324 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:05:57,617 p=2592324 u=root n=ansible | changed: [host2]
2025-09-28 23:05:57,619 p=2592324 u=root n=ansible | changed: [host3]
2025-09-28 23:05:57,620 p=2592324 u=root n=ansible | changed: [bda]
2025-09-28 23:05:57,620 p=2592324 u=root n=ansible | changed: [lb1]
2025-09-28 23:05:57,621 p=2592324 u=root n=ansible | changed: [host1]
2025-09-28 23:05:57,652 p=2592324 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:05:57,677 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:05:57,697 p=2592324 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:05:59,721 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:05:59,874 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:05:59,902 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:05:59,916 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:05:59,964 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:05:59,978 p=2592324 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:06:01,252 p=2592324 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 23:06:01,275 p=2592324 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 23:06:01,309 p=2592324 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 23:06:01,320 p=2592324 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 23:06:01,402 p=2592324 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:06:01,879 p=2592324 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 23:06:01,890 p=2592324 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 23:06:01,964 p=2592324 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 23:06:01,981 p=2592324 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 23:06:02,157 p=2592324 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:06:02,328 p=2592324 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:06:02,426 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:02,472 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:02,505 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:02,513 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:02,542 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:02,571 p=2592324 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:06:03,421 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:03,458 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:03,521 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:03,561 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:03,586 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:03,597 p=2592324 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:06:04,483 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:04,491 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:04,491 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:04,507 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:04,583 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:04,597 p=2592324 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:06:04,706 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:04,772 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:04,775 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:04,776 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:04,832 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:04,856 p=2592324 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:06:04,990 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:05,045 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:05,087 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:05,090 p=2592324 u=root n=ansible | skipping: [bda]
2025-09-28 23:06:05,877 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:05,903 p=2592324 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:06:05,974 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:06,030 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:06,080 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:06,134 p=2592324 u=root n=ansible | skipping: [bda]
2025-09-28 23:06:06,199 p=2592324 u=root n=ansible | ok: [lb1]
2025-09-28 23:06:06,226 p=2592324 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:06:06,293 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:06,397 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:06,442 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:06,444 p=2592324 u=root n=ansible | skipping: [bda]
2025-09-28 23:06:06,464 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:06,644 p=2592324 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:06:06,755 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:06,791 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:06,797 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:06,835 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:06,859 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:06,880 p=2592324 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:06:06,950 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:06,966 p=2592324 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:06:07,022 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:07,031 p=2592324 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:06:07,061 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:07,068 p=2592324 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:06:07,104 p=2592324 u=root n=ansible | skipping: [bda]
2025-09-28 23:06:07,112 p=2592324 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:06:07,124 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:07,134 p=2592324 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:06:07,253 p=2592324 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-28 23:06:07,292 p=2592324 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-28 23:06:07,297 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:06:07,305 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:07,347 p=2592324 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-28 23:06:07,375 p=2592324 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:06:07,529 p=2592324 u=root n=ansible | ok: [host1]
2025-09-28 23:06:07,597 p=2592324 u=root n=ansible | ok: [host2]
2025-09-28 23:06:07,608 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:07,642 p=2592324 u=root n=ansible | ok: [host3]
2025-09-28 23:06:07,658 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:07,684 p=2592324 u=root n=ansible | TASK [install_elastic : Build comprehensive node list from all hosts] ***********************************************************************************************************************************************************************
2025-09-28 23:06:07,906 p=2592324 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset) | string\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:06:07,910 p=2592324 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset) | string\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:06:07,939 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:07,944 p=2592324 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset) | string\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:06:07,982 p=2592324 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "Unexpected templating type error occurred on ({%- set nodes = [] -%}\n{%- for host_name, host_vars in hostvars.items() -%}\n  {%- if host_vars.elasticsearch_nodes is defined -%}\n    {%- for node in host_vars.elasticsearch_nodes -%}\n      {%- set node_info = {\n        'name': node.name,\n        'host': host_name,\n        'ip': host_vars.ansible_default_ipv4.address,\n        'roles': node.roles,\n        'transport_port': (es_transport_base_port + node.port_offset) | string\n      } -%}\n      {%- set _ = nodes.append(node_info) -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endfor -%}\n{{ nodes }}\n): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-28 23:06:08,065 p=2592324 u=root n=ansible | TASK [install_elastic : Extract master-eligible nodes for discovery] ************************************************************************************************************************************************************************
2025-09-28 23:06:08,129 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:08,218 p=2592324 u=root n=ansible | TASK [install_elastic : Set discovery configuration] ****************************************************************************************************************************************************************************************
2025-09-28 23:06:08,281 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:08,374 p=2592324 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-28 23:06:08,428 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:08,516 p=2592324 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-28 23:06:08,613 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 23:06:08,620 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 23:06:08,622 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:08,709 p=2592324 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:06:08,783 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:08,888 p=2592324 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-28 23:06:08,961 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,011 p=2592324 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-28 23:06:09,076 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,155 p=2592324 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 23:06:09,242 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,330 p=2592324 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-28 23:06:09,398 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,510 p=2592324 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 23:06:09,595 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,693 p=2592324 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 23:06:09,741 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:09,843 p=2592324 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-28 23:06:09,912 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:10,014 p=2592324 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-28 23:06:10,080 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:10,175 p=2592324 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 23:06:10,223 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:10,246 p=2592324 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 23:06:10,388 p=2592324 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:06:10,583 p=2592324 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:06:10,586 p=2592324 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:06:10,635 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:06:10,719 p=2592324 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 23:06:10,829 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:10,883 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:10,938 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:10,966 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              KIBANA INSTALLATION STARTED                     ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Version: 8.18.2            ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:06:10,967 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:10,987 p=2592324 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-28 23:06:11,088 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:11,144 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:11,183 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:11,230 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:11,231 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:11,259 p=2592324 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 23:06:11,379 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:11,431 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:11,476 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:11,496 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:12,691 p=2592324 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "redirected": false, "status": -1, "url": "https://192.168.166.130:9200/_cluster/health"}
2025-09-28 23:06:12,691 p=2592324 u=root n=ansible | ...ignoring
2025-09-28 23:06:12,706 p=2592324 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 23:06:12,825 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:12,872 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:12,874 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:12,899 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "📊 Elasticsearch Connection: Failed\n"
}
2025-09-28 23:06:12,913 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:12,949 p=2592324 u=root n=ansible | TASK [install_kibana : Ensure Docker is available] ******************************************************************************************************************************************************************************************
2025-09-28 23:06:13,023 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:13,115 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:13,161 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:13,185 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:15,036 p=2592324 u=root n=ansible | ok: [bda]
2025-09-28 23:06:15,059 p=2592324 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-28 23:06:15,154 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:06:15,159 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:06:15,160 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:06:15,161 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:06:15,174 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:06:15,193 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 23:06:15,195 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:15,201 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:06:15,203 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:06:15,205 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:06:15,206 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:06:15,224 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 23:06:15,235 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:06:15,237 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:06:15,254 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:06:15,257 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:15,266 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:06:15,294 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:15,371 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:06:15,382 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:06:15,391 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:06:15,397 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:06:15,407 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:06:15,410 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:16,082 p=2592324 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-28 23:06:16,880 p=2592324 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-28 23:06:17,844 p=2592324 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-28 23:06:18,751 p=2592324 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-28 23:06:19,542 p=2592324 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-28 23:06:19,579 p=2592324 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 23:06:19,682 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:19,810 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:19,845 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:19,874 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:20,827 p=2592324 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Source /usr/share/siem/certs/ca/ca.crt not found"}
2025-09-28 23:06:20,859 p=2592324 u=root n=ansible | TASK [install_kibana : Check if Kibana certificate exists] **********************************************************************************************************************************************************************************
2025-09-28 23:06:20,953 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:21,017 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:21,092 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:21,137 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:21,167 p=2592324 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 23:06:21,257 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:21,328 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:21,404 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:21,448 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:21,478 p=2592324 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:06:21,607 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:21,652 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:21,682 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:21,710 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:21,813 p=2592324 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 23:06:21,927 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:21,968 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:21,976 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:22,018 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:22,042 p=2592324 u=root n=ansible | TASK [install_kibana : Sign certificate with CA] ********************************************************************************************************************************************************************************************
2025-09-28 23:06:22,145 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:22,180 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:22,215 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:22,271 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:22,287 p=2592324 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 23:06:22,387 p=2592324 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:06:22,391 p=2592324 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:06:22,396 p=2592324 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:06:22,400 p=2592324 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:06:22,421 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:22,434 p=2592324 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:06:22,444 p=2592324 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:06:22,461 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:22,464 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:22,495 p=2592324 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:06:22,498 p=2592324 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:06:22,500 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:22,527 p=2592324 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 23:06:22,616 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:06:22,618 p=2592324 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:06:22,667 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:22,671 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:06:22,673 p=2592324 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:06:22,700 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:22,715 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:06:22,723 p=2592324 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:06:22,733 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:22,795 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:06:22,805 p=2592324 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:06:22,808 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:22,836 p=2592324 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 23:06:22,973 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:23,004 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:23,044 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:23,087 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:23,108 p=2592324 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 23:06:23,310 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:23,348 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:23,365 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:23,388 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:23,404 p=2592324 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 23:06:23,442 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:23,486 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:23,511 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:23,538 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:23,561 p=2592324 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 23:06:23,735 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:23,819 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:23,836 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:23,860 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:23,876 p=2592324 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 23:06:23,923 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:24,004 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:24,038 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:24,080 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:24,107 p=2592324 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 23:06:24,244 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:24,288 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:24,395 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:24,429 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:24,492 p=2592324 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration] ***************************************************************************************************************************************************************************************
2025-09-28 23:06:24,562 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:24,637 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:24,660 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:24,709 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:24,723 p=2592324 u=root n=ansible | TASK [install_kibana : Generate Docker Compose file] ****************************************************************************************************************************************************************************************
2025-09-28 23:06:24,807 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:24,852 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:24,856 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:24,871 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:24,885 p=2592324 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 23:06:24,943 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:24,983 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:25,041 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:25,080 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:25,098 p=2592324 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file was not created] *************************************************************************************************************************************************************************
2025-09-28 23:06:25,207 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:25,244 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:25,290 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:25,324 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:25,348 p=2592324 u=root n=ansible | TASK [install_kibana : Deploy Kibana using Docker Compose] **********************************************************************************************************************************************************************************
2025-09-28 23:06:25,411 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:25,490 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:25,526 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:25,562 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:25,587 p=2592324 u=root n=ansible | TASK [install_kibana : Verify Kibana installation] ******************************************************************************************************************************************************************************************
2025-09-28 23:06:25,658 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:25,708 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:25,782 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:25,827 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:25,853 p=2592324 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 23:06:25,941 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:25,987 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:26,054 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:26,094 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:26,171 p=2592324 u=root n=ansible | TASK [install_kibana : Handle Kibana installation failure] **********************************************************************************************************************************************************************************
2025-09-28 23:06:26,260 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Kibana installation failed!\n\nTroubleshooting steps:\n1. Check Elasticsearch: curl -k -u elastic:PASSWORD https://192.168.166.130:9200/_cluster/health\n2. Check Docker: systemctl status docker\n3. Check certificates: ls -la /usr/share/siem/kibana/certs/\n4. Check logs: docker logs kibana-bda\n"
}
2025-09-28 23:06:26,462 p=2592324 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 23:06:26,654 p=2592324 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n║ End Time: 2025-09-28T19:35:54Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:06:26,657 p=2592324 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-28T19:35:52Z                      ║\n║ End Time: 2025-09-28T19:35:54Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:06:26,668 p=2592324 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n║ End Time: 2025-09-28T19:35:55Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:06:26,671 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:26,738 p=2592324 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-28T19:35:51Z                      ║\n║ End Time: 2025-09-28T19:35:55Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:06:26,751 p=2592324 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-28 23:06:26,875 p=2592324 u=root n=ansible | skipping: [host1]
2025-09-28 23:06:26,939 p=2592324 u=root n=ansible | skipping: [host2]
2025-09-28 23:06:26,993 p=2592324 u=root n=ansible | skipping: [host3]
2025-09-28 23:06:27,021 p=2592324 u=root n=ansible | skipping: [lb1]
2025-09-28 23:06:27,185 p=2592324 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: If you are using a module and expect the file to exist on the remote, see the remote_src option
2025-09-28 23:06:27,186 p=2592324 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Could not find or access 'cluster-verification.sh.j2'\nSearched in:\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2 on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}
2025-09-28 23:06:27,340 p=2592324 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 23:06:27,340 p=2592324 u=root n=ansible | bda                        : ok=24   changed=1    unreachable=0    failed=1    skipped=3    rescued=2    ignored=1   
2025-09-28 23:06:27,340 p=2592324 u=root n=ansible | host1                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:06:27,340 p=2592324 u=root n=ansible | host2                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:06:27,341 p=2592324 u=root n=ansible | host3                      : ok=17   changed=1    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:06:27,341 p=2592324 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=48   rescued=0    ignored=0   
2025-09-28 23:09:15,731 p=2594596 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 23:09:15,783 p=2594596 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 23:09:19,541 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:19,549 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:19,685 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:19,688 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:19,922 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:19,947 p=2594596 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 23:09:20,084 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:20,143 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:20,207 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:20,210 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:20,246 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:20,266 p=2594596 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 23:09:20,374 p=2594596 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:20,428 p=2594596 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:39:19Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:20,492 p=2594596 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:20,495 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:20,553 p=2594596 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:20,697 p=2594596 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:09:22,586 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:22,798 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:22,946 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:22,972 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:23,052 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:23,069 p=2594596 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:09:23,160 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:23,265 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:23,269 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:23,270 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:23,325 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:23,353 p=2594596 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:09:23,395 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:23,415 p=2594596 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:09:23,447 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:23,465 p=2594596 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:09:23,503 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:23,517 p=2594596 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:09:24,635 p=2594596 u=root n=ansible | changed: [lb1]
2025-09-28 23:09:24,734 p=2594596 u=root n=ansible | changed: [host2]
2025-09-28 23:09:24,774 p=2594596 u=root n=ansible | changed: [bda]
2025-09-28 23:09:24,777 p=2594596 u=root n=ansible | changed: [host1]
2025-09-28 23:09:24,856 p=2594596 u=root n=ansible | changed: [host3]
2025-09-28 23:09:24,879 p=2594596 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:09:24,909 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:24,935 p=2594596 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:09:26,982 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:26,985 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:26,988 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:27,010 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:27,096 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:27,118 p=2594596 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:28,242 p=2594596 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 23:09:28,310 p=2594596 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 23:09:28,311 p=2594596 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:09:28,328 p=2594596 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 23:09:28,379 p=2594596 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 23:09:29,037 p=2594596 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 23:09:29,133 p=2594596 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:09:29,134 p=2594596 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 23:09:29,152 p=2594596 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 23:09:29,199 p=2594596 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 23:09:29,274 p=2594596 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:09:29,397 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:29,464 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:29,517 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:29,519 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:29,545 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:29,566 p=2594596 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:09:30,316 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:30,470 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:30,490 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:30,533 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:30,537 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:30,571 p=2594596 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:09:31,384 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:31,432 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:31,452 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:31,565 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:31,614 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:31,632 p=2594596 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:09:31,719 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:31,771 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:31,836 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:31,903 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:31,957 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:31,985 p=2594596 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:09:32,053 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:32,158 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:32,209 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:32,213 p=2594596 u=root n=ansible | skipping: [bda]
2025-09-28 23:09:33,008 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:33,036 p=2594596 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:09:33,119 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:33,215 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:33,269 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:33,272 p=2594596 u=root n=ansible | skipping: [bda]
2025-09-28 23:09:33,309 p=2594596 u=root n=ansible | ok: [lb1]
2025-09-28 23:09:33,337 p=2594596 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:09:33,415 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:33,480 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:33,590 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:33,593 p=2594596 u=root n=ansible | skipping: [bda]
2025-09-28 23:09:33,617 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:33,746 p=2594596 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:09:33,904 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:33,908 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:33,934 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:33,956 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:34,006 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:34,020 p=2594596 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:09:34,077 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:34,091 p=2594596 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:09:34,142 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:34,155 p=2594596 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:09:34,204 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:34,216 p=2594596 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:09:34,268 p=2594596 u=root n=ansible | skipping: [bda]
2025-09-28 23:09:34,277 p=2594596 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:09:34,290 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:34,298 p=2594596 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:09:34,434 p=2594596 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-28 23:09:34,454 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:34,477 p=2594596 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-28 23:09:34,510 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:09:34,514 p=2594596 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-28 23:09:34,537 p=2594596 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:09:34,799 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:34,812 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:34,835 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:34,860 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:34,906 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:34,937 p=2594596 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-28 23:09:35,153 p=2594596 u=root n=ansible | ok: [host1]
2025-09-28 23:09:35,200 p=2594596 u=root n=ansible | ok: [host2]
2025-09-28 23:09:35,215 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:35,252 p=2594596 u=root n=ansible | ok: [host3]
2025-09-28 23:09:35,323 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:35,346 p=2594596 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:09:35,522 p=2594596 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:09:35,558 p=2594596 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:09:35,604 p=2594596 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:09:35,608 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:35,626 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:09:35,657 p=2594596 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-28 23:09:35,934 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:36,042 p=2594596 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-28 23:09:36,089 p=2594596 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:37,011 p=2594596 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:09:37,029 p=2594596 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:09:37,108 p=2594596 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:09:37,195 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:09:37,889 p=2594596 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:09:37,950 p=2594596 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:09:38,016 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:09:38,040 p=2594596 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:09:38,066 p=2594596 u=root n=ansible | TASK [install_elastic : Install Docker if not present] **************************************************************************************************************************************************************************************
2025-09-28 23:09:39,510 p=2594596 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker.io' is available"}
2025-09-28 23:09:39,520 p=2594596 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker.io' is available"}
2025-09-28 23:09:39,607 p=2594596 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker.io' is available"}
2025-09-28 23:09:39,707 p=2594596 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker.io' is available"}
2025-09-28 23:09:39,800 p=2594596 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-28 23:09:39,890 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 23:09:39,902 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 23:09:39,904 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,022 p=2594596 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:40,105 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,177 p=2594596 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-28 23:09:40,220 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,358 p=2594596 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-28 23:09:40,408 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,495 p=2594596 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 23:09:40,577 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,664 p=2594596 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-28 23:09:40,755 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:40,895 p=2594596 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 23:09:40,961 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:41,054 p=2594596 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 23:09:41,124 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:41,219 p=2594596 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-28 23:09:41,286 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:41,372 p=2594596 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-28 23:09:41,433 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:41,538 p=2594596 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 23:09:41,616 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:41,632 p=2594596 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 23:09:41,765 p=2594596 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:09:41,775 p=2594596 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:09:41,828 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:09:41,830 p=2594596 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:09:41,944 p=2594596 u=root n=ansible | TASK [install_kibana : Display Kibana installation banner] **********************************************************************************************************************************************************************************
2025-09-28 23:09:41,991 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:42,023 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:42,091 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:42,144 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              KIBANA INSTALLATION STARTED                     ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Version: 8.18.2            ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:42,144 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:42,168 p=2594596 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-28 23:09:42,231 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:42,324 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:42,372 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:42,391 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:42,469 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:42,520 p=2594596 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:42,680 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:42,737 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:42,786 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:42,854 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:44,464 p=2594596 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "elapsed": 0, "msg": "Status code was -1 and not [200, 401]: Request failed: <urlopen error [Errno 111] Connection refused>", "redirected": false, "status": -1, "url": "https://192.168.166.130:9200/_cluster/health"}
2025-09-28 23:09:44,464 p=2594596 u=root n=ansible | ...ignoring
2025-09-28 23:09:44,488 p=2594596 u=root n=ansible | TASK [install_kibana : Display Elasticsearch connection status] *****************************************************************************************************************************************************************************
2025-09-28 23:09:44,563 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:44,629 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:44,683 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:44,753 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "📊 Elasticsearch Connection: Failed\n"
}
2025-09-28 23:09:44,774 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:44,794 p=2594596 u=root n=ansible | TASK [install_kibana : Ensure Docker is available] ******************************************************************************************************************************************************************************************
2025-09-28 23:09:44,870 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:44,983 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:45,045 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:45,095 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:46,724 p=2594596 u=root n=ansible | ok: [bda]
2025-09-28 23:09:46,750 p=2594596 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:46,840 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:09:46,848 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:09:46,850 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:09:46,852 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:09:46,854 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:09:46,915 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:46,920 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 23:09:46,923 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:09:46,926 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:09:46,930 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:09:46,939 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:09:46,956 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:46,972 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 23:09:46,984 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:09:46,999 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:09:47,023 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:09:47,025 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:09:47,028 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:47,073 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:09:47,085 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:09:47,097 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:09:47,103 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:09:47,111 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:09:47,113 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:47,769 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-28 23:09:48,502 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-28 23:09:49,169 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-28 23:09:49,774 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-28 23:09:50,488 p=2594596 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-28 23:09:50,509 p=2594596 u=root n=ansible | TASK [install_kibana : Copy Elasticsearch CA certificate] ***********************************************************************************************************************************************************************************
2025-09-28 23:09:50,574 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:50,633 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:50,695 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:50,721 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:51,837 p=2594596 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Source /usr/share/siem/certs/ca/ca.crt not found"}
2025-09-28 23:09:51,878 p=2594596 u=root n=ansible | TASK [install_kibana : Check if Kibana certificate exists] **********************************************************************************************************************************************************************************
2025-09-28 23:09:51,937 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:51,986 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:52,005 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:52,027 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:52,050 p=2594596 u=root n=ansible | TASK [install_kibana : Generate Kibana private key] *****************************************************************************************************************************************************************************************
2025-09-28 23:09:52,124 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:52,183 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:52,234 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:52,300 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:52,325 p=2594596 u=root n=ansible | TASK [install_kibana : Create certificate configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:09:52,390 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:52,467 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:52,509 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:52,530 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:52,555 p=2594596 u=root n=ansible | TASK [install_kibana : Generate certificate request] ****************************************************************************************************************************************************************************************
2025-09-28 23:09:52,622 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:52,677 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:52,722 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:52,879 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:52,895 p=2594596 u=root n=ansible | TASK [install_kibana : Sign certificate with CA] ********************************************************************************************************************************************************************************************
2025-09-28 23:09:52,969 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:53,016 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:53,017 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:53,066 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:53,088 p=2594596 u=root n=ansible | TASK [install_kibana : Set certificate permissions] *****************************************************************************************************************************************************************************************
2025-09-28 23:09:53,199 p=2594596 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:09:53,204 p=2594596 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:09:53,210 p=2594596 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:09:53,216 p=2594596 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:09:53,241 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:53,254 p=2594596 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:09:53,261 p=2594596 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:09:53,279 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:53,282 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:53,350 p=2594596 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.key', 'mode': '0600'}) 
2025-09-28 23:09:53,353 p=2594596 u=root n=ansible | skipping: [lb1] => (item={'path': '/usr/share/siem/kibana/certs/kibana.crt', 'mode': '0644'}) 
2025-09-28 23:09:53,354 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:53,373 p=2594596 u=root n=ansible | TASK [install_kibana : Cleanup temporary files] *********************************************************************************************************************************************************************************************
2025-09-28 23:09:53,449 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:09:53,478 p=2594596 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:09:53,492 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:53,495 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:09:53,505 p=2594596 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:09:53,525 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:09:53,527 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:53,530 p=2594596 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:09:53,532 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:53,578 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.csr) 
2025-09-28 23:09:53,586 p=2594596 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs/kibana.conf) 
2025-09-28 23:09:53,588 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:53,614 p=2594596 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch container is running] *************************************************************************************************************************************************************************
2025-09-28 23:09:53,699 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:53,747 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:53,817 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:53,879 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:53,899 p=2594596 u=root n=ansible | TASK [install_kibana : Check if kibana service token exists] ********************************************************************************************************************************************************************************
2025-09-28 23:09:53,976 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:54,038 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:54,110 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:54,149 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:54,174 p=2594596 u=root n=ansible | TASK [install_kibana : Create service token if needed] **************************************************************************************************************************************************************************************
2025-09-28 23:09:54,286 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:54,320 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:54,357 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:54,400 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:54,421 p=2594596 u=root n=ansible | TASK [install_kibana : Extract service token] ***********************************************************************************************************************************************************************************************
2025-09-28 23:09:54,492 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:54,549 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:54,614 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:54,657 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:54,682 p=2594596 u=root n=ansible | TASK [install_kibana : Get existing service token] ******************************************************************************************************************************************************************************************
2025-09-28 23:09:54,760 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:54,809 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:54,841 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:54,930 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:54,949 p=2594596 u=root n=ansible | TASK [install_kibana : Set service token from existing] *************************************************************************************************************************************************************************************
2025-09-28 23:09:55,026 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:55,061 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:55,096 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:55,147 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:55,175 p=2594596 u=root n=ansible | TASK [install_kibana : Generate Kibana configuration] ***************************************************************************************************************************************************************************************
2025-09-28 23:09:55,259 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:55,312 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:55,390 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:55,435 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:55,463 p=2594596 u=root n=ansible | TASK [install_kibana : Generate Docker Compose file] ****************************************************************************************************************************************************************************************
2025-09-28 23:09:55,552 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:55,618 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:55,680 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:55,702 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:55,737 p=2594596 u=root n=ansible | TASK [install_kibana : Verify docker-compose file was created] ******************************************************************************************************************************************************************************
2025-09-28 23:09:55,814 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:55,869 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:55,943 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:55,986 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:56,013 p=2594596 u=root n=ansible | TASK [install_kibana : Fail if docker-compose file was not created] *************************************************************************************************************************************************************************
2025-09-28 23:09:56,127 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:56,157 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:56,192 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:56,238 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:56,262 p=2594596 u=root n=ansible | TASK [install_kibana : Deploy Kibana using Docker Compose] **********************************************************************************************************************************************************************************
2025-09-28 23:09:56,324 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:56,380 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:56,449 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:56,494 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:56,530 p=2594596 u=root n=ansible | TASK [install_kibana : Verify Kibana installation] ******************************************************************************************************************************************************************************************
2025-09-28 23:09:56,656 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:56,689 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:56,725 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:56,770 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:56,800 p=2594596 u=root n=ansible | TASK [install_kibana : Display installation completion] *************************************************************************************************************************************************************************************
2025-09-28 23:09:56,921 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:56,951 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:56,995 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:57,041 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:57,112 p=2594596 u=root n=ansible | TASK [install_kibana : Handle Kibana installation failure] **********************************************************************************************************************************************************************************
2025-09-28 23:09:57,210 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Kibana installation failed!\n\nTroubleshooting steps:\n1. Check Elasticsearch: curl -k -u elastic:PASSWORD https://192.168.166.130:9200/_cluster/health\n2. Check Docker: systemctl status docker\n3. Check certificates: ls -la /usr/share/siem/kibana/certs/\n4. Check logs: docker logs kibana-bda\n"
}
2025-09-28 23:09:57,436 p=2594596 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 23:09:57,583 p=2594596 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n║ End Time: 2025-09-28T19:39:21Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:57,609 p=2594596 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-28T19:39:19Z                      ║\n║ End Time: 2025-09-28T19:39:22Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:57,613 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:57,636 p=2594596 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n║ End Time: 2025-09-28T19:39:21Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:57,690 p=2594596 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-28T19:39:18Z                      ║\n║ End Time: 2025-09-28T19:39:22Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:09:57,711 p=2594596 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-28 23:09:57,826 p=2594596 u=root n=ansible | skipping: [host1]
2025-09-28 23:09:57,875 p=2594596 u=root n=ansible | skipping: [host2]
2025-09-28 23:09:57,916 p=2594596 u=root n=ansible | skipping: [host3]
2025-09-28 23:09:57,956 p=2594596 u=root n=ansible | skipping: [lb1]
2025-09-28 23:09:58,071 p=2594596 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: If you are using a module and expect the file to exist on the remote, see the remote_src option
2025-09-28 23:09:58,072 p=2594596 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "Could not find or access 'cluster-verification.sh.j2'\nSearched in:\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2\n\t/root/ansible/templates/cluster-verification.sh.j2\n\t/root/ansible/cluster-verification.sh.j2 on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}
2025-09-28 23:09:58,139 p=2594596 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 23:09:58,139 p=2594596 u=root n=ansible | bda                        : ok=28   changed=1    unreachable=0    failed=1    skipped=3    rescued=2    ignored=1   
2025-09-28 23:09:58,139 p=2594596 u=root n=ansible | host1                      : ok=21   changed=2    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:09:58,140 p=2594596 u=root n=ansible | host2                      : ok=21   changed=2    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:09:58,140 p=2594596 u=root n=ansible | host3                      : ok=21   changed=2    unreachable=0    failed=0    skipped=31   rescued=1    ignored=0   
2025-09-28 23:09:58,140 p=2594596 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=47   rescued=0    ignored=0   
2025-09-28 23:15:54,222 p=2597314 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 23:15:54,281 p=2597314 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 23:15:57,778 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:15:57,784 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:15:57,794 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:15:57,829 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:15:58,049 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:15:58,063 p=2597314 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 23:15:58,162 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:15:58,221 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:15:58,276 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:15:58,279 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:15:58,301 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:15:58,332 p=2597314 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 23:15:58,418 p=2597314 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:45:57Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:15:58,480 p=2597314 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:45:56Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:15:58,540 p=2597314 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:45:56Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:15:58,597 p=2597314 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:45:56Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:15:58,622 p=2597314 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:45:56Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:15:58,828 p=2597314 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:16:00,804 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:00,829 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:00,853 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:00,875 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:01,005 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:01,023 p=2597314 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:16:01,136 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:01,184 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:01,210 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:01,218 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:01,262 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:01,279 p=2597314 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:16:01,307 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:01,322 p=2597314 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:16:01,342 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:01,354 p=2597314 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:16:01,378 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:01,390 p=2597314 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:16:02,570 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:02,587 p=2597314 u=root n=ansible | changed: [bda]
2025-09-28 23:16:02,588 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:02,606 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:02,620 p=2597314 u=root n=ansible | changed: [lb1]
2025-09-28 23:16:02,641 p=2597314 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:16:02,655 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:02,667 p=2597314 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:16:04,700 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:04,755 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:04,780 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:04,857 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:04,864 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:04,887 p=2597314 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:16:06,280 p=2597314 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 23:16:06,315 p=2597314 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 23:16:06,329 p=2597314 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 23:16:06,380 p=2597314 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 23:16:06,465 p=2597314 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:16:07,031 p=2597314 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 23:16:07,111 p=2597314 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 23:16:07,126 p=2597314 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 23:16:07,132 p=2597314 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 23:16:07,423 p=2597314 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:16:07,609 p=2597314 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:16:07,672 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:07,742 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:07,777 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:07,786 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:07,821 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:07,834 p=2597314 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:16:08,618 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:08,638 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:08,732 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:08,747 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:08,803 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:08,832 p=2597314 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:16:09,657 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:09,737 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:09,746 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:09,912 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:10,058 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:10,073 p=2597314 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:16:10,159 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:10,197 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:10,235 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:10,247 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:10,287 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:10,368 p=2597314 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:16:10,511 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:10,547 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:10,585 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:10,618 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:11,406 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:11,426 p=2597314 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:16:11,527 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:11,724 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:11,775 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:11,808 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:11,830 p=2597314 u=root n=ansible | ok: [lb1]
2025-09-28 23:16:11,844 p=2597314 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:16:11,939 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:11,993 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:11,995 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:11,995 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:12,013 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:12,127 p=2597314 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:16:12,276 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:12,310 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:12,319 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:12,324 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:12,333 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:12,355 p=2597314 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:16:12,455 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:12,484 p=2597314 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:16:12,548 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:12,561 p=2597314 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:16:12,599 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:12,607 p=2597314 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:16:12,638 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:12,648 p=2597314 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:16:12,659 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:12,667 p=2597314 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:16:12,802 p=2597314 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-28 23:16:12,808 p=2597314 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-28 23:16:12,816 p=2597314 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-28 23:16:12,824 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:12,907 p=2597314 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:16:12,929 p=2597314 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:16:13,056 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:13,174 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:13,177 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:13,206 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:13,295 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:13,319 p=2597314 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-28 23:16:13,542 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:13,586 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:13,588 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:13,708 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:13,741 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:13,757 p=2597314 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:16:13,904 p=2597314 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:16:13,909 p=2597314 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:16:13,933 p=2597314 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:16:13,933 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:13,949 p=2597314 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:16:13,960 p=2597314 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-28 23:16:14,127 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:14,248 p=2597314 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-28 23:16:14,304 p=2597314 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:16:15,170 p=2597314 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:15,242 p=2597314 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:15,425 p=2597314 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:15,463 p=2597314 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:16,035 p=2597314 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:16:16,040 p=2597314 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:16:16,248 p=2597314 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:16:16,495 p=2597314 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:16:16,526 p=2597314 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-28 23:16:16,641 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:16,687 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:16,715 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:16,720 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:16,747 p=2597314 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-28 23:16:16,912 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:16,960 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:16,961 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:17,034 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:17,043 p=2597314 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-28 23:16:17,169 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:17,177 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:17,197 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:17,251 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:17,268 p=2597314 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-28 23:16:17,351 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:17,442 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:17,443 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:17,459 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:17,486 p=2597314 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-28 23:16:18,943 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:18,989 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:19,027 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:19,126 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:19,142 p=2597314 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-28 23:16:20,344 p=2597314 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:16:20,345 p=2597314 u=root n=ansible | ...ignoring
2025-09-28 23:16:20,417 p=2597314 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:16:20,418 p=2597314 u=root n=ansible | ...ignoring
2025-09-28 23:16:20,433 p=2597314 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:16:20,433 p=2597314 u=root n=ansible | ...ignoring
2025-09-28 23:16:20,670 p=2597314 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:16:20,670 p=2597314 u=root n=ansible | ...ignoring
2025-09-28 23:16:20,697 p=2597314 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-28 23:16:20,920 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:20,962 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:20,978 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:21,064 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:21,076 p=2597314 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-28 23:16:21,236 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:21,251 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:21,268 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:21,305 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:21,329 p=2597314 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-28 23:16:21,459 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:21,554 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:21,572 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:21,619 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:21,646 p=2597314 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-28 23:16:21,807 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:21,820 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:21,823 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:21,886 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:21,902 p=2597314 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-28 23:16:24,141 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:24,142 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:24,196 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:24,268 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:24,287 p=2597314 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-28 23:16:25,967 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:25,994 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:26,029 p=2597314 u=root n=ansible | changed: [bda]
2025-09-28 23:16:26,091 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:26,108 p=2597314 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-28 23:16:27,073 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:27,164 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:27,190 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:27,330 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:27,346 p=2597314 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-28 23:16:27,480 p=2597314 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:16:27,511 p=2597314 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:16:27,552 p=2597314 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:16:27,557 p=2597314 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:16:27,576 p=2597314 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 23:16:28,519 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:28,618 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:28,679 p=2597314 u=root n=ansible | changed: [bda]
2025-09-28 23:16:28,764 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:28,784 p=2597314 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 23:16:29,577 p=2597314 u=root n=ansible | ok: [host2]
2025-09-28 23:16:29,612 p=2597314 u=root n=ansible | ok: [host1]
2025-09-28 23:16:29,714 p=2597314 u=root n=ansible | ok: [host3]
2025-09-28 23:16:29,771 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:29,797 p=2597314 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 23:16:29,968 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:30,027 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:30,053 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:30,068 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:30,094 p=2597314 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 23:16:30,290 p=2597314 u=root n=ansible | skipping: [host1]
2025-09-28 23:16:30,326 p=2597314 u=root n=ansible | skipping: [host2]
2025-09-28 23:16:30,339 p=2597314 u=root n=ansible | skipping: [host3]
2025-09-28 23:16:30,395 p=2597314 u=root n=ansible | skipping: [bda]
2025-09-28 23:16:30,422 p=2597314 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 23:16:31,276 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:31,408 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:31,471 p=2597314 u=root n=ansible | changed: [bda]
2025-09-28 23:16:31,546 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:31,571 p=2597314 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 23:16:32,476 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:32,619 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:32,689 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:32,690 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:32,713 p=2597314 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 23:16:34,046 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:34,094 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:34,139 p=2597314 u=root n=ansible | ok: [bda]
2025-09-28 23:16:34,148 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:34,176 p=2597314 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 23:16:35,156 p=2597314 u=root n=ansible | changed: [host2]
2025-09-28 23:16:35,180 p=2597314 u=root n=ansible | changed: [host1]
2025-09-28 23:16:35,233 p=2597314 u=root n=ansible | changed: [host3]
2025-09-28 23:16:35,445 p=2597314 u=root n=ansible | changed: [bda]
2025-09-28 23:16:35,469 p=2597314 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-28 23:16:35,686 p=2597314 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:16:35,716 p=2597314 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:16:35,751 p=2597314 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:16:35,791 p=2597314 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:16:35,810 p=2597314 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-28 23:16:36,097 p=2597314 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 23:16:36,105 p=2597314 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 23:16:36,107 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:36,689 p=2597314 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:36,893 p=2597314 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:36,921 p=2597314 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:36,943 p=2597314 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:16:37,470 p=2597314 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:16:37,761 p=2597314 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:16:37,813 p=2597314 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:16:37,936 p=2597314 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:16:37,959 p=2597314 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:16:38,230 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:38,902 p=2597314 u=root n=ansible | changed: [host2] => (item=master-host2/data)
2025-09-28 23:16:38,965 p=2597314 u=root n=ansible | changed: [host1] => (item=master-host1/data)
2025-09-28 23:16:39,058 p=2597314 u=root n=ansible | changed: [host3] => (item=master-host3/data)
2025-09-28 23:16:39,061 p=2597314 u=root n=ansible | changed: [bda] => (item=bda-master/data)
2025-09-28 23:16:39,750 p=2597314 u=root n=ansible | changed: [host2] => (item=master-host2/logs)
2025-09-28 23:16:39,827 p=2597314 u=root n=ansible | changed: [host1] => (item=master-host1/logs)
2025-09-28 23:16:39,920 p=2597314 u=root n=ansible | changed: [bda] => (item=bda-master/logs)
2025-09-28 23:16:39,924 p=2597314 u=root n=ansible | changed: [host3] => (item=master-host3/logs)
2025-09-28 23:16:40,482 p=2597314 u=root n=ansible | changed: [host2] => (item=master-host2/config)
2025-09-28 23:16:40,626 p=2597314 u=root n=ansible | changed: [bda] => (item=bda-master/config)
2025-09-28 23:16:40,665 p=2597314 u=root n=ansible | changed: [host1] => (item=master-host1/config)
2025-09-28 23:16:40,807 p=2597314 u=root n=ansible | changed: [host3] => (item=master-host3/config)
2025-09-28 23:16:41,381 p=2597314 u=root n=ansible | changed: [host2] => (item=warm-host2/data)
2025-09-28 23:16:41,606 p=2597314 u=root n=ansible | changed: [host1] => (item=hot-host1/data)
2025-09-28 23:16:41,665 p=2597314 u=root n=ansible | changed: [host3] => (item=hot-host3/data)
2025-09-28 23:16:42,210 p=2597314 u=root n=ansible | changed: [host2] => (item=warm-host2/logs)
2025-09-28 23:16:42,492 p=2597314 u=root n=ansible | changed: [host3] => (item=hot-host3/logs)
2025-09-28 23:16:42,550 p=2597314 u=root n=ansible | changed: [host1] => (item=hot-host1/logs)
2025-09-28 23:16:42,993 p=2597314 u=root n=ansible | changed: [host2] => (item=warm-host2/config)
2025-09-28 23:16:43,297 p=2597314 u=root n=ansible | changed: [host1] => (item=hot-host1/config)
2025-09-28 23:16:43,463 p=2597314 u=root n=ansible | changed: [host3] => (item=hot-host3/config)
2025-09-28 23:16:43,876 p=2597314 u=root n=ansible | changed: [host2] => (item=sf-host2/data)
2025-09-28 23:16:44,069 p=2597314 u=root n=ansible | changed: [host1] => (item=ml-host1/data)
2025-09-28 23:16:44,385 p=2597314 u=root n=ansible | changed: [host3] => (item=cold-host3/data)
2025-09-28 23:16:44,767 p=2597314 u=root n=ansible | changed: [host2] => (item=sf-host2/logs)
2025-09-28 23:16:45,155 p=2597314 u=root n=ansible | changed: [host1] => (item=ml-host1/logs)
2025-09-28 23:16:45,352 p=2597314 u=root n=ansible | changed: [host3] => (item=cold-host3/logs)
2025-09-28 23:16:45,719 p=2597314 u=root n=ansible | changed: [host2] => (item=sf-host2/config)
2025-09-28 23:16:46,004 p=2597314 u=root n=ansible | changed: [host1] => (item=ml-host1/config)
2025-09-28 23:16:46,114 p=2597314 u=root n=ansible | changed: [host3] => (item=cold-host3/config)
2025-09-28 23:16:46,147 p=2597314 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-28 23:16:46,419 p=2597314 u=root n=ansible | skipping: [lb1]
2025-09-28 23:16:46,545 p=2597314 u=root n=ansible | ERROR! 'loop' is not a valid attribute for a Block

The error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 60, column 3, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:


- name: Generate node certificates
  ^ here

2025-09-28 23:18:36,536 p=2601343 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-28 23:18:36,596 p=2601343 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-28 23:18:40,032 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:40,103 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:40,135 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:40,143 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:40,452 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:40,473 p=2601343 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-28 23:18:40,587 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:40,633 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:40,683 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:40,687 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:40,711 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:40,733 p=2601343 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-28 23:18:40,842 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:18:40,895 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:18:40,951 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:48:40Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:18:40,954 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:18:40,978 p=2601343 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-28T19:48:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:18:41,171 p=2601343 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-28 23:18:43,219 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:43,234 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:43,335 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:43,370 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:43,452 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:43,468 p=2601343 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-28 23:18:43,587 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:43,657 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:43,702 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:43,711 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:43,748 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:43,767 p=2601343 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-28 23:18:43,805 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:43,832 p=2601343 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-28 23:18:43,862 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:43,878 p=2601343 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-28 23:18:43,906 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:43,917 p=2601343 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-28 23:18:45,159 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:18:45,173 p=2601343 u=root n=ansible | changed: [lb1]
2025-09-28 23:18:45,176 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:18:45,372 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:18:46,153 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:18:46,185 p=2601343 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-28 23:18:46,219 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:46,251 p=2601343 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-28 23:18:48,224 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:48,417 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:18:48,440 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:18:48,492 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:18:48,578 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:48,610 p=2601343 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-28 23:18:49,721 p=2601343 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-28 23:18:49,793 p=2601343 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-28 23:18:49,848 p=2601343 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-28 23:18:49,867 p=2601343 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-28 23:18:49,888 p=2601343 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-28 23:18:50,470 p=2601343 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-28 23:18:50,498 p=2601343 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-28 23:18:50,510 p=2601343 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-28 23:18:50,578 p=2601343 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-28 23:18:50,663 p=2601343 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-28 23:18:50,814 p=2601343 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-28 23:18:50,889 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:50,942 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:51,002 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:51,059 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:51,103 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:51,128 p=2601343 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-28 23:18:51,866 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:51,943 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:52,059 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:52,162 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:52,271 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:52,286 p=2601343 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-28 23:18:53,049 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:53,144 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:53,167 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:53,200 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:53,295 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:53,331 p=2601343 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-28 23:18:53,505 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:53,566 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:53,624 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:53,627 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:53,670 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:53,697 p=2601343 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-28 23:18:53,829 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:53,889 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:18:53,944 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:18:53,948 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:18:54,690 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:54,716 p=2601343 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-28 23:18:54,788 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:54,903 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:18:54,945 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:18:54,950 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:18:55,010 p=2601343 u=root n=ansible | ok: [lb1]
2025-09-28 23:18:55,025 p=2601343 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-28 23:18:55,122 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:55,246 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:18:55,290 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:18:55,298 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:18:55,342 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:55,482 p=2601343 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-28 23:18:55,637 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:55,693 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:55,742 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:55,766 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:55,780 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:55,796 p=2601343 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:18:55,858 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:18:55,872 p=2601343 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:18:55,921 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:18:55,936 p=2601343 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:18:55,999 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:18:56,014 p=2601343 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:18:56,076 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:18:56,090 p=2601343 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-28 23:18:56,111 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:56,126 p=2601343 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-28 23:18:56,303 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-28 23:18:56,337 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:56,343 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-28 23:18:56,349 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-28 23:18:56,416 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-28 23:18:56,440 p=2601343 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-28 23:18:56,615 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:56,617 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:56,643 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:56,661 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:56,667 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:56,703 p=2601343 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-28 23:18:56,938 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:18:56,968 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:57,006 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:18:57,087 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:18:57,174 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:18:57,203 p=2601343 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-28 23:18:57,400 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:18:57,464 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:18:57,466 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:18:57,467 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-28 23:18:57,486 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:57,516 p=2601343 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-28 23:18:57,844 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:18:57,945 p=2601343 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-28 23:18:58,001 p=2601343 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:18:58,919 p=2601343 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:18:58,972 p=2601343 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:18:59,096 p=2601343 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:18:59,287 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:18:59,840 p=2601343 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:18:59,856 p=2601343 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:19:00,115 p=2601343 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:19:00,304 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:19:00,339 p=2601343 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-28 23:19:00,592 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:00,642 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:00,654 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:00,674 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:00,692 p=2601343 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-28 23:19:00,815 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:00,849 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:00,850 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:00,916 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:00,948 p=2601343 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-28 23:19:01,092 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:01,150 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:01,190 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:01,260 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:01,275 p=2601343 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-28 23:19:01,440 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:01,442 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:01,509 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:01,510 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:01,536 p=2601343 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-28 23:19:03,431 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:03,524 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:03,537 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:03,595 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:03,612 p=2601343 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-28 23:19:04,704 p=2601343 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:19:04,705 p=2601343 u=root n=ansible | ...ignoring
2025-09-28 23:19:04,866 p=2601343 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:19:04,866 p=2601343 u=root n=ansible | ...ignoring
2025-09-28 23:19:04,879 p=2601343 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:19:04,880 p=2601343 u=root n=ansible | ...ignoring
2025-09-28 23:19:05,342 p=2601343 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-28 23:19:05,342 p=2601343 u=root n=ansible | ...ignoring
2025-09-28 23:19:05,361 p=2601343 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-28 23:19:05,534 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:05,537 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:05,578 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:05,647 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:05,678 p=2601343 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-28 23:19:05,849 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:05,878 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:05,879 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:05,952 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:05,965 p=2601343 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-28 23:19:06,154 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:06,157 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:06,157 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:06,176 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:06,197 p=2601343 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-28 23:19:06,322 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:06,421 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:06,441 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:06,481 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:06,508 p=2601343 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-28 23:19:08,309 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:08,385 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:08,406 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:08,413 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:08,437 p=2601343 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-28 23:19:09,949 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:09,955 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:10,047 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:10,060 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:10,081 p=2601343 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-28 23:19:10,898 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:11,127 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:11,225 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:11,284 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:11,308 p=2601343 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-28 23:19:11,507 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:19:11,541 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:19:11,585 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:19:11,637 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-28 23:19:11,660 p=2601343 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-28 23:19:12,588 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:12,808 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:12,816 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:12,926 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:19:12,946 p=2601343 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-28 23:19:13,792 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:13,909 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:13,957 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:14,065 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:14,084 p=2601343 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-28 23:19:14,286 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:14,287 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:14,319 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:14,340 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:14,356 p=2601343 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-28 23:19:14,511 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:19:14,546 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:19:14,550 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:19:14,597 p=2601343 u=root n=ansible | skipping: [bda]
2025-09-28 23:19:14,616 p=2601343 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-28 23:19:15,342 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:15,524 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:15,534 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:15,567 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:19:15,587 p=2601343 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-28 23:19:16,434 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:16,507 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:16,629 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:16,694 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:16,710 p=2601343 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-28 23:19:17,811 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:17,849 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:17,871 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:17,884 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:17,898 p=2601343 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-28 23:19:18,777 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:18,915 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:18,953 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:19,081 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:19:19,119 p=2601343 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-28 23:19:19,257 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:19:19,356 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:19:19,391 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:19:19,413 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-28 23:19:19,431 p=2601343 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-28 23:19:19,631 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-28 23:19:19,634 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-28 23:19:19,636 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:19:20,316 p=2601343 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:19:20,399 p=2601343 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:19:20,431 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:19:20,507 p=2601343 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-28 23:19:21,115 p=2601343 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:19:21,292 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:19:21,353 p=2601343 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:19:21,478 p=2601343 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:19:21,507 p=2601343 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-28 23:19:21,815 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:19:22,501 p=2601343 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-28 23:19:22,523 p=2601343 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-28 23:19:22,537 p=2601343 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-28 23:19:22,716 p=2601343 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-28 23:19:23,350 p=2601343 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-28 23:19:23,447 p=2601343 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-28 23:19:23,525 p=2601343 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-28 23:19:23,718 p=2601343 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-28 23:19:24,148 p=2601343 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-28 23:19:24,294 p=2601343 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-28 23:19:24,549 p=2601343 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-28 23:19:24,608 p=2601343 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-28 23:19:25,229 p=2601343 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-28 23:19:25,365 p=2601343 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-28 23:19:25,480 p=2601343 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-28 23:19:26,068 p=2601343 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-28 23:19:26,243 p=2601343 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-28 23:19:26,366 p=2601343 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-28 23:19:26,860 p=2601343 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-28 23:19:27,261 p=2601343 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-28 23:19:27,280 p=2601343 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-28 23:19:27,757 p=2601343 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-28 23:19:28,088 p=2601343 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-28 23:19:28,118 p=2601343 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-28 23:19:28,755 p=2601343 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-28 23:19:28,887 p=2601343 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-28 23:19:29,086 p=2601343 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-28 23:19:29,578 p=2601343 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-28 23:19:29,710 p=2601343 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-28 23:19:29,836 p=2601343 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-28 23:19:29,871 p=2601343 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-28 23:19:30,154 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:19:30,238 p=2601343 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-28 23:19:30,347 p=2601343 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-28 23:19:31,561 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:31,570 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:31,599 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:31,733 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:31,762 p=2601343 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-28 23:19:32,758 p=2601343 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-28 23:19:32,836 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-28 23:19:32,870 p=2601343 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-28 23:19:32,921 p=2601343 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-28 23:19:33,610 p=2601343 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-28 23:19:33,768 p=2601343 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-28 23:19:33,773 p=2601343 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-28 23:19:33,785 p=2601343 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-28 23:19:33,805 p=2601343 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-28 23:19:34,708 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:34,778 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:34,863 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:34,997 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:35,562 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:35,642 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:35,712 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:36,247 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:36,577 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:36,602 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:36,628 p=2601343 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-28 23:19:37,506 p=2601343 u=root n=ansible | ok: [host1]
2025-09-28 23:19:37,509 p=2601343 u=root n=ansible | ok: [host2]
2025-09-28 23:19:37,574 p=2601343 u=root n=ansible | ok: [host3]
2025-09-28 23:19:37,709 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:19:37,742 p=2601343 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-28 23:19:41,720 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:19:41,740 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:41,858 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:45,813 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:45,848 p=2601343 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-28 23:19:46,710 p=2601343 u=root n=ansible | changed: [host1]
2025-09-28 23:19:46,901 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:19:46,931 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:19:46,983 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:19:47,001 p=2601343 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-28 23:19:48,006 p=2601343 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'})
2025-09-28 23:19:48,016 p=2601343 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'})
2025-09-28 23:19:48,070 p=2601343 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'})
2025-09-28 23:19:48,145 p=2601343 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'})
2025-09-28 23:19:48,956 p=2601343 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'})
2025-09-28 23:19:49,021 p=2601343 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'})
2025-09-28 23:19:49,068 p=2601343 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'})
2025-09-28 23:19:49,116 p=2601343 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'})
2025-09-28 23:19:49,141 p=2601343 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-28 23:19:50,638 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:50,653 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:50,666 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:51,786 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:52,056 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:52,156 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:53,141 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:53,311 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:53,414 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:55,023 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:55,053 p=2601343 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-28 23:19:55,950 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:56,100 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:56,184 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:56,304 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:56,842 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:56,865 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:57,113 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:19:57,750 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:57,819 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:57,977 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:19:58,006 p=2601343 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-28 23:19:59,048 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:59,229 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:59,231 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:19:59,283 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:00,095 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:00,174 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:00,213 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:00,989 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:01,216 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:01,260 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:01,285 p=2601343 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-28 23:20:02,242 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:02,323 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:02,410 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:02,528 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:03,178 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:03,183 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:03,272 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:03,951 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:04,157 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:04,164 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:04,181 p=2601343 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-28 23:20:05,157 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:05,273 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:05,320 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:05,405 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:06,042 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:06,176 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:06,310 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:06,893 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:07,142 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:07,171 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:07,206 p=2601343 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-28 23:20:08,228 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:08,310 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:08,343 p=2601343 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:08,444 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:09,032 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:09,151 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:09,298 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-28 23:20:09,898 p=2601343 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:09,994 p=2601343 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-28 23:20:10,192 p=2601343 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-28 23:20:10,221 p=2601343 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-28 23:20:10,382 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-28 23:20:10,414 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-28 23:20:10,437 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-28 23:20:10,450 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-28 23:20:10,469 p=2601343 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-28 23:20:10,769 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:12,458 p=2601343 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 23:20:12,502 p=2601343 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-28 23:20:12,540 p=2601343 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 23:20:12,913 p=2601343 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 23:20:14,212 p=2601343 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 23:20:14,244 p=2601343 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 23:20:15,245 p=2601343 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 23:20:15,499 p=2601343 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 23:20:15,905 p=2601343 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 23:20:16,825 p=2601343 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 23:20:16,852 p=2601343 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-28 23:20:17,138 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:18,435 p=2601343 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-28 23:20:18,494 p=2601343 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-28 23:20:18,694 p=2601343 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-28 23:20:19,050 p=2601343 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-28 23:20:20,073 p=2601343 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-28 23:20:20,536 p=2601343 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-28 23:20:21,451 p=2601343 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-28 23:20:21,958 p=2601343 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-28 23:20:22,153 p=2601343 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-28 23:20:23,074 p=2601343 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-28 23:20:23,103 p=2601343 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-28 23:20:23,409 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:23,418 p=2601343 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-28 23:20:23,421 p=2601343 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-28 23:20:23,512 p=2601343 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-28 23:20:23,513 p=2601343 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-28 23:20:23,521 p=2601343 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-28 23:20:23,521 p=2601343 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-28 23:20:23,618 p=2601343 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-28 23:20:23,620 p=2601343 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-28 23:20:23,749 p=2601343 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-28 23:20:23,843 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:23,912 p=2601343 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-28 23:20:23,957 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:24,034 p=2601343 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-28 23:20:24,093 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:24,157 p=2601343 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-28 23:20:24,222 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:24,355 p=2601343 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-28 23:20:24,401 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:24,429 p=2601343 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-28 23:20:24,556 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:20:24,612 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:20:24,626 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:20:24,742 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-28 23:20:24,854 p=2601343 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-28 23:20:24,950 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:24,986 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:25,028 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:25,059 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:25,119 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:20:25,140 p=2601343 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-28 23:20:25,207 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:25,295 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:25,343 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:25,394 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:26,844 p=2601343 u=root n=ansible | ok: [bda]
2025-09-28 23:20:26,865 p=2601343 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-28 23:20:26,952 p=2601343 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:20:26,966 p=2601343 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:20:26,977 p=2601343 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:20:27,000 p=2601343 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:20:27,003 p=2601343 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:20:27,005 p=2601343 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-28 23:20:27,020 p=2601343 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:20:27,047 p=2601343 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:20:27,050 p=2601343 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:20:27,072 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:27,081 p=2601343 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:20:27,087 p=2601343 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-28 23:20:27,090 p=2601343 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:20:27,092 p=2601343 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:20:27,098 p=2601343 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:20:27,101 p=2601343 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:20:27,139 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:27,142 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:27,213 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-28 23:20:27,221 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-28 23:20:27,236 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-28 23:20:27,250 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-28 23:20:27,258 p=2601343 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-28 23:20:27,260 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:28,066 p=2601343 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana)
2025-09-28 23:20:29,016 p=2601343 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-28 23:20:30,078 p=2601343 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-28 23:20:30,776 p=2601343 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-28 23:20:31,494 p=2601343 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-28 23:20:31,512 p=2601343 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-28 23:20:31,579 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:31,623 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:31,724 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:31,751 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:32,547 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:20:32,576 p=2601343 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-28 23:20:32,642 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:32,722 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:32,767 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:32,823 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:34,309 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:20:34,345 p=2601343 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-28 23:20:34,437 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:34,541 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:34,593 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:34,633 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:36,004 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:20:36,017 p=2601343 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-28 23:20:36,078 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:36,132 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:36,190 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:36,286 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:40,828 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:20:40,848 p=2601343 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-28 23:20:41,002 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:41,070 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:41,135 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:41,140 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-28 23:20:41,172 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:41,522 p=2601343 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-28 23:20:42,364 p=2601343 u=root n=ansible | changed: [host2]
2025-09-28 23:20:42,389 p=2601343 u=root n=ansible | changed: [bda]
2025-09-28 23:20:42,456 p=2601343 u=root n=ansible | changed: [host3]
2025-09-28 23:20:42,474 p=2601343 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-28 23:20:42,673 p=2601343 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n║ End Time: 2025-09-28T19:48:42Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:20:42,719 p=2601343 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n║ End Time: 2025-09-28T19:48:42Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:20:42,745 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:42,746 p=2601343 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-28T19:48:40Z                      ║\n║ End Time: 2025-09-28T19:48:43Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:20:42,770 p=2601343 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-28T19:48:39Z                      ║\n║ End Time: 2025-09-28T19:48:42Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-28 23:20:42,792 p=2601343 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-28 23:20:42,856 p=2601343 u=root n=ansible | skipping: [host1]
2025-09-28 23:20:42,901 p=2601343 u=root n=ansible | skipping: [host2]
2025-09-28 23:20:42,987 p=2601343 u=root n=ansible | skipping: [host3]
2025-09-28 23:20:43,033 p=2601343 u=root n=ansible | skipping: [lb1]
2025-09-28 23:20:43,297 p=2601343 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-28 23:20:43,298 p=2601343 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-28 23:20:43,434 p=2601343 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-28 23:20:43,434 p=2601343 u=root n=ansible | bda                        : ok=63   changed=22   unreachable=0    failed=1    skipped=12   rescued=1    ignored=1   
2025-09-28 23:20:43,435 p=2601343 u=root n=ansible | host1                      : ok=54   changed=18   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-28 23:20:43,435 p=2601343 u=root n=ansible | host2                      : ok=55   changed=20   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-28 23:20:43,435 p=2601343 u=root n=ansible | host3                      : ok=55   changed=20   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-28 23:20:43,435 p=2601343 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 09:12:46,226 p=467625 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:12:46,278 p=467625 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:12:49,764 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:12:49,900 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:12:49,904 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:12:50,282 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:12:50,544 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:12:50,563 p=467625 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:12:50,643 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:12:50,689 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:12:50,724 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:12:50,727 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:12:50,769 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:12:50,800 p=467625 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:12:50,897 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:12:50,955 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:42:48Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:12:51,027 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:12:51,067 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:12:51,067 p=467625 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:42:48Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:12:51,234 p=467625 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:12:53,281 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:12:53,453 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:12:53,603 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:12:53,649 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:12:53,718 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:12:53,755 p=467625 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:12:53,897 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:12:53,972 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:12:53,974 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:12:53,999 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:12:54,023 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:12:54,064 p=467625 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:12:54,112 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:12:54,128 p=467625 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:12:54,154 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:12:54,171 p=467625 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:12:54,199 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:12:54,216 p=467625 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:12:55,457 p=467625 u=root n=ansible | changed: [lb1]
2025-09-29 09:12:55,544 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:12:55,548 p=467625 u=root n=ansible | changed: [bda]
2025-09-29 09:12:55,553 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:12:56,573 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:12:56,602 p=467625 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:12:56,621 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:12:56,637 p=467625 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:12:58,807 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:12:59,113 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:12:59,236 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:12:59,269 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:12:59,286 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:12:59,299 p=467625 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:13:00,538 p=467625 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:13:00,567 p=467625 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:13:00,624 p=467625 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:13:00,665 p=467625 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:13:00,668 p=467625 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:13:01,260 p=467625 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:13:01,297 p=467625 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:13:01,300 p=467625 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:13:01,379 p=467625 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:13:01,424 p=467625 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:13:01,534 p=467625 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:13:01,650 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:01,699 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:01,756 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:01,759 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:01,804 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:01,831 p=467625 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:13:02,695 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:02,701 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:02,710 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:02,860 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:02,913 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:02,936 p=467625 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:13:03,697 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:03,783 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:03,890 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:03,901 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:03,949 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:03,979 p=467625 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:13:04,066 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:04,110 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:04,144 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:04,157 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:04,198 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:04,216 p=467625 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:13:04,273 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:04,325 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:04,371 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:04,427 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:05,177 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:05,202 p=467625 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:13:05,291 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:05,390 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:05,429 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:05,435 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:05,512 p=467625 u=root n=ansible | ok: [lb1]
2025-09-29 09:13:05,537 p=467625 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:13:05,656 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:05,714 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:05,764 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:05,767 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:05,823 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:05,971 p=467625 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:13:06,136 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:06,138 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:06,151 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:06,160 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:06,172 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:06,192 p=467625 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:13:06,255 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:06,269 p=467625 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:13:06,336 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:06,353 p=467625 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:13:06,409 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:06,425 p=467625 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:13:06,462 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:06,470 p=467625 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:13:06,483 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:06,496 p=467625 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:13:06,639 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:13:06,686 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:06,689 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:13:06,693 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:13:06,720 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:13:06,743 p=467625 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:13:06,879 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:06,994 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:06,996 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:07,022 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:07,121 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:07,144 p=467625 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:13:07,419 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:07,428 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:07,430 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:07,524 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:07,545 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:07,559 p=467625 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:13:07,660 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:13:07,741 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:13:07,753 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:13:07,790 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:07,796 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:13:07,821 p=467625 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:13:08,115 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:08,239 p=467625 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:13:08,309 p=467625 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:13:09,223 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:09,226 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:09,318 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:09,547 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:10,144 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:13:10,155 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:13:10,227 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:13:10,317 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:13:10,332 p=467625 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:13:10,461 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:10,500 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:10,571 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:10,611 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:10,623 p=467625 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:13:10,738 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:10,751 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:10,801 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:10,858 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:10,897 p=467625 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:13:11,052 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:11,137 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:11,165 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:11,190 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:11,206 p=467625 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:13:11,353 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:11,354 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:11,394 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:11,414 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:11,430 p=467625 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:13:12,890 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:12,964 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:13,097 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:13,391 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:13,409 p=467625 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:13:14,399 p=467625 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:13:14,400 p=467625 u=root n=ansible | ...ignoring
2025-09-29 09:13:14,612 p=467625 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:13:14,613 p=467625 u=root n=ansible | ...ignoring
2025-09-29 09:13:14,662 p=467625 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:13:14,662 p=467625 u=root n=ansible | ...ignoring
2025-09-29 09:13:14,998 p=467625 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:13:14,998 p=467625 u=root n=ansible | ...ignoring
2025-09-29 09:13:15,023 p=467625 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:13:15,233 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:15,235 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:15,239 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:15,308 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:15,323 p=467625 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:13:15,464 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:15,493 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:15,558 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:15,565 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:15,579 p=467625 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:13:15,744 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:15,766 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:15,799 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:15,810 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:15,828 p=467625 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:13:15,967 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:16,148 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:16,160 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:16,177 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:16,197 p=467625 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:13:18,024 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:18,038 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:18,060 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:18,206 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:18,229 p=467625 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:13:19,804 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:19,934 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:20,026 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:20,046 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:20,076 p=467625 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:13:21,171 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:21,231 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:21,262 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:21,387 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:21,417 p=467625 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:13:21,581 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:13:21,613 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:13:21,622 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:13:21,657 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:13:21,669 p=467625 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:13:22,666 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:13:22,680 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:13:22,687 p=467625 u=root n=ansible | changed: [bda]
2025-09-29 09:13:22,715 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:13:22,735 p=467625 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:13:23,625 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:23,677 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:23,702 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:23,759 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:23,795 p=467625 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:13:23,939 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:24,037 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:24,039 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:24,128 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:24,148 p=467625 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:13:24,291 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:24,318 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:24,319 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:24,394 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:24,407 p=467625 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:13:25,438 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:13:25,486 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:13:25,527 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:13:25,656 p=467625 u=root n=ansible | changed: [bda]
2025-09-29 09:13:25,681 p=467625 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:13:26,523 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:13:26,751 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:13:26,836 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:13:26,862 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:26,880 p=467625 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:13:28,279 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:28,293 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:28,335 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:28,407 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:28,437 p=467625 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:13:29,301 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:13:29,365 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:13:29,465 p=467625 u=root n=ansible | changed: [bda]
2025-09-29 09:13:29,553 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:13:29,570 p=467625 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:13:29,743 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:13:29,766 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:13:29,781 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:13:29,837 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:13:29,860 p=467625 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:13:30,131 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:13:30,147 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:13:30,149 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:30,649 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:30,806 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:30,846 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:30,996 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:13:31,427 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:13:31,661 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:13:31,705 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:13:31,742 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:13:31,775 p=467625 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:13:32,058 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:32,599 p=467625 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:13:32,747 p=467625 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:13:32,755 p=467625 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:13:32,806 p=467625 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:13:33,384 p=467625 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:13:33,709 p=467625 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:13:33,756 p=467625 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:13:33,836 p=467625 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:13:34,395 p=467625 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:13:34,635 p=467625 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:13:34,720 p=467625 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:13:34,885 p=467625 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:13:35,273 p=467625 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:13:35,480 p=467625 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:13:35,966 p=467625 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:13:36,196 p=467625 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:13:36,381 p=467625 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:13:36,907 p=467625 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:13:37,111 p=467625 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:13:37,235 p=467625 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:13:37,763 p=467625 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:13:38,058 p=467625 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:13:38,161 p=467625 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:13:38,751 p=467625 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:13:39,031 p=467625 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:13:39,093 p=467625 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:13:39,540 p=467625 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:13:39,935 p=467625 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:13:39,998 p=467625 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:13:40,469 p=467625 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:13:40,500 p=467625 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:13:40,784 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:13:40,850 p=467625 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:13:40,956 p=467625 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:13:42,180 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:42,219 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:42,291 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:42,293 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:42,316 p=467625 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:13:43,463 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:13:43,489 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:13:43,492 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:13:43,535 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:13:44,231 p=467625 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:13:44,326 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:13:44,450 p=467625 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:13:44,489 p=467625 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:13:44,508 p=467625 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:13:45,342 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:45,348 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:45,529 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:45,693 p=467625 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:46,069 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:46,111 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:46,351 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:46,894 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:46,966 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:47,178 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:47,202 p=467625 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:13:48,096 p=467625 u=root n=ansible | ok: [host1]
2025-09-29 09:13:48,115 p=467625 u=root n=ansible | ok: [host2]
2025-09-29 09:13:48,385 p=467625 u=root n=ansible | ok: [host3]
2025-09-29 09:13:48,478 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:13:48,493 p=467625 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:13:48,623 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:48,671 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:48,743 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:48,776 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:48,798 p=467625 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:13:48,980 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:49,035 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:49,036 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:49,103 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:49,124 p=467625 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:13:49,286 p=467625 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:13:49,290 p=467625 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:13:49,346 p=467625 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:13:49,350 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:13:49,390 p=467625 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:13:49,393 p=467625 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:13:49,396 p=467625 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:13:49,398 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:13:49,470 p=467625 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:13:49,475 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:13:49,523 p=467625 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:13:49,525 p=467625 u=root n=ansible | skipping: [bda]
2025-09-29 09:13:49,545 p=467625 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:13:50,951 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:51,045 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:51,401 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:52,120 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:52,172 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:52,567 p=467625 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:52,918 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:53,294 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:53,623 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:54,565 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:54,607 p=467625 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:13:55,563 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:55,604 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:55,656 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:55,694 p=467625 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:56,535 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:56,559 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:56,595 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:57,469 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:57,554 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:57,582 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:13:57,604 p=467625 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:13:58,753 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:58,808 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:58,888 p=467625 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:58,942 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:13:59,686 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:13:59,875 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:00,075 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:00,719 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:00,988 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:01,078 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:01,107 p=467625 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:14:01,991 p=467625 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:02,074 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:02,091 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:02,122 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:02,912 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:03,078 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:03,129 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:03,951 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:03,958 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:03,984 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:04,005 p=467625 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:14:04,974 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:05,106 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:05,164 p=467625 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:05,199 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:05,831 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:05,885 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:06,113 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:06,847 p=467625 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:06,894 p=467625 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:07,086 p=467625 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:07,114 p=467625 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:14:08,040 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:08,091 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:08,229 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:08,320 p=467625 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:08,852 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:08,896 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:09,128 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:14:09,778 p=467625 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:09,819 p=467625 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:14:09,859 p=467625 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:14:09,883 p=467625 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:14:10,096 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:14:10,131 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:14:10,132 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:14:10,172 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:14:10,188 p=467625 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:14:10,468 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:11,945 p=467625 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:14:12,020 p=467625 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:14:12,055 p=467625 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:14:12,638 p=467625 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:14:13,649 p=467625 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:14:13,706 p=467625 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:14:14,933 p=467625 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:14:15,295 p=467625 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:14:15,482 p=467625 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:14:16,593 p=467625 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:14:16,616 p=467625 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:14:16,824 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:18,075 p=467625 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:14:18,308 p=467625 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:14:18,475 p=467625 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:14:18,747 p=467625 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:14:19,647 p=467625 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:14:19,942 p=467625 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:14:21,225 p=467625 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:14:21,318 p=467625 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:14:21,873 p=467625 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:14:22,866 p=467625 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:14:22,902 p=467625 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:14:23,254 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:23,270 p=467625 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:         - subnet: "{{ docker_network_subnet }}"): can only concatenate str (not "int") to str. can only concatenate str (not "int") to str
2025-09-29 09:14:23,271 p=467625 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "AnsibleError: Unexpected templating type error occurred on (version: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      - \"node.roles=[{% for role in node.roles %}\"{{ role }}\"{% if not loop.last %},{% endif %}{% endfor %}]\"\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      - \"xpack.security.enabled=true\"\n      - \"xpack.security.http.ssl.enabled={{ es_enable_http_ssl }}\"\n      - \"xpack.security.transport.ssl.enabled={{ es_enable_transport_ssl }}\"\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ es_transport_base_port + node.port_offset }}:9300\"\n\n    volumes:\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/config:/usr/share/elasticsearch/config:ro,Z\"\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n\n    user: \"1000:1000\"\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 09:14:23,310 p=467625 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:         - subnet: "{{ docker_network_subnet }}"): can only concatenate str (not "int") to str. can only concatenate str (not "int") to str
2025-09-29 09:14:23,311 p=467625 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "AnsibleError: Unexpected templating type error occurred on (version: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      - \"node.roles=[{% for role in node.roles %}\"{{ role }}\"{% if not loop.last %},{% endif %}{% endfor %}]\"\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      - \"xpack.security.enabled=true\"\n      - \"xpack.security.http.ssl.enabled={{ es_enable_http_ssl }}\"\n      - \"xpack.security.transport.ssl.enabled={{ es_enable_transport_ssl }}\"\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ es_transport_base_port + node.port_offset }}:9300\"\n\n    volumes:\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/config:/usr/share/elasticsearch/config:ro,Z\"\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n\n    user: \"1000:1000\"\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 09:14:23,402 p=467625 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:         - subnet: "{{ docker_network_subnet }}"): can only concatenate str (not "int") to str. can only concatenate str (not "int") to str
2025-09-29 09:14:23,403 p=467625 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "AnsibleError: Unexpected templating type error occurred on (version: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      - \"node.roles=[{% for role in node.roles %}\"{{ role }}\"{% if not loop.last %},{% endif %}{% endfor %}]\"\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      - \"xpack.security.enabled=true\"\n      - \"xpack.security.http.ssl.enabled={{ es_enable_http_ssl }}\"\n      - \"xpack.security.transport.ssl.enabled={{ es_enable_transport_ssl }}\"\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ es_transport_base_port + node.port_offset }}:9300\"\n\n    volumes:\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/config:/usr/share/elasticsearch/config:ro,Z\"\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n\n    user: \"1000:1000\"\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 09:14:23,465 p=467625 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:         - subnet: "{{ docker_network_subnet }}"): can only concatenate str (not "int") to str. can only concatenate str (not "int") to str
2025-09-29 09:14:23,466 p=467625 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: Unexpected templating type error occurred on (version: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      - \"node.roles=[{% for role in node.roles %}\"{{ role }}\"{% if not loop.last %},{% endif %}{% endfor %}]\"\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      - \"xpack.security.enabled=true\"\n      - \"xpack.security.http.ssl.enabled={{ es_enable_http_ssl }}\"\n      - \"xpack.security.transport.ssl.enabled={{ es_enable_transport_ssl }}\"\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ es_http_base_port + node.port_offset }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ es_transport_base_port + node.port_offset }}:9300\"\n\n    volumes:\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      - \"{{ elasticsearch_base_path }}/{{ node.name }}/config:/usr/share/elasticsearch/config:ro,Z\"\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n\n    user: \"1000:1000\"\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 09:14:23,560 p=467625 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:14:23,636 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:23,746 p=467625 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:14:23,794 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:23,851 p=467625 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:14:23,925 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:23,996 p=467625 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 09:14:24,053 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:24,155 p=467625 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 09:14:24,208 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:24,223 p=467625 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 09:14:24,404 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:14:24,407 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:14:24,416 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:14:24,502 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:14:24,611 p=467625 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 09:14:24,681 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:24,749 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:24,813 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:24,935 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:24,958 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:14:24,990 p=467625 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 09:14:25,146 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:25,209 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:25,264 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:25,313 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:27,037 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:14:27,052 p=467625 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 09:14:27,149 p=467625 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:14:27,175 p=467625 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:14:27,198 p=467625 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:14:27,200 p=467625 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:14:27,202 p=467625 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:14:27,203 p=467625 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:14:27,204 p=467625 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:14:27,208 p=467625 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:14:27,209 p=467625 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:14:27,211 p=467625 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:14:27,267 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:27,276 p=467625 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:14:27,278 p=467625 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:14:27,283 p=467625 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:14:27,285 p=467625 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:14:27,299 p=467625 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:14:27,308 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:27,318 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:27,353 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:14:27,358 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:14:27,364 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:14:27,369 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:14:27,374 p=467625 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:14:27,375 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:28,231 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:14:28,988 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:14:29,783 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:14:30,589 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:14:31,367 p=467625 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:14:31,388 p=467625 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 09:14:31,492 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:31,560 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:31,615 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:31,661 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:32,351 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:14:32,375 p=467625 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 09:14:32,488 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:32,550 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:32,601 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:32,645 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:34,113 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:14:34,130 p=467625 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 09:14:34,215 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:34,246 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:34,285 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:34,348 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:35,854 p=467625 u=root n=ansible | ok: [bda]
2025-09-29 09:14:35,870 p=467625 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 09:14:35,958 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:35,991 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:36,025 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:36,060 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:42,115 p=467625 u=root n=ansible | changed: [bda]
2025-09-29 09:14:42,135 p=467625 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 09:14:42,257 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:42,335 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:42,392 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:42,427 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:42,446 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 09:14:42,698 p=467625 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 09:14:43,562 p=467625 u=root n=ansible | changed: [host1]
2025-09-29 09:14:43,563 p=467625 u=root n=ansible | changed: [host2]
2025-09-29 09:14:43,700 p=467625 u=root n=ansible | changed: [host3]
2025-09-29 09:14:43,718 p=467625 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 09:14:43,907 p=467625 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T05:42:48Z                      ║\n║ End Time: 2025-09-29T05:42:52Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:14:43,908 p=467625 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n║ End Time: 2025-09-29T05:42:52Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:14:43,925 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:43,990 p=467625 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n║ End Time: 2025-09-29T05:42:52Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:14:44,020 p=467625 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T05:42:49Z                      ║\n║ End Time: 2025-09-29T05:42:52Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:14:44,047 p=467625 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 09:14:44,119 p=467625 u=root n=ansible | skipping: [host1]
2025-09-29 09:14:44,179 p=467625 u=root n=ansible | skipping: [host2]
2025-09-29 09:14:44,234 p=467625 u=root n=ansible | skipping: [host3]
2025-09-29 09:14:44,305 p=467625 u=root n=ansible | skipping: [lb1]
2025-09-29 09:14:44,444 p=467625 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 09:14:44,444 p=467625 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 09:14:44,548 p=467625 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 09:14:44,548 p=467625 u=root n=ansible | bda                        : ok=59   changed=10   unreachable=0    failed=1    skipped=15   rescued=1    ignored=1   
2025-09-29 09:14:44,549 p=467625 u=root n=ansible | host1                      : ok=52   changed=12   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 09:14:44,549 p=467625 u=root n=ansible | host2                      : ok=52   changed=12   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 09:14:44,549 p=467625 u=root n=ansible | host3                      : ok=52   changed=12   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 09:14:44,549 p=467625 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 09:15:36,340 p=484746 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:15:36,378 p=484746 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:15:39,128 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:39,214 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:39,261 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:39,394 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:39,412 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:39,441 p=484746 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:15:39,571 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:39,625 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:39,679 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:39,682 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:39,698 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:39,723 p=484746 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:15:39,855 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:45:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:15:39,897 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:45:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:15:39,925 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:45:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:15:39,933 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:45:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:15:39,986 p=484746 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:45:38Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:15:40,169 p=484746 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:15:42,318 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:42,330 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:42,336 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:42,361 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:42,447 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:42,470 p=484746 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:15:42,572 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:42,621 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:42,676 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:42,683 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:42,717 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:42,742 p=484746 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:15:42,788 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:42,813 p=484746 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:15:42,843 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:42,859 p=484746 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:15:42,887 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:42,903 p=484746 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:15:44,089 p=484746 u=root n=ansible | changed: [bda]
2025-09-29 09:15:44,092 p=484746 u=root n=ansible | changed: [lb1]
2025-09-29 09:15:44,130 p=484746 u=root n=ansible | changed: [host1]
2025-09-29 09:15:44,198 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:15:44,201 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:15:44,226 p=484746 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:15:44,294 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:44,348 p=484746 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:15:46,700 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:47,111 p=484746 u=root n=ansible | changed: [bda]
2025-09-29 09:15:47,123 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:15:47,164 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:15:47,299 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:47,321 p=484746 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:15:48,513 p=484746 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:15:48,541 p=484746 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:15:48,621 p=484746 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:15:48,646 p=484746 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:15:48,676 p=484746 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:15:49,193 p=484746 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:15:49,212 p=484746 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:15:49,458 p=484746 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:15:49,471 p=484746 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:15:49,536 p=484746 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:15:49,653 p=484746 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:15:49,734 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:49,823 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:49,901 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:49,905 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:49,929 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:49,959 p=484746 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:15:50,826 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:50,871 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:50,876 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:51,029 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:51,126 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:51,150 p=484746 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:15:52,051 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:52,078 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:52,258 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:52,300 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:52,403 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:52,428 p=484746 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:15:52,550 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:52,612 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:52,658 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:52,666 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:52,709 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:52,754 p=484746 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:15:52,871 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:52,957 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:52,982 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:52,993 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:53,782 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:53,815 p=484746 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:15:53,944 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:53,997 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:54,049 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:54,052 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:54,076 p=484746 u=root n=ansible | ok: [lb1]
2025-09-29 09:15:54,104 p=484746 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:15:54,171 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:54,220 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:54,292 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:54,402 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:54,427 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:54,577 p=484746 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:15:54,742 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:54,747 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:54,784 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:54,845 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:54,861 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:54,893 p=484746 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:15:54,985 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:54,994 p=484746 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:15:55,029 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:55,038 p=484746 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:15:55,075 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:55,084 p=484746 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:15:55,119 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:55,127 p=484746 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:15:55,140 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:55,150 p=484746 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:15:55,320 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:15:55,322 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:15:55,343 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:55,344 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:15:55,389 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:15:55,402 p=484746 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:15:55,517 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:55,585 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:55,588 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:55,615 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:55,621 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:55,644 p=484746 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:15:55,866 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:55,897 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:55,897 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:55,957 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:55,959 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:55,976 p=484746 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:15:56,061 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:15:56,136 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:15:56,138 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:15:56,171 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:56,171 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:15:56,190 p=484746 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:15:56,427 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:15:56,486 p=484746 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:15:56,550 p=484746 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:15:57,460 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:15:57,498 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:15:57,558 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:15:57,701 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:15:58,179 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:15:58,274 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:15:58,305 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:15:58,561 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:15:58,585 p=484746 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:15:58,716 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:15:58,801 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:15:58,829 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:15:58,897 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:15:58,983 p=484746 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:15:59,116 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:59,148 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:59,148 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:59,169 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:59,191 p=484746 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:15:59,332 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:59,417 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:59,427 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:59,428 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:59,458 p=484746 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:15:59,603 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:15:59,661 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:15:59,696 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:15:59,722 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:15:59,745 p=484746 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:16:01,355 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:01,356 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:01,424 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:01,499 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:01,528 p=484746 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:16:02,585 p=484746 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:16:02,586 p=484746 u=root n=ansible | ...ignoring
2025-09-29 09:16:02,770 p=484746 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:16:02,771 p=484746 u=root n=ansible | ...ignoring
2025-09-29 09:16:02,811 p=484746 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:16:02,811 p=484746 u=root n=ansible | ...ignoring
2025-09-29 09:16:03,169 p=484746 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:16:03,169 p=484746 u=root n=ansible | ...ignoring
2025-09-29 09:16:03,197 p=484746 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:16:03,410 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:03,433 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:03,433 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:03,513 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:03,536 p=484746 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:16:03,682 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:03,713 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:03,727 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:03,800 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:03,818 p=484746 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:16:03,929 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:03,955 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:03,961 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:04,065 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:04,086 p=484746 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:16:04,232 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:04,275 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:04,335 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:04,385 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:04,404 p=484746 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:16:06,244 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:06,363 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:06,467 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:06,501 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:06,527 p=484746 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:16:08,003 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:08,056 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:08,101 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:08,118 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:08,135 p=484746 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:16:09,157 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:09,165 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:09,171 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:09,196 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:09,225 p=484746 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:16:09,396 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:16:09,497 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:16:09,535 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:16:09,584 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:16:09,606 p=484746 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:16:10,648 p=484746 u=root n=ansible | changed: [host1]
2025-09-29 09:16:10,695 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:16:10,702 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:16:10,775 p=484746 u=root n=ansible | changed: [bda]
2025-09-29 09:16:10,801 p=484746 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:16:11,670 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:11,772 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:11,831 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:11,849 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:11,886 p=484746 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:16:12,031 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:12,057 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:12,103 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:12,137 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:12,157 p=484746 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:16:12,342 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:12,387 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:12,388 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:12,458 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:12,484 p=484746 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:16:13,402 p=484746 u=root n=ansible | changed: [host1]
2025-09-29 09:16:13,446 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:16:13,576 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:16:13,594 p=484746 u=root n=ansible | changed: [bda]
2025-09-29 09:16:13,611 p=484746 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:16:14,514 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:16:14,746 p=484746 u=root n=ansible | changed: [host1]
2025-09-29 09:16:14,767 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:16:14,836 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:14,860 p=484746 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:16:16,096 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:16,107 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:16,126 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:16,140 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:16,162 p=484746 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:16:17,136 p=484746 u=root n=ansible | changed: [host1]
2025-09-29 09:16:17,179 p=484746 u=root n=ansible | changed: [host3]
2025-09-29 09:16:17,271 p=484746 u=root n=ansible | changed: [host2]
2025-09-29 09:16:17,364 p=484746 u=root n=ansible | changed: [bda]
2025-09-29 09:16:17,400 p=484746 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:16:17,627 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:16:17,652 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:16:17,666 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:16:17,751 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:16:17,763 p=484746 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:16:17,940 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:16:17,943 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:16:17,946 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:16:18,702 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:16:18,747 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:16:18,778 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:16:18,890 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:16:19,446 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:16:19,563 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:16:19,747 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:16:19,847 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:16:19,875 p=484746 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:16:20,142 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:16:20,962 p=484746 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:16:20,967 p=484746 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:16:20,999 p=484746 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:16:21,044 p=484746 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:16:21,759 p=484746 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:16:21,822 p=484746 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:16:21,957 p=484746 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:16:22,016 p=484746 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:16:22,606 p=484746 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:16:22,653 p=484746 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:16:22,777 p=484746 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:16:22,789 p=484746 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:16:23,429 p=484746 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:16:23,536 p=484746 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:16:23,672 p=484746 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:16:24,242 p=484746 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:16:24,498 p=484746 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:16:24,604 p=484746 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:16:25,064 p=484746 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:16:25,341 p=484746 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:16:25,482 p=484746 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:16:25,793 p=484746 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:16:26,090 p=484746 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:16:26,342 p=484746 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:16:26,634 p=484746 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:16:26,803 p=484746 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:16:27,221 p=484746 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:16:27,464 p=484746 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:16:27,563 p=484746 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:16:27,970 p=484746 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:16:27,997 p=484746 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:16:28,240 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:16:28,413 p=484746 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:16:28,507 p=484746 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:16:29,658 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:29,772 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:29,805 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:29,888 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:29,922 p=484746 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:16:30,843 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:16:30,994 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:16:31,092 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:16:31,247 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:16:31,891 p=484746 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:16:31,915 p=484746 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:16:32,051 p=484746 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:16:32,103 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:16:32,129 p=484746 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:16:33,128 p=484746 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:33,132 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:33,203 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:33,281 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:34,073 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:34,108 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:34,187 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:34,958 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:35,026 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:35,297 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:35,327 p=484746 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:16:36,410 p=484746 u=root n=ansible | ok: [host1]
2025-09-29 09:16:36,456 p=484746 u=root n=ansible | ok: [host3]
2025-09-29 09:16:36,476 p=484746 u=root n=ansible | ok: [host2]
2025-09-29 09:16:36,597 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:16:36,627 p=484746 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:16:36,788 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:36,861 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:36,891 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:36,946 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:36,959 p=484746 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:16:37,101 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:37,118 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:37,179 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:37,200 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:37,233 p=484746 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:16:37,443 p=484746 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:16:37,486 p=484746 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:16:37,488 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:16:37,516 p=484746 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:16:37,517 p=484746 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:16:37,554 p=484746 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:16:37,574 p=484746 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:16:37,576 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:16:37,624 p=484746 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:16:37,626 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:16:37,704 p=484746 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:16:37,707 p=484746 u=root n=ansible | skipping: [bda]
2025-09-29 09:16:37,723 p=484746 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:16:39,242 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:39,442 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:39,560 p=484746 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:40,184 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:40,613 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:40,971 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:41,771 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:41,778 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:42,200 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:43,109 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:43,127 p=484746 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:16:43,974 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:44,037 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:44,072 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:44,154 p=484746 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:44,875 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:44,906 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:44,987 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:45,718 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:45,796 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:45,799 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:45,823 p=484746 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:16:46,828 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:46,847 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:47,032 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:47,044 p=484746 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:47,821 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:47,827 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:48,206 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:48,857 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:48,894 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:49,169 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:49,201 p=484746 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:16:50,100 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:50,242 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:50,255 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:50,277 p=484746 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:51,073 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:51,110 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:51,217 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:51,923 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:51,928 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:52,004 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:52,024 p=484746 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:16:52,910 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:52,945 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:53,038 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:53,182 p=484746 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:53,642 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:53,727 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:53,808 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:54,457 p=484746 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:54,537 p=484746 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:54,668 p=484746 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:54,693 p=484746 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:16:55,705 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:55,733 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:55,818 p=484746 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:55,880 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:56,718 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:56,763 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:56,836 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:16:57,543 p=484746 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:57,574 p=484746 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:16:57,634 p=484746 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:16:57,651 p=484746 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:16:57,807 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:16:57,828 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:16:57,829 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:16:57,865 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:16:57,882 p=484746 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:16:58,085 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:16:59,568 p=484746 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:16:59,790 p=484746 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:16:59,987 p=484746 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:17:00,775 p=484746 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:17:01,341 p=484746 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:17:01,485 p=484746 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:17:03,061 p=484746 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:17:03,132 p=484746 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:17:03,293 p=484746 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:17:05,199 p=484746 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:17:05,267 p=484746 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:17:05,626 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:07,081 p=484746 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:17:07,125 p=484746 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:17:07,177 p=484746 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:17:07,809 p=484746 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:17:08,406 p=484746 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:17:08,630 p=484746 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:17:09,947 p=484746 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:17:09,953 p=484746 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:17:10,082 p=484746 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:17:11,255 p=484746 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:17:11,275 p=484746 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:17:11,528 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:11,593 p=484746 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-29 09:17:11,595 p=484746 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-29 09:17:11,651 p=484746 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-29 09:17:11,652 p=484746 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-29 09:17:11,662 p=484746 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-29 09:17:11,662 p=484746 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-29 09:17:11,713 p=484746 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was:           gateway: "192.168.180.1". unexpected char "'" at 3926
2025-09-29 09:17:11,714 p=484746 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected char \"'\" at 3926. String: # roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\n# FIXED: Simplified and standardized Docker Compose template\n\nversion: '3.8'\n\nservices:\n{% for node in elasticsearch_nodes %}\n  {{ node.name }}:\n    image: {{ elasticsearch_docker_image }}:{{ es_version }}\n    container_name: {{ node.name }}\n    hostname: {{ node.name }}\n    restart: unless-stopped\n    \n    environment:\n      # Node identification\n      - \"node.name={{ node.name }}\"\n      - \"cluster.name={{ es_cluster_name }}\"\n      \n      # Network configuration\n      - \"network.host=0.0.0.0\"\n      - \"http.port=9200\"\n      - \"transport.port=9300\"\n      \n      # Discovery configuration\n      - \"discovery.seed_hosts={{ elasticsearch_seed_hosts }}\"\n      - \"cluster.initial_master_nodes={{ elasticsearch_master_nodes }}\"\n      \n      # Node roles\n      - \"node.roles=[{% for role in node.roles %}'{{ role }}'{% if not loop.last %},{% endif %}{% endfor %}]\"\n      \n      # Memory settings\n      - \"bootstrap.memory_lock=true\"\n      - \"ES_JAVA_OPTS=-Xms{{ node.heap_size }} -Xmx{{ node.heap_size }}\"\n      \n      # Performance settings\n      - \"cluster.max_shards_per_node=2000\"\n      - \"action.auto_create_index=true\"\n      \n      # Security configuration\n      - \"xpack.security.enabled=true\"\n      {% if es_enable_http_ssl %}\n      - \"xpack.security.http.ssl.enabled=true\"\n      - \"xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_enable_transport_ssl %}\n      - \"xpack.security.transport.ssl.enabled=true\"\n      - \"xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.key\"\n      - \"xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/{{ node.name }}/{{ node.name }}.crt\"\n      - \"xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt\"\n      {% endif %}\n      {% if es_api_basic_auth_password is defined %}\n      - \"ELASTIC_PASSWORD={{ es_api_basic_auth_password }}\"\n      {% endif %}\n\n    ports:\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}:9200\"\n      - \"{{ ansible_default_ipv4.address }}:{{ (es_transport_base_port | int) + (node.port_offset | int) }}:9300\"\n\n    volumes:\n      # Data and logs\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/data:/usr/share/elasticsearch/data:Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/logs:/usr/share/elasticsearch/logs:Z\"\n      \n      # Configuration\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\"\n      - \"{{ elasticsearch_docker_path }}/{{ node.name }}/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z\"\n      \n      # Certificates\n      - \"{{ certs_base_path }}:/usr/share/elasticsearch/config/certs:ro,Z\"\n\n    networks:\n      - elastic\n\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n\n    healthcheck:\n      test: \n        - \"CMD-SHELL\"\n        {% if es_enable_http_ssl and es_api_basic_auth_password is defined %}\n        - \"curl -f -k -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} https://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% else %}\n        - \"curl -f http://localhost:9200/_cluster/health?timeout=30s || exit 1\"\n        {% endif %}\n      interval: 30s\n      timeout: 30s\n      retries: 10\n      start_period: 120s\n\n    user: \"1000:1000\"\n    \n    deploy:\n      resources:\n        limits:\n          {% set heap_gb = (node.heap_size | regex_replace('g, '') | int) %}\n          memory: \"{{ (heap_gb * 2) }}G\"\n        reservations:\n          memory: \"{{ node.heap_size }}\"\n\n{% endfor %}\n\nnetworks:\n  elastic:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"{{ docker_network_subnet }}\"\n          gateway: \"192.168.180.1\". unexpected char \"'\" at 3926"}
2025-09-29 09:17:11,840 p=484746 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:17:11,922 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:12,014 p=484746 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:17:12,065 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:12,200 p=484746 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:17:12,279 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:12,352 p=484746 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 09:17:12,434 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:12,540 p=484746 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 09:17:12,633 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:12,672 p=484746 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 09:17:12,820 p=484746 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:17:12,918 p=484746 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:17:12,937 p=484746 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:17:12,945 p=484746 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:17:13,062 p=484746 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 09:17:13,190 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:17:13,261 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:17:13,292 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:17:13,351 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:17:13,352 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:13,381 p=484746 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 09:17:13,512 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:17:13,571 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:17:13,598 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:17:13,646 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:15,188 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:17:15,212 p=484746 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 09:17:15,303 p=484746 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:17:15,308 p=484746 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:17:15,322 p=484746 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:17:15,332 p=484746 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:17:15,339 p=484746 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:17:15,358 p=484746 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:17:15,366 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:17:15,369 p=484746 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:17:15,371 p=484746 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:17:15,383 p=484746 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:17:15,402 p=484746 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:17:15,443 p=484746 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:17:15,447 p=484746 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:17:15,462 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:17:15,474 p=484746 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:17:15,477 p=484746 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:17:15,479 p=484746 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:17:15,483 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:17:15,533 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:17:15,542 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:17:15,555 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:17:15,561 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:17:15,569 p=484746 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:17:15,571 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:16,334 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:17:17,293 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:17:17,978 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:17:18,806 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:17:19,620 p=484746 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:17:19,659 p=484746 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 09:17:19,840 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:17:19,935 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:17:19,987 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:17:20,011 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:20,780 p=484746 u=root n=ansible | ok: [bda]
2025-09-29 09:17:20,800 p=484746 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 09:17:20,893 p=484746 u=root n=ansible | skipping: [host1]
2025-09-29 09:17:20,939 p=484746 u=root n=ansible | skipping: [host2]
2025-09-29 09:17:21,001 p=484746 u=root n=ansible | skipping: [host3]
2025-09-29 09:17:21,046 p=484746 u=root n=ansible | skipping: [lb1]
2025-09-29 09:17:21,701 p=484746 u=root n=ansible |  [ERROR]: User interrupted execution

2025-09-29 09:20:29,713 p=509487 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:20:29,748 p=509487 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:20:33,285 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:33,355 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:33,447 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:33,561 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:33,571 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:33,602 p=509487 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:20:33,731 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:33,794 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:33,861 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:33,864 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:33,913 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:33,945 p=509487 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:20:34,072 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:50:33Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:20:34,119 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:20:34,156 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:20:34,176 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:20:34,220 p=509487 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:20:34,388 p=509487 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:20:36,473 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:36,602 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:36,616 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:36,633 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:36,670 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:36,696 p=509487 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:20:36,828 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:36,898 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:36,957 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:36,960 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:37,005 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:37,033 p=509487 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:20:37,073 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:37,093 p=509487 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:20:37,124 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:37,147 p=509487 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:20:37,194 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:37,225 p=509487 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:20:38,354 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:20:38,356 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:20:38,376 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:20:38,424 p=509487 u=root n=ansible | changed: [lb1]
2025-09-29 09:20:38,442 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:20:38,456 p=509487 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:20:38,470 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:38,482 p=509487 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:20:40,506 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:20:40,787 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:40,797 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:20:40,815 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:40,894 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:20:40,913 p=509487 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:20:42,051 p=509487 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:20:42,112 p=509487 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:20:42,132 p=509487 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:20:42,142 p=509487 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:20:42,236 p=509487 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:20:42,811 p=509487 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:20:42,875 p=509487 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:20:42,932 p=509487 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:20:42,940 p=509487 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:20:43,040 p=509487 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:20:43,170 p=509487 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:20:43,239 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:43,307 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:43,372 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:43,388 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:43,427 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:43,484 p=509487 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:20:44,396 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:44,441 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:44,466 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:44,493 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:44,541 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:44,564 p=509487 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:20:45,450 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:45,496 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:45,555 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:45,556 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:45,681 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:45,705 p=509487 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:20:45,853 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:45,897 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:45,933 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:45,940 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:45,959 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:45,992 p=509487 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:20:46,117 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:46,181 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:46,237 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:46,239 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:47,018 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:47,032 p=509487 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:20:47,086 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:47,275 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:47,328 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:47,330 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:47,364 p=509487 u=root n=ansible | ok: [lb1]
2025-09-29 09:20:47,388 p=509487 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:20:47,531 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:47,592 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:47,623 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:47,633 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:47,657 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:47,768 p=509487 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:20:47,940 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:47,981 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:48,009 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:48,034 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:48,044 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:48,065 p=509487 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:20:48,132 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:48,152 p=509487 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:20:48,227 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:48,241 p=509487 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:20:48,278 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:48,289 p=509487 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:20:48,326 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:48,335 p=509487 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:20:48,350 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:48,360 p=509487 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:20:48,506 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:20:48,527 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:48,555 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:20:48,584 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:20:48,627 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:20:48,651 p=509487 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:20:48,847 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:48,913 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:48,963 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:48,972 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:48,998 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:49,021 p=509487 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:20:49,240 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:49,276 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:49,298 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:49,311 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:49,313 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:49,328 p=509487 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:20:49,483 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:20:49,538 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:20:49,543 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:20:49,584 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:49,602 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:20:49,625 p=509487 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:20:49,814 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:20:49,893 p=509487 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:20:49,943 p=509487 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:20:50,864 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:20:50,909 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:20:50,915 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:20:51,075 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:20:51,650 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:20:51,697 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:20:51,758 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:20:52,146 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:20:52,161 p=509487 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:20:52,313 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:52,337 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:52,341 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:52,370 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:52,395 p=509487 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:20:52,528 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:52,558 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:52,580 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:52,588 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:52,606 p=509487 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:20:52,728 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:52,784 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:52,821 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:52,881 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:52,902 p=509487 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:20:53,075 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:53,106 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:53,107 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:53,169 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:53,189 p=509487 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:20:54,911 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:54,922 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:55,007 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:55,059 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:55,075 p=509487 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:20:56,232 p=509487 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:20:56,232 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:20:56,300 p=509487 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:20:56,301 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:20:56,459 p=509487 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:20:56,459 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:20:56,460 p=509487 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:20:56,460 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:20:56,475 p=509487 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:20:56,662 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:56,681 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:56,725 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:56,742 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:56,765 p=509487 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:20:56,890 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:56,949 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:56,992 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:57,058 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:57,083 p=509487 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:20:57,293 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:57,328 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:57,367 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:57,400 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:57,414 p=509487 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:20:57,554 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:20:57,556 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:20:57,612 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:20:57,650 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:20:57,668 p=509487 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:20:59,615 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:20:59,683 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:20:59,704 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:20:59,726 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:20:59,747 p=509487 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:21:01,147 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:01,205 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:01,253 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:01,312 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:01,341 p=509487 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:21:02,313 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:02,349 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:02,354 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:02,442 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:02,471 p=509487 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:21:02,616 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:21:02,703 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:21:02,722 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:21:02,793 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:21:02,818 p=509487 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:21:03,820 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:21:03,855 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:21:03,918 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:21:03,922 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:21:03,938 p=509487 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:21:04,811 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:04,873 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:04,881 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:05,024 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:05,053 p=509487 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:21:05,313 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:21:05,363 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:21:05,373 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:21:05,403 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:21:05,422 p=509487 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:21:05,532 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:21:05,594 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:21:05,673 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:21:05,854 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:21:05,871 p=509487 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:21:06,824 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:21:06,850 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:21:06,903 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:21:06,912 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:21:06,924 p=509487 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:21:07,732 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:21:07,748 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:21:07,790 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:21:07,859 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:07,901 p=509487 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:21:09,057 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:09,062 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:09,083 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:09,097 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:09,120 p=509487 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:21:10,083 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:21:10,122 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:21:10,123 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:21:10,195 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:21:10,229 p=509487 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:21:10,386 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:21:10,460 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:21:10,497 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:21:10,498 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:21:10,521 p=509487 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:21:10,834 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:21:10,837 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:21:10,839 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:21:11,540 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:21:11,580 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:21:11,712 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:21:11,756 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:21:12,311 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:21:12,455 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:21:12,600 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:21:12,742 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:21:12,775 p=509487 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:21:13,046 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:21:13,709 p=509487 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:21:13,749 p=509487 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:21:13,766 p=509487 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:21:13,868 p=509487 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:21:14,504 p=509487 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:21:14,543 p=509487 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:21:14,606 p=509487 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:21:14,880 p=509487 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:21:15,306 p=509487 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:21:15,317 p=509487 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:21:15,647 p=509487 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:21:15,902 p=509487 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:21:16,121 p=509487 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:21:16,732 p=509487 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:21:16,798 p=509487 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:21:17,025 p=509487 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:21:17,509 p=509487 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:21:17,733 p=509487 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:21:17,860 p=509487 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:21:18,558 p=509487 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:21:18,652 p=509487 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:21:18,674 p=509487 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:21:19,434 p=509487 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:21:19,490 p=509487 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:21:19,607 p=509487 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:21:20,337 p=509487 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:21:20,453 p=509487 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:21:20,508 p=509487 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:21:21,382 p=509487 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:21:21,463 p=509487 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:21:21,514 p=509487 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:21:21,853 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:21:21,966 p=509487 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:21:22,043 p=509487 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:21:23,255 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:23,359 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:23,379 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:23,385 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:23,406 p=509487 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:21:24,428 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:21:24,609 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:21:24,615 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:21:24,644 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:21:25,427 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:21:25,434 p=509487 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:21:25,436 p=509487 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:21:25,563 p=509487 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:21:25,589 p=509487 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:21:26,520 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:26,542 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:26,681 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:26,699 p=509487 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:27,346 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:27,451 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:27,513 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:28,253 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:28,265 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:28,366 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:28,383 p=509487 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:21:29,304 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:21:29,508 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:21:29,545 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:21:29,601 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:21:29,639 p=509487 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:21:29,880 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:21:29,945 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:21:30,026 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:21:30,030 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:21:30,051 p=509487 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:21:30,167 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:21:30,214 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:21:30,246 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:21:30,303 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:21:30,324 p=509487 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:21:30,520 p=509487 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:21:30,524 p=509487 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:21:30,547 p=509487 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:21:30,587 p=509487 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:21:30,590 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:21:30,608 p=509487 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:21:30,610 p=509487 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:21:30,612 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:21:30,672 p=509487 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:21:30,676 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:21:30,684 p=509487 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:21:30,686 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:21:30,712 p=509487 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:21:32,219 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:32,244 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:32,530 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:33,572 p=509487 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:33,578 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:33,878 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:34,203 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:34,770 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:34,959 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:35,386 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:35,405 p=509487 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:21:36,365 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:36,488 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:36,529 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:36,722 p=509487 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:37,368 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:37,374 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:37,497 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:38,213 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:38,265 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:38,270 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:38,301 p=509487 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:21:39,574 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:39,594 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:39,602 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:39,664 p=509487 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:40,636 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:40,647 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:40,717 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:41,683 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:41,696 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:41,782 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:41,819 p=509487 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:21:42,739 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:42,761 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:42,829 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:43,106 p=509487 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:43,557 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:43,640 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:43,660 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:44,281 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:44,341 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:44,623 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:44,642 p=509487 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:21:45,526 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:45,528 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:45,619 p=509487 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:45,751 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:46,320 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:46,391 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:46,713 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:47,208 p=509487 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:47,257 p=509487 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:47,590 p=509487 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:47,621 p=509487 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:21:48,579 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:48,583 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:48,624 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:48,819 p=509487 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:49,508 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:49,513 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:49,640 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:21:50,315 p=509487 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:50,346 p=509487 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:21:50,483 p=509487 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:21:50,504 p=509487 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:21:50,642 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:21:50,664 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:21:50,686 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:21:50,723 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:21:50,740 p=509487 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:21:50,963 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:21:52,425 p=509487 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:21:52,639 p=509487 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:21:52,868 p=509487 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:21:53,380 p=509487 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:21:54,237 p=509487 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:21:54,550 p=509487 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:21:55,877 p=509487 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:21:56,100 p=509487 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:21:56,473 p=509487 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:21:57,628 p=509487 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:21:57,656 p=509487 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:21:57,986 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:21:59,383 p=509487 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:21:59,412 p=509487 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:21:59,484 p=509487 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:21:59,928 p=509487 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:22:00,960 p=509487 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:22:00,991 p=509487 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:22:02,102 p=509487 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:22:02,464 p=509487 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:22:02,592 p=509487 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:22:03,677 p=509487 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:22:03,693 p=509487 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:22:04,004 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:05,385 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:22:05,604 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:22:05,638 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:22:05,654 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:22:05,672 p=509487 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:22:05,857 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:06,578 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:22:06,652 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:06,689 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:22:06,800 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:22:06,825 p=509487 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:22:06,968 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:07,033 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:07,036 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:07,079 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:07,114 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:22:07,142 p=509487 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:22:07,374 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:07,428 p=509487 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3, bda
2025-09-29 09:22:07,519 p=509487 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-29 09:22:07,626 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:22:07,683 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:22:07,698 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:22:07,712 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:22:07,724 p=509487 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:22:09,356 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:22:09,389 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:09,391 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:22:09,467 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:22:09,485 p=509487 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************************************************************************************************************************************
2025-09-29 09:22:10,504 p=509487 u=root n=ansible | ok: [host1]
2025-09-29 09:22:10,565 p=509487 u=root n=ansible | ok: [host3]
2025-09-29 09:22:10,588 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:10,610 p=509487 u=root n=ansible | ok: [host2]
2025-09-29 09:22:10,644 p=509487 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************************************************************************************************************************************
2025-09-29 09:22:10,847 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:10,891 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:11,078 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:11,104 p=509487 u=root n=ansible | skipping: [bda]
2025-09-29 09:22:11,123 p=509487 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************************************************************************************************************************************
2025-09-29 09:22:13,066 p=509487 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.141393", "end": "2025-09-29 09:22:12.970639", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:11.829246", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:13,068 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:22:13,145 p=509487 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.055851", "end": "2025-09-29 09:22:13.061848", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:12.005997", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:13,145 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:22:13,290 p=509487 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.143031", "end": "2025-09-29 09:22:13.156952", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:12.013921", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:13,291 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:22:13,399 p=509487 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.226134", "end": "2025-09-29 09:22:13.254626", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:12.028492", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:13,399 p=509487 u=root n=ansible | ...ignoring
2025-09-29 09:22:13,427 p=509487 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:22:15,229 p=509487 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:00.868604", "end": "2025-09-29 09:22:15.075924", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:14.207320", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:15,472 p=509487 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.141300", "end": "2025-09-29 09:22:15.289559", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:14.148259", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:15,586 p=509487 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.247828", "end": "2025-09-29 09:22:15.469659", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:14.221831", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:15,740 p=509487 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.239702", "end": "2025-09-29 09:22:15.610449", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:22:14.370747", "stderr": "yaml.parser.ParserError: while parsing a block collection\n  in \"./docker-compose.yml\", line 15, column 7\nexpected <block end>, but found '<block sequence start>'\n  in \"./docker-compose.yml\", line 40, column 13", "stderr_lines": ["yaml.parser.ParserError: while parsing a block collection", "  in \"./docker-compose.yml\", line 15, column 7", "expected <block end>, but found '<block sequence start>'", "  in \"./docker-compose.yml\", line 40, column 13"], "stdout": "", "stdout_lines": []}
2025-09-29 09:22:15,920 p=509487 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 09:22:15,977 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:16,032 p=509487 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 09:22:16,079 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:16,105 p=509487 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 09:22:16,291 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:22:16,336 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:22:16,338 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:22:16,427 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:22:16,562 p=509487 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 09:22:16,627 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:16,659 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:16,689 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:16,730 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:16,752 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:16,782 p=509487 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 09:22:16,895 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:17,044 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:17,107 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:17,164 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:18,605 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:18,630 p=509487 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 09:22:18,728 p=509487 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:22:18,731 p=509487 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:22:18,735 p=509487 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:22:18,742 p=509487 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:22:18,763 p=509487 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:22:18,819 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:18,830 p=509487 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:22:18,834 p=509487 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:22:18,841 p=509487 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:22:18,844 p=509487 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:22:18,848 p=509487 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:22:18,915 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:18,921 p=509487 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:22:18,924 p=509487 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:22:18,932 p=509487 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:22:18,953 p=509487 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:22:18,956 p=509487 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:22:18,989 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:19,070 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:22:19,079 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:22:19,091 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:22:19,102 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:22:19,107 p=509487 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:22:19,109 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:19,823 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:22:20,596 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:22:21,359 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:22:22,302 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:22:23,172 p=509487 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:22:23,195 p=509487 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 09:22:23,312 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:23,384 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:23,440 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:23,505 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:24,198 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:24,210 p=509487 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 09:22:24,337 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:24,368 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:24,371 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:24,433 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:25,759 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:25,778 p=509487 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 09:22:25,864 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:25,923 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:25,957 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:26,004 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:27,296 p=509487 u=root n=ansible | ok: [bda]
2025-09-29 09:22:27,333 p=509487 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 09:22:27,411 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:27,460 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:27,514 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:27,617 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:43,020 p=509487 u=root n=ansible | changed: [bda]
2025-09-29 09:22:43,053 p=509487 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 09:22:43,150 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:43,226 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:43,318 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:43,368 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:43,369 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 09:22:43,547 p=509487 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 09:22:44,321 p=509487 u=root n=ansible | changed: [host2]
2025-09-29 09:22:44,347 p=509487 u=root n=ansible | changed: [host1]
2025-09-29 09:22:44,577 p=509487 u=root n=ansible | changed: [host3]
2025-09-29 09:22:44,593 p=509487 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 09:22:44,755 p=509487 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n║ End Time: 2025-09-29T05:50:36Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:22:44,774 p=509487 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T05:50:33Z                      ║\n║ End Time: 2025-09-29T05:50:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:22:44,775 p=509487 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n║ End Time: 2025-09-29T05:50:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:22:44,809 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:44,879 p=509487 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T05:50:32Z                      ║\n║ End Time: 2025-09-29T05:50:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:22:44,897 p=509487 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 09:22:44,952 p=509487 u=root n=ansible | skipping: [host1]
2025-09-29 09:22:45,016 p=509487 u=root n=ansible | skipping: [host2]
2025-09-29 09:22:45,081 p=509487 u=root n=ansible | skipping: [host3]
2025-09-29 09:22:45,162 p=509487 u=root n=ansible | skipping: [lb1]
2025-09-29 09:22:45,315 p=509487 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 09:22:45,316 p=509487 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 09:22:45,462 p=509487 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 09:22:45,462 p=509487 u=root n=ansible | bda                        : ok=66   changed=12   unreachable=0    failed=1    skipped=17   rescued=1    ignored=2   
2025-09-29 09:22:45,463 p=509487 u=root n=ansible | host1                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:22:45,463 p=509487 u=root n=ansible | host2                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:22:45,463 p=509487 u=root n=ansible | host3                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:22:45,464 p=509487 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 09:25:27,283 p=534171 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:25:27,315 p=534171 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:25:30,701 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:30,810 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:30,959 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:31,062 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:31,069 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:31,092 p=534171 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:25:31,214 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:31,271 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:31,321 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:31,323 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:31,356 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:31,392 p=534171 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:25:31,507 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:55:29Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:25:31,552 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:55:29Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:25:31,580 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:55:30Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:25:31,590 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:55:30Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:25:31,620 p=534171 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:55:30Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:25:31,787 p=534171 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:25:33,899 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:33,979 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:34,225 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:34,379 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:34,385 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:34,411 p=534171 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:25:34,535 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:34,562 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:34,590 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:34,620 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:34,632 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:34,654 p=534171 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:25:34,683 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:34,697 p=534171 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:25:34,721 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:34,750 p=534171 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:25:34,791 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:34,807 p=534171 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:25:35,984 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:25:36,024 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:25:36,038 p=534171 u=root n=ansible | changed: [lb1]
2025-09-29 09:25:36,100 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:25:36,181 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:25:36,199 p=534171 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:25:36,228 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:36,250 p=534171 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:25:38,259 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:25:38,283 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:25:38,474 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:38,483 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:25:38,583 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:38,601 p=534171 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:25:39,838 p=534171 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:25:39,850 p=534171 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:25:39,872 p=534171 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:25:39,952 p=534171 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:25:40,028 p=534171 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:25:40,569 p=534171 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:25:40,589 p=534171 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:25:40,630 p=534171 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:25:40,728 p=534171 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:25:40,777 p=534171 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:25:40,875 p=534171 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:25:40,958 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:41,001 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:41,054 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:41,057 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:41,111 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:41,133 p=534171 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:25:41,941 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:42,019 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:42,042 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:42,112 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:42,179 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:42,200 p=534171 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:25:43,026 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:43,057 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:43,076 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:43,110 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:43,282 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:43,319 p=534171 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:25:43,392 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:43,453 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:43,572 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:43,589 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:43,628 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:43,656 p=534171 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:25:43,725 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:43,782 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:43,847 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:43,919 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:44,515 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:44,535 p=534171 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:25:44,602 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:44,712 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:44,767 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:44,770 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:44,821 p=534171 u=root n=ansible | ok: [lb1]
2025-09-29 09:25:44,848 p=534171 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:25:44,978 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:45,033 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:45,084 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:45,086 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:45,119 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:45,230 p=534171 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:25:45,404 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:45,416 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:45,439 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:45,484 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:45,540 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:45,564 p=534171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:25:45,639 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:45,664 p=534171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:25:45,743 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:45,751 p=534171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:25:45,790 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:45,800 p=534171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:25:45,837 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:45,845 p=534171 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:25:45,861 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:45,873 p=534171 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:25:46,047 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:25:46,067 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:46,072 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:25:46,073 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:25:46,106 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:25:46,128 p=534171 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:25:46,313 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:46,352 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:46,364 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:46,369 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:46,406 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:46,426 p=534171 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:25:46,660 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:46,688 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:46,725 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:46,768 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:46,864 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:46,902 p=534171 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:25:47,038 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:25:47,137 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:25:47,140 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:25:47,154 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:25:47,189 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:47,209 p=534171 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:25:47,462 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:25:47,562 p=534171 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:25:47,590 p=534171 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:25:48,564 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:25:48,606 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:25:48,627 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:25:48,780 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:25:49,444 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:25:49,466 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:25:49,499 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:25:49,699 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:25:49,731 p=534171 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:25:49,918 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:49,961 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:49,981 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:49,983 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:49,998 p=534171 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:25:50,090 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:50,145 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:50,150 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:50,225 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:50,241 p=534171 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:25:50,425 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:50,492 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:50,493 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:50,603 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:50,615 p=534171 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:25:50,689 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:50,757 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:50,759 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:50,818 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:50,842 p=534171 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:25:52,490 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:52,596 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:52,653 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:52,741 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:52,772 p=534171 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:25:53,956 p=534171 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:25:53,957 p=534171 u=root n=ansible | ...ignoring
2025-09-29 09:25:54,222 p=534171 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:25:54,222 p=534171 u=root n=ansible | ...ignoring
2025-09-29 09:25:54,301 p=534171 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:25:54,302 p=534171 u=root n=ansible | ...ignoring
2025-09-29 09:25:54,363 p=534171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:25:54,364 p=534171 u=root n=ansible | ...ignoring
2025-09-29 09:25:54,382 p=534171 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:25:54,587 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:54,634 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:54,635 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:54,713 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:54,741 p=534171 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:25:54,907 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:54,944 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:54,995 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:54,999 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:55,018 p=534171 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:25:55,139 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:55,216 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:55,237 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:55,272 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:55,290 p=534171 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:25:55,409 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:25:55,434 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:25:55,451 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:25:55,608 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:25:55,621 p=534171 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:25:57,504 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:57,527 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:57,593 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:57,594 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:57,607 p=534171 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:25:58,755 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:58,829 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:25:58,903 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:25:58,917 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:58,932 p=534171 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:25:59,830 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:25:59,927 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:25:59,996 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:26:00,073 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:00,087 p=534171 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:26:00,237 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:26:00,240 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:26:00,246 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:26:00,328 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:26:00,340 p=534171 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:26:01,256 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:26:01,310 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:26:01,400 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:26:01,476 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:26:01,511 p=534171 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:26:02,439 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:26:02,463 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:26:02,577 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:26:02,583 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:02,607 p=534171 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:26:02,786 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:26:02,814 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:26:02,834 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:26:02,835 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:26:02,870 p=534171 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:26:03,052 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:26:03,093 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:26:03,095 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:26:03,157 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:26:03,180 p=534171 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:26:03,964 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:26:04,101 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:26:04,264 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:26:04,297 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:26:04,311 p=534171 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:26:05,194 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:26:05,276 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:26:05,295 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:26:05,356 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:05,380 p=534171 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:26:06,427 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:06,430 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:26:06,535 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:26:06,542 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:26:06,563 p=534171 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:26:07,472 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:26:07,578 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:26:07,592 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:26:07,691 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:26:07,717 p=534171 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:26:07,910 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:26:07,953 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:26:08,008 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:26:08,014 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:26:08,036 p=534171 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:26:08,331 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:26:08,335 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:26:08,337 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:26:09,031 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:26:09,156 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:26:09,200 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:26:09,299 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:26:10,029 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:26:10,047 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:26:10,164 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:26:10,232 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:26:10,265 p=534171 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:26:10,598 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:26:11,200 p=534171 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:26:11,419 p=534171 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:26:11,420 p=534171 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:26:11,475 p=534171 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:26:12,114 p=534171 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:26:12,177 p=534171 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:26:12,235 p=534171 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:26:12,379 p=534171 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:26:13,042 p=534171 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:26:13,125 p=534171 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:26:13,187 p=534171 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:26:13,485 p=534171 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:26:14,098 p=534171 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:26:14,103 p=534171 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:26:14,172 p=534171 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:26:14,874 p=534171 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:26:14,902 p=534171 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:26:14,955 p=534171 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:26:15,725 p=534171 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:26:15,732 p=534171 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:26:15,812 p=534171 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:26:16,541 p=534171 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:26:16,649 p=534171 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:26:16,743 p=534171 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:26:17,442 p=534171 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:26:17,703 p=534171 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:26:17,725 p=534171 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:26:18,281 p=534171 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:26:18,555 p=534171 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:26:18,586 p=534171 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:26:18,607 p=534171 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:26:18,853 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:26:19,016 p=534171 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host3, host2, bda
2025-09-29 09:26:19,232 p=534171 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:26:20,407 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:26:20,478 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:26:20,487 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:26:20,622 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:20,645 p=534171 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:26:21,527 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:26:21,635 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:26:21,639 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:26:21,808 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:26:22,379 p=534171 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:26:22,497 p=534171 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:26:22,521 p=534171 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:26:22,660 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:26:22,685 p=534171 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:26:23,664 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:23,694 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:23,755 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:23,785 p=534171 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:24,484 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:24,632 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:24,785 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:25,358 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:25,540 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:25,646 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:25,677 p=534171 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:26:26,608 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:26:26,691 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:26:26,766 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:26:26,779 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:26:26,789 p=534171 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:26:26,925 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:26:26,970 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:26:26,971 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:26:27,037 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:26:27,061 p=534171 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:26:27,244 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:26:27,265 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:26:27,291 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:26:27,345 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:26:27,368 p=534171 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:26:27,577 p=534171 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:26:27,645 p=534171 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:26:27,664 p=534171 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:26:27,674 p=534171 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:26:27,677 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:26:27,700 p=534171 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:26:27,703 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:26:27,759 p=534171 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:26:27,772 p=534171 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:26:27,774 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:26:27,857 p=534171 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:26:27,859 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:26:27,884 p=534171 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:26:29,199 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:29,501 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:29,584 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:29,821 p=534171 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:30,498 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:30,748 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:30,911 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:31,753 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:31,982 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:32,206 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:32,226 p=534171 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:26:33,255 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:33,268 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:33,328 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:33,494 p=534171 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:34,136 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:34,151 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:34,311 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:35,036 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:35,055 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:35,200 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:35,236 p=534171 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:26:36,438 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:36,478 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:36,491 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:36,866 p=534171 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:37,452 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:37,505 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:37,597 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:38,434 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:38,505 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:38,617 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:38,639 p=534171 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:26:39,582 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:39,704 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:39,777 p=534171 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:39,817 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:40,402 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:40,685 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:40,690 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:41,171 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:41,500 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:41,619 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:41,656 p=534171 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:26:42,571 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:42,726 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:42,855 p=534171 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:42,873 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:43,470 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:43,581 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:43,820 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:44,319 p=534171 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:44,364 p=534171 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:44,620 p=534171 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:44,643 p=534171 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:26:45,485 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:45,667 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:45,693 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:45,712 p=534171 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:46,471 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:46,472 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:46,551 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:26:47,279 p=534171 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:47,283 p=534171 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:26:47,421 p=534171 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:26:47,444 p=534171 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:26:47,616 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:26:47,637 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:26:47,664 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:26:47,715 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:26:47,735 p=534171 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:26:47,954 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:26:49,644 p=534171 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:26:49,699 p=534171 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:26:49,723 p=534171 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:26:50,092 p=534171 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:26:51,183 p=534171 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:26:51,322 p=534171 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:26:52,379 p=534171 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:26:52,932 p=534171 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:26:53,034 p=534171 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:26:54,055 p=534171 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:26:54,094 p=534171 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:26:54,424 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:26:55,779 p=534171 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:26:55,882 p=534171 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:26:55,978 p=534171 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:26:56,331 p=534171 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:26:57,348 p=534171 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:26:57,484 p=534171 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:26:58,568 p=534171 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:26:58,808 p=534171 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:26:59,084 p=534171 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:27:00,082 p=534171 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:27:00,106 p=534171 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:27:00,338 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:01,687 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:27:01,741 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:27:01,917 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:27:01,983 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:27:02,015 p=534171 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:27:02,179 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:03,015 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:27:03,028 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:03,032 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:27:03,089 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:27:03,115 p=534171 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:27:03,295 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:03,331 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:03,345 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:03,362 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:03,405 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:27:03,418 p=534171 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:27:03,600 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:03,654 p=534171 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3, bda
2025-09-29 09:27:03,762 p=534171 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-29 09:27:03,915 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:27:03,922 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:27:03,926 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:27:03,974 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:27:03,994 p=534171 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:27:05,698 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:27:05,757 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:05,888 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:27:05,989 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:27:06,008 p=534171 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************************************************************************************************************************************
2025-09-29 09:27:06,952 p=534171 u=root n=ansible | ok: [host2]
2025-09-29 09:27:07,031 p=534171 u=root n=ansible | ok: [host3]
2025-09-29 09:27:07,080 p=534171 u=root n=ansible | ok: [host1]
2025-09-29 09:27:07,112 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:07,129 p=534171 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************************************************************************************************************************************
2025-09-29 09:27:07,297 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:07,334 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:07,367 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:07,395 p=534171 u=root n=ansible | skipping: [bda]
2025-09-29 09:27:07,427 p=534171 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************************************************************************************************************************************
2025-09-29 09:27:09,912 p=534171 u=root n=ansible | changed: [host1]
2025-09-29 09:27:09,942 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:27:10,030 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:27:15,035 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:27:15,052 p=534171 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:27:17,166 p=534171 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.287258", "end": "2025-09-29 09:27:17.043679", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:27:15.756421", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:27:17,185 p=534171 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.216808", "end": "2025-09-29 09:27:17.067298", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:27:15.850490", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:27:17,195 p=534171 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.309303", "end": "2025-09-29 09:27:17.089741", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:27:15.780438", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:27:17,244 p=534171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.247434", "end": "2025-09-29 09:27:17.128463", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:27:15.881029", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:27:17,350 p=534171 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 09:27:17,421 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:17,477 p=534171 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 09:27:17,561 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:17,589 p=534171 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 09:27:17,716 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:27:17,768 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:27:17,788 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:27:17,903 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:27:18,012 p=534171 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 09:27:18,147 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:18,209 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:18,257 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:18,301 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:18,309 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:18,333 p=534171 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 09:27:18,477 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:18,627 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:18,660 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:18,695 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:19,947 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:19,971 p=534171 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 09:27:20,111 p=534171 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:27:20,116 p=534171 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:27:20,148 p=534171 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:27:20,197 p=534171 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:27:20,204 p=534171 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:27:20,228 p=534171 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:27:20,240 p=534171 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:27:20,245 p=534171 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:27:20,271 p=534171 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:27:20,273 p=534171 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:27:20,283 p=534171 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:27:20,291 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:20,295 p=534171 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:27:20,298 p=534171 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:27:20,301 p=534171 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:27:20,302 p=534171 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:27:20,329 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:20,331 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:20,372 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:27:20,375 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:27:20,388 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:27:20,394 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:27:20,403 p=534171 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:27:20,405 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:21,074 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:27:21,936 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:27:22,631 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:27:23,412 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:27:24,027 p=534171 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:27:24,052 p=534171 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 09:27:24,124 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:24,177 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:24,217 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:24,313 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:25,006 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:25,038 p=534171 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 09:27:25,153 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:25,189 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:25,229 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:25,295 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:26,789 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:26,816 p=534171 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 09:27:26,955 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:27,023 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:27,073 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:27,104 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:28,368 p=534171 u=root n=ansible | ok: [bda]
2025-09-29 09:27:28,392 p=534171 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 09:27:28,451 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:28,492 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:28,571 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:28,606 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:37,161 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:27:37,199 p=534171 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 09:27:37,298 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:37,399 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:37,441 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:37,461 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 09:27:37,464 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:37,711 p=534171 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 09:27:38,551 p=534171 u=root n=ansible | changed: [host3]
2025-09-29 09:27:38,567 p=534171 u=root n=ansible | changed: [host2]
2025-09-29 09:27:38,608 p=534171 u=root n=ansible | changed: [bda]
2025-09-29 09:27:38,636 p=534171 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 09:27:38,837 p=534171 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T05:55:29Z                      ║\n║ End Time: 2025-09-29T05:55:33Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:27:38,894 p=534171 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T05:55:29Z                      ║\n║ End Time: 2025-09-29T05:55:33Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:27:38,905 p=534171 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T05:55:30Z                      ║\n║ End Time: 2025-09-29T05:55:33Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:27:38,931 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:39,004 p=534171 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T05:55:30Z                      ║\n║ End Time: 2025-09-29T05:55:33Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:27:39,034 p=534171 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 09:27:39,106 p=534171 u=root n=ansible | skipping: [host1]
2025-09-29 09:27:39,211 p=534171 u=root n=ansible | skipping: [host2]
2025-09-29 09:27:39,259 p=534171 u=root n=ansible | skipping: [host3]
2025-09-29 09:27:39,304 p=534171 u=root n=ansible | skipping: [lb1]
2025-09-29 09:27:39,465 p=534171 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 09:27:39,466 p=534171 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 09:27:39,629 p=534171 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 09:27:39,629 p=534171 u=root n=ansible | bda                        : ok=67   changed=14   unreachable=0    failed=1    skipped=17   rescued=1    ignored=1   
2025-09-29 09:27:39,629 p=534171 u=root n=ansible | host1                      : ok=58   changed=12   unreachable=0    failed=0    skipped=26   rescued=1    ignored=1   
2025-09-29 09:27:39,630 p=534171 u=root n=ansible | host2                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=1   
2025-09-29 09:27:39,630 p=534171 u=root n=ansible | host3                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=1   
2025-09-29 09:27:39,630 p=534171 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 09:29:04,750 p=554403 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:29:04,833 p=554403 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:29:08,463 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:08,553 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:08,644 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:08,728 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:08,938 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:08,966 p=554403 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:29:09,038 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:09,117 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:09,175 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:09,177 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:09,218 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:09,243 p=554403 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:29:09,384 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:29:09,427 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:29:09,431 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:59:08Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:29:09,451 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:29:09,489 p=554403 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:29:09,629 p=554403 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:29:11,691 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:11,847 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:11,862 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:11,927 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:12,103 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:12,138 p=554403 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:29:12,289 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:12,358 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:12,420 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:12,423 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:12,447 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:12,470 p=554403 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:29:12,508 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:12,527 p=554403 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:29:12,557 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:12,583 p=554403 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:29:12,620 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:12,632 p=554403 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:29:13,685 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:13,752 p=554403 u=root n=ansible | changed: [lb1]
2025-09-29 09:29:13,765 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:13,848 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:29:14,750 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:14,770 p=554403 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:29:14,795 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:14,818 p=554403 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:29:16,773 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:17,102 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:17,114 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:17,145 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:17,147 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:17,164 p=554403 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:29:18,337 p=554403 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:29:18,341 p=554403 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:29:18,359 p=554403 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:29:18,466 p=554403 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:29:18,539 p=554403 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:29:19,050 p=554403 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:29:19,096 p=554403 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:29:19,114 p=554403 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:29:19,256 p=554403 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:29:19,333 p=554403 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:29:19,469 p=554403 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:29:19,587 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:19,648 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:19,684 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:19,695 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:19,705 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:19,723 p=554403 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:29:20,488 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:20,627 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:20,762 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:20,804 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:20,829 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:20,852 p=554403 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:29:21,768 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:21,814 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:21,843 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:21,946 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:22,050 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:22,086 p=554403 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:29:22,220 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:22,256 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:22,302 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:22,319 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:22,359 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:22,381 p=554403 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:29:22,484 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:22,532 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:22,579 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:22,583 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:23,412 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:23,438 p=554403 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:29:23,497 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:23,571 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:23,623 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:23,626 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:23,665 p=554403 u=root n=ansible | ok: [lb1]
2025-09-29 09:29:23,690 p=554403 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:29:23,852 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:23,908 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:23,995 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:23,998 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:24,044 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:24,108 p=554403 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:29:24,292 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:24,330 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:24,335 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:24,388 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:24,404 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:24,450 p=554403 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:29:24,576 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:24,603 p=554403 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:29:24,665 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:24,674 p=554403 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:29:24,711 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:24,723 p=554403 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:29:24,767 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:24,777 p=554403 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:29:24,796 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:24,811 p=554403 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:29:25,007 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:29:25,017 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:25,022 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:29:25,032 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:29:25,101 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:29:25,150 p=554403 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:29:25,333 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:25,341 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:25,371 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:25,398 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:25,407 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:25,434 p=554403 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:29:25,653 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:25,671 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:25,777 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:25,810 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:25,846 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:25,866 p=554403 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:29:26,059 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:29:26,115 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:29:26,118 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:29:26,144 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:26,148 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:29:26,164 p=554403 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:29:26,371 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:26,447 p=554403 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:29:26,483 p=554403 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:29:27,390 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:27,502 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:27,784 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:27,844 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:28,334 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:29:28,371 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:29:28,680 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:29:28,961 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:29:28,974 p=554403 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:29:29,145 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:29,177 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:29,178 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:29,285 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:29,304 p=554403 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:29:29,423 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:29,452 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:29,482 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:29,511 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:29,530 p=554403 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:29:29,671 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:29,706 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:29,707 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:29,800 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:29,814 p=554403 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:29:29,979 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:30,027 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:30,028 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:30,046 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:30,064 p=554403 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:29:31,736 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:31,744 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:31,762 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:31,807 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:31,834 p=554403 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:29:32,948 p=554403 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:29:32,949 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:29:32,981 p=554403 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:29:32,981 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:29:32,989 p=554403 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:29:32,989 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:29:33,174 p=554403 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:29:33,175 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:29:33,207 p=554403 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:29:33,338 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:33,392 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:33,476 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:33,495 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:33,513 p=554403 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:29:33,647 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:33,694 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:33,727 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:33,807 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:33,833 p=554403 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:29:33,986 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:34,062 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:34,125 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:34,151 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:34,169 p=554403 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:29:34,266 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:34,347 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:34,394 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:34,456 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:34,481 p=554403 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:29:36,266 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:36,311 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:36,356 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:36,469 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:36,484 p=554403 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:29:37,928 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:37,931 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:38,019 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:38,022 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:38,050 p=554403 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:29:38,994 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:39,019 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:39,049 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:39,206 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:39,233 p=554403 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:29:39,391 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:29:39,496 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:29:39,524 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:29:39,566 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:29:39,588 p=554403 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:29:40,560 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:40,675 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:40,766 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:29:40,860 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:40,886 p=554403 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:29:41,850 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:41,867 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:42,010 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:42,070 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:42,103 p=554403 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:29:42,316 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:42,348 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:42,368 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:42,383 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:42,403 p=554403 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:29:42,515 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:29:42,594 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:29:42,620 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:29:42,692 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:29:42,715 p=554403 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:29:43,776 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:43,785 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:43,941 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:29:43,958 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:43,976 p=554403 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:29:44,837 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:44,876 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:44,922 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:45,055 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:45,078 p=554403 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:29:46,355 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:29:46,401 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:29:46,402 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:29:46,408 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:29:46,432 p=554403 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:29:47,298 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:29:47,356 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:29:47,366 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:29:47,416 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:29:47,433 p=554403 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:29:47,582 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:29:47,638 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:29:47,646 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:29:47,677 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:29:47,692 p=554403 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:29:47,945 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:29:47,953 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:29:47,955 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:48,670 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:48,741 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:48,879 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:48,880 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:29:49,612 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:29:49,662 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:29:49,735 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:29:50,071 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:29:50,106 p=554403 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:29:50,369 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:51,114 p=554403 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:29:51,175 p=554403 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:29:51,189 p=554403 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:29:51,356 p=554403 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:29:51,954 p=554403 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:29:51,969 p=554403 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:29:52,124 p=554403 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:29:52,381 p=554403 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:29:52,800 p=554403 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:29:52,814 p=554403 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:29:53,044 p=554403 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:29:53,285 p=554403 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:29:53,675 p=554403 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:29:53,738 p=554403 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:29:53,981 p=554403 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:29:54,543 p=554403 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:29:54,621 p=554403 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:29:54,879 p=554403 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:29:55,658 p=554403 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:29:55,662 p=554403 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:29:55,762 p=554403 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:29:56,590 p=554403 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:29:56,680 p=554403 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:29:56,772 p=554403 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:29:57,479 p=554403 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:29:57,488 p=554403 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:29:57,667 p=554403 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:29:58,220 p=554403 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:29:58,413 p=554403 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:29:58,538 p=554403 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:29:58,573 p=554403 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:29:58,863 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:29:58,932 p=554403 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:29:59,018 p=554403 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:30:00,217 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:30:00,286 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:30:00,325 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:30:00,590 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:00,604 p=554403 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:30:01,530 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:30:01,539 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:30:01,599 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:30:01,630 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:30:02,332 p=554403 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:30:02,349 p=554403 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:30:02,419 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:30:02,546 p=554403 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:30:02,574 p=554403 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:30:03,570 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:03,573 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:03,782 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:03,832 p=554403 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:04,412 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:04,482 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:04,691 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:05,383 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:05,402 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:05,568 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:05,602 p=554403 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:30:06,632 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:30:06,679 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:30:06,694 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:30:06,921 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:06,955 p=554403 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:30:07,071 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:07,136 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:07,162 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:07,217 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:30:07,244 p=554403 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:30:07,430 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:07,467 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:07,468 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:07,521 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:30:07,535 p=554403 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:30:07,710 p=554403 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:30:07,752 p=554403 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:30:07,768 p=554403 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:30:07,786 p=554403 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:30:07,788 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:07,807 p=554403 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:30:07,819 p=554403 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:30:07,821 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:07,839 p=554403 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:30:07,840 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:07,893 p=554403 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:30:07,895 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:30:07,925 p=554403 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:30:09,062 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:09,230 p=554403 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:09,521 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:09,847 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:10,978 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:11,117 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:11,213 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:12,148 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:13,127 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:13,183 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:13,203 p=554403 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:30:14,174 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:14,227 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:14,298 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:14,524 p=554403 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:14,944 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:15,149 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:15,280 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:15,852 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:16,132 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:16,205 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:16,247 p=554403 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:30:17,375 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:17,377 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:17,563 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:17,602 p=554403 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:18,383 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:18,395 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:18,628 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:19,486 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:19,587 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:19,672 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:19,712 p=554403 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:30:20,654 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:20,770 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:20,817 p=554403 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:20,887 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:21,622 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:21,861 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:21,921 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:22,550 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:22,742 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:22,798 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:22,815 p=554403 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:30:23,716 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:23,769 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:23,938 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:24,076 p=554403 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:24,612 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:24,620 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:24,842 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:25,450 p=554403 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:25,531 p=554403 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:25,712 p=554403 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:25,738 p=554403 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:30:26,687 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:26,708 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:26,734 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:26,927 p=554403 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:27,538 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:27,727 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:27,728 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:30:28,465 p=554403 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:28,559 p=554403 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:30:28,676 p=554403 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:30:28,699 p=554403 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:30:28,880 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:30:28,881 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:30:28,890 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:30:28,999 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:30:29,014 p=554403 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:30:29,218 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:30,788 p=554403 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:30:30,946 p=554403 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:30:31,172 p=554403 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:30:31,620 p=554403 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:30:32,674 p=554403 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:30:32,704 p=554403 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:30:34,119 p=554403 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:30:34,419 p=554403 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:30:34,422 p=554403 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:30:36,058 p=554403 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:30:36,076 p=554403 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:30:36,324 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:37,735 p=554403 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:30:37,746 p=554403 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:30:37,855 p=554403 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:30:38,324 p=554403 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:30:39,239 p=554403 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:30:39,551 p=554403 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:30:40,340 p=554403 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:30:40,935 p=554403 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:30:40,986 p=554403 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:30:41,944 p=554403 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:30:41,959 p=554403 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:30:42,188 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:43,737 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:30:43,782 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:30:43,830 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:30:43,981 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:30:44,009 p=554403 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:30:44,297 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:44,878 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:30:44,925 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:30:45,013 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:30:45,034 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:45,105 p=554403 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:30:45,341 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:45,345 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:45,345 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:45,375 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:30:45,382 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:45,416 p=554403 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:30:45,644 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:45,769 p=554403 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host3, host2, bda
2025-09-29 09:30:45,919 p=554403 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-29 09:30:46,047 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:30:46,097 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:30:46,118 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:30:46,120 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:30:46,148 p=554403 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:30:47,873 p=554403 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address")
2025-09-29 09:30:47,876 p=554403 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address\")"}
2025-09-29 09:30:47,876 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:30:48,198 p=554403 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address")
2025-09-29 09:30:48,200 p=554403 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address\")"}
2025-09-29 09:30:48,200 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:30:48,362 p=554403 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address")
2025-09-29 09:30:48,362 p=554403 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address\")"}
2025-09-29 09:30:48,362 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:30:48,393 p=554403 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address")
2025-09-29 09:30:48,394 p=554403 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address\")"}
2025-09-29 09:30:48,394 p=554403 u=root n=ansible | ...ignoring
2025-09-29 09:30:48,420 p=554403 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************************************************************************************************************************************
2025-09-29 09:30:49,408 p=554403 u=root n=ansible | ok: [host1]
2025-09-29 09:30:49,581 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:49,593 p=554403 u=root n=ansible | ok: [host2]
2025-09-29 09:30:49,594 p=554403 u=root n=ansible | ok: [host3]
2025-09-29 09:30:49,619 p=554403 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************************************************************************************************************************************
2025-09-29 09:30:49,870 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:49,908 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:49,908 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:50,001 p=554403 u=root n=ansible | skipping: [bda]
2025-09-29 09:30:50,043 p=554403 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************************************************************************************************************************************
2025-09-29 09:30:52,137 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:30:52,423 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:30:52,490 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:30:52,615 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:30:52,643 p=554403 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:30:54,673 p=554403 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.017702", "end": "2025-09-29 09:30:54.555469", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:30:53.537767", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\ninvalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "invalid network config:", "invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address"], "stdout": "", "stdout_lines": []}
2025-09-29 09:30:54,804 p=554403 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.060384", "end": "2025-09-29 09:30:54.649187", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:30:53.588803", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\ninvalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "invalid network config:", "invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address"], "stdout": "", "stdout_lines": []}
2025-09-29 09:30:54,952 p=554403 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.215025", "end": "2025-09-29 09:30:54.812447", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:30:53.597422", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\ninvalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "invalid network config:", "invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address"], "stdout": "", "stdout_lines": []}
2025-09-29 09:30:55,220 p=554403 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.421034", "end": "2025-09-29 09:30:55.083640", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:30:53.662606", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\ninvalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "invalid network config:", "invalid gateway 192.168.180.1: parent subnet 172.172.20.0/24 doesn't contain this address"], "stdout": "", "stdout_lines": []}
2025-09-29 09:30:55,323 p=554403 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 09:30:55,403 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:55,500 p=554403 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 09:30:55,563 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:55,591 p=554403 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 09:30:55,788 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:30:55,833 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:30:55,834 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:30:55,908 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:30:56,037 p=554403 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 09:30:56,125 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:56,228 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:56,296 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:56,333 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:56,345 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:56,371 p=554403 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 09:30:56,443 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:56,495 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:56,570 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:56,701 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:58,337 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:30:58,370 p=554403 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 09:30:58,467 p=554403 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:30:58,477 p=554403 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:30:58,492 p=554403 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:30:58,511 p=554403 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:30:58,543 p=554403 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:30:58,549 p=554403 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:30:58,551 p=554403 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:30:58,552 p=554403 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:30:58,556 p=554403 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:30:58,559 p=554403 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:30:58,631 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:30:58,640 p=554403 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:30:58,644 p=554403 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:30:58,648 p=554403 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:30:58,669 p=554403 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:30:58,674 p=554403 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:30:58,708 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:30:58,711 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:30:58,795 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:30:58,804 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:30:58,810 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:30:58,816 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:30:58,821 p=554403 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:30:58,824 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:30:59,563 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:31:00,425 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:31:01,319 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:31:02,205 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:31:02,974 p=554403 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:31:02,998 p=554403 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 09:31:03,121 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:03,188 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:03,238 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:03,291 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:04,017 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:31:04,033 p=554403 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 09:31:04,139 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:04,187 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:04,227 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:04,269 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:05,892 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:31:05,923 p=554403 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 09:31:05,978 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:06,066 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:06,112 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:06,141 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:07,581 p=554403 u=root n=ansible | ok: [bda]
2025-09-29 09:31:07,620 p=554403 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 09:31:07,699 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:07,759 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:07,821 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:07,919 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:13,318 p=554403 u=root n=ansible | changed: [bda]
2025-09-29 09:31:13,340 p=554403 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 09:31:13,434 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:13,504 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:13,562 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:13,616 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 09:31:13,634 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:13,858 p=554403 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 09:31:14,622 p=554403 u=root n=ansible | changed: [host1]
2025-09-29 09:31:14,659 p=554403 u=root n=ansible | changed: [host2]
2025-09-29 09:31:14,718 p=554403 u=root n=ansible | changed: [host3]
2025-09-29 09:31:14,733 p=554403 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 09:31:14,900 p=554403 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n║ End Time: 2025-09-29T05:59:11Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:31:14,944 p=554403 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n║ End Time: 2025-09-29T05:59:10Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:31:14,992 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:14,993 p=554403 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T05:59:08Z                      ║\n║ End Time: 2025-09-29T05:59:10Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:31:15,134 p=554403 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T05:59:07Z                      ║\n║ End Time: 2025-09-29T05:59:11Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:31:15,157 p=554403 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 09:31:15,281 p=554403 u=root n=ansible | skipping: [host1]
2025-09-29 09:31:15,347 p=554403 u=root n=ansible | skipping: [host2]
2025-09-29 09:31:15,407 p=554403 u=root n=ansible | skipping: [host3]
2025-09-29 09:31:15,443 p=554403 u=root n=ansible | skipping: [lb1]
2025-09-29 09:31:15,558 p=554403 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 09:31:15,559 p=554403 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 09:31:15,769 p=554403 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 09:31:15,770 p=554403 u=root n=ansible | bda                        : ok=66   changed=12   unreachable=0    failed=1    skipped=17   rescued=1    ignored=2   
2025-09-29 09:31:15,770 p=554403 u=root n=ansible | host1                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:31:15,770 p=554403 u=root n=ansible | host2                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:31:15,770 p=554403 u=root n=ansible | host3                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:31:15,771 p=554403 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 09:33:00,837 p=576240 u=root n=ansible | [WARNING]: Unable to parse /root/ansible/inventory.ini as an inventory source

2025-09-29 09:33:00,838 p=576240 u=root n=ansible | [WARNING]: No inventory was parsed, only implicit localhost is available

2025-09-29 09:33:00,844 p=576240 u=root n=ansible | [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

2025-09-29 09:33:12,998 p=576450 u=root n=ansible | [WARNING]: Unable to parse /root/ansible/inventory.ini as an inventory source

2025-09-29 09:33:12,999 p=576450 u=root n=ansible | [WARNING]: No inventory was parsed, only implicit localhost is available

2025-09-29 09:33:13,010 p=576450 u=root n=ansible | [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

2025-09-29 09:33:38,943 p=577992 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:33:38,999 p=577992 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:33:42,660 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:42,681 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:42,706 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:42,899 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:42,907 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:42,927 p=577992 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:33:43,060 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:43,120 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:43,185 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:43,188 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:43,232 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:43,263 p=577992 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:33:43,330 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:03:41Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:33:43,378 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:03:42Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:33:43,478 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:03:41Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:33:43,480 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:03:42Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:33:43,530 p=577992 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:03:41Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:33:43,714 p=577992 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:33:45,900 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:45,961 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:45,968 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:45,996 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:46,263 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:46,291 p=577992 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:33:46,432 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:46,496 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:46,499 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:46,500 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:46,558 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:46,584 p=577992 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:33:46,620 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:46,641 p=577992 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:33:46,674 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:46,692 p=577992 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:33:46,724 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:46,743 p=577992 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:33:48,046 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:33:48,089 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:33:48,090 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:33:48,100 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:33:48,162 p=577992 u=root n=ansible | changed: [lb1]
2025-09-29 09:33:48,182 p=577992 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:33:48,204 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:48,223 p=577992 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:33:50,168 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:33:50,444 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:33:50,559 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:50,567 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:33:50,589 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:50,624 p=577992 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:33:51,881 p=577992 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:33:51,885 p=577992 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:33:51,901 p=577992 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:33:51,943 p=577992 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:33:51,964 p=577992 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:33:52,594 p=577992 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:33:52,630 p=577992 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:33:52,646 p=577992 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:33:52,700 p=577992 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:33:52,725 p=577992 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:33:52,814 p=577992 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:33:52,884 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:52,942 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:52,974 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:52,982 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:53,010 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:53,036 p=577992 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:33:53,945 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:53,963 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:53,970 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:53,974 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:54,063 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:54,086 p=577992 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:33:54,921 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:54,938 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:54,990 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:55,034 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:55,110 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:55,140 p=577992 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:33:55,254 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:55,306 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:55,373 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:55,381 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:55,450 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:55,488 p=577992 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:33:55,592 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:55,647 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:33:55,699 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:33:55,751 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:33:56,643 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:56,667 p=577992 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:33:56,744 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:56,797 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:33:56,939 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:33:56,994 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:33:57,027 p=577992 u=root n=ansible | ok: [lb1]
2025-09-29 09:33:57,052 p=577992 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:33:57,132 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:57,177 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:33:57,289 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:33:57,292 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:33:57,310 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:57,434 p=577992 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:33:57,588 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:57,622 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:57,645 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:57,658 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:57,724 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:57,735 p=577992 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:33:57,776 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:33:57,789 p=577992 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:33:57,830 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:33:57,841 p=577992 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:33:57,879 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:33:57,886 p=577992 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:33:57,912 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:33:57,920 p=577992 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:33:57,931 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:57,938 p=577992 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:33:58,074 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:33:58,077 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:33:58,086 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:58,087 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:33:58,149 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:33:58,171 p=577992 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:33:58,404 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:58,408 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:58,420 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:58,453 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:58,478 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:58,512 p=577992 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:33:58,731 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:58,787 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:33:58,816 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:33:58,868 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:33:58,943 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:33:58,966 p=577992 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:33:59,107 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:33:59,182 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:33:59,258 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:33:59,259 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:33:59,281 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:59,296 p=577992 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:33:59,475 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:33:59,603 p=577992 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:33:59,655 p=577992 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:34:00,612 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:00,654 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:00,688 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:00,729 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:01,449 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:34:01,465 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:34:01,573 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:34:01,577 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:34:01,597 p=577992 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:34:01,901 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:01,902 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:01,947 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:01,968 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:01,979 p=577992 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:34:02,149 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:02,151 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:02,151 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:02,214 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:02,235 p=577992 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:34:02,405 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:02,437 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:02,478 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:02,493 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:02,505 p=577992 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:34:02,647 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:02,688 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:02,689 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:02,734 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:02,746 p=577992 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:34:04,587 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:04,611 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:04,645 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:04,736 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:04,768 p=577992 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:34:05,912 p=577992 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:34:05,913 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:34:05,968 p=577992 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:34:05,969 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:34:06,114 p=577992 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:34:06,115 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:34:06,190 p=577992 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:34:06,191 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:34:06,220 p=577992 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:34:06,361 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:06,418 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:06,469 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:06,483 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:06,495 p=577992 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:34:06,642 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:06,659 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:06,662 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:06,704 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:06,724 p=577992 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:34:06,839 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:06,910 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:06,976 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:07,007 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:07,029 p=577992 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:34:07,137 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:07,198 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:07,215 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:07,249 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:07,264 p=577992 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:34:09,233 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:09,238 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:09,270 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:09,354 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:09,380 p=577992 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:34:10,720 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:10,783 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:10,817 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:10,992 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:11,018 p=577992 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:34:11,921 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:12,054 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:12,055 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:12,201 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:12,231 p=577992 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:34:12,405 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:34:12,437 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:34:12,469 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:34:12,507 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:34:12,522 p=577992 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:34:13,709 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:34:13,729 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:34:13,737 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:34:13,983 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:34:13,993 p=577992 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:34:14,864 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:14,902 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:14,930 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:15,004 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:15,020 p=577992 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:34:15,164 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:15,182 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:15,204 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:15,234 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:15,257 p=577992 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:34:15,378 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:15,448 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:15,485 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:15,511 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:15,533 p=577992 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:34:16,457 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:34:16,488 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:34:16,490 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:34:16,522 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:34:16,541 p=577992 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:34:17,427 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:34:17,467 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:34:17,514 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:17,588 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:34:17,602 p=577992 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:34:18,862 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:18,940 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:19,011 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:19,095 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:19,115 p=577992 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:34:19,950 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:34:19,998 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:34:20,093 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:34:20,318 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:34:20,331 p=577992 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:34:20,540 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:34:20,588 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:34:20,589 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:34:20,652 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:34:20,673 p=577992 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:34:20,922 p=577992 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:34:20,928 p=577992 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:34:20,930 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:34:21,648 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:21,686 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:21,701 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:21,891 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:34:22,526 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:34:22,584 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:34:22,601 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:34:22,859 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:34:22,896 p=577992 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:34:23,234 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:34:23,944 p=577992 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:34:23,971 p=577992 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:34:24,123 p=577992 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:34:24,181 p=577992 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:34:24,793 p=577992 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:34:24,904 p=577992 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:34:25,044 p=577992 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:34:25,095 p=577992 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:34:25,619 p=577992 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:34:25,755 p=577992 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:34:25,837 p=577992 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:34:26,011 p=577992 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:34:26,638 p=577992 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:34:26,680 p=577992 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:34:26,867 p=577992 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:34:27,393 p=577992 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:34:27,418 p=577992 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:34:27,760 p=577992 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:34:28,333 p=577992 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:34:28,374 p=577992 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:34:28,662 p=577992 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:34:28,988 p=577992 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:34:29,231 p=577992 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:34:29,599 p=577992 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:34:29,875 p=577992 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:34:30,163 p=577992 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:34:30,465 p=577992 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:34:30,800 p=577992 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:34:31,116 p=577992 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:34:31,494 p=577992 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:34:31,557 p=577992 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:34:31,867 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:34:32,023 p=577992 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, bda, host3
2025-09-29 09:34:32,230 p=577992 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:34:33,444 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:33,475 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:33,519 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:33,605 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:33,627 p=577992 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:34:34,590 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:34:34,631 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:34:34,657 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:34:34,781 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:34:35,470 p=577992 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:34:35,528 p=577992 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:34:35,589 p=577992 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:34:35,636 p=577992 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:34:35,657 p=577992 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:34:36,548 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:36,716 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:36,747 p=577992 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:36,772 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:37,360 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:37,629 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:37,677 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:38,356 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:38,458 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:38,467 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:38,484 p=577992 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:34:39,425 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:34:39,453 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:34:39,502 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:34:39,628 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:34:39,646 p=577992 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:34:39,777 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:39,805 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:39,832 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:39,852 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:39,874 p=577992 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:34:40,063 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:40,101 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:40,102 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:40,174 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:40,193 p=577992 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:34:40,428 p=577992 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:34:40,431 p=577992 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:34:40,482 p=577992 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:34:40,484 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:34:40,488 p=577992 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:34:40,539 p=577992 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:34:40,541 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:34:40,567 p=577992 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:34:40,569 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:34:40,637 p=577992 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:34:40,770 p=577992 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:34:40,774 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:34:40,805 p=577992 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:34:42,110 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:42,446 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:42,472 p=577992 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:42,959 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:43,390 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:43,955 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:44,346 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:44,595 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:45,133 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:45,562 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:45,574 p=577992 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:34:46,501 p=577992 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:46,565 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:46,571 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:46,682 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:47,437 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:47,483 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:47,584 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:48,312 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:48,433 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:48,524 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:48,549 p=577992 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:34:49,608 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:49,759 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:49,811 p=577992 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:49,856 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:50,622 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:50,739 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:50,855 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:51,562 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:51,706 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:51,921 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:51,941 p=577992 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:34:52,737 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:52,916 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:52,948 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:53,157 p=577992 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:53,596 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:53,625 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:53,641 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:54,618 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:54,682 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:54,751 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:54,779 p=577992 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:34:55,917 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:55,921 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:55,985 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:56,003 p=577992 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:56,748 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:56,804 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:56,871 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:57,619 p=577992 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:57,698 p=577992 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:34:57,702 p=577992 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:57,722 p=577992 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:34:58,716 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:58,721 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:58,864 p=577992 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:58,924 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:34:59,501 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:59,554 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:34:59,794 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:35:00,294 p=577992 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:35:00,366 p=577992 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:35:00,599 p=577992 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:35:00,637 p=577992 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:35:00,825 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:35:00,872 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:35:00,875 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:35:00,898 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:35:00,914 p=577992 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:35:01,265 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:02,715 p=577992 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:35:02,815 p=577992 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:35:02,963 p=577992 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:35:03,340 p=577992 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:35:04,507 p=577992 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:35:04,612 p=577992 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:35:05,778 p=577992 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:35:06,231 p=577992 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:35:06,317 p=577992 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:35:07,316 p=577992 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:35:07,337 p=577992 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:35:07,563 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:08,947 p=577992 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:35:08,979 p=577992 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:35:09,105 p=577992 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:35:09,511 p=577992 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:35:10,480 p=577992 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:35:10,665 p=577992 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:35:11,753 p=577992 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:35:11,843 p=577992 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:35:12,159 p=577992 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:35:13,346 p=577992 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:35:13,384 p=577992 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:35:13,709 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:15,286 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:35:15,310 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:35:15,312 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:35:15,368 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:35:15,397 p=577992 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:35:15,664 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:16,272 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:35:16,435 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:35:16,520 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:35:16,526 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:35:16,549 p=577992 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:35:16,739 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:35:16,791 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:35:16,813 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:35:16,851 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:35:16,857 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:16,890 p=577992 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:35:17,185 p=577992 u=root n=ansible | skipping: [lb1]
2025-09-29 09:35:17,271 p=577992 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3, bda
2025-09-29 09:35:17,470 p=577992 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-29 09:35:17,648 p=577992 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:35:17,650 p=577992 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:35:17,658 p=577992 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:35:17,696 p=577992 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:35:17,716 p=577992 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:35:19,875 p=577992 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address")
2025-09-29 09:35:19,879 p=577992 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address\")"}
2025-09-29 09:35:19,880 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:35:20,061 p=577992 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address")
2025-09-29 09:35:20,062 p=577992 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address\")"}
2025-09-29 09:35:20,062 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:35:20,109 p=577992 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address")
2025-09-29 09:35:20,109 p=577992 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address\")"}
2025-09-29 09:35:20,109 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:35:20,203 p=577992 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address")
2025-09-29 09:35:20,204 p=577992 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 172.25.0.0/16 doesn't contain this address\")"}
2025-09-29 09:35:20,205 p=577992 u=root n=ansible | ...ignoring
2025-09-29 09:35:20,232 p=577992 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************************************************************************************************************************************
2025-09-29 09:35:21,219 p=577992 u=root n=ansible | ok: [host1]
2025-09-29 09:35:21,267 p=577992 u=root n=ansible | ok: [host2]
2025-09-29 09:35:21,270 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:35:21,320 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:35:21,342 p=577992 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************************************************************************************************************************************
2025-09-29 09:35:21,513 p=577992 u=root n=ansible | skipping: [host1]
2025-09-29 09:35:21,550 p=577992 u=root n=ansible | skipping: [host3]
2025-09-29 09:35:21,552 p=577992 u=root n=ansible | skipping: [host2]
2025-09-29 09:35:21,600 p=577992 u=root n=ansible | skipping: [bda]
2025-09-29 09:35:21,616 p=577992 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************************************************************************************************************************************
2025-09-29 09:35:23,915 p=577992 u=root n=ansible | changed: [host1]
2025-09-29 09:35:23,919 p=577992 u=root n=ansible | changed: [host2]
2025-09-29 09:35:23,936 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:35:24,125 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:35:24,144 p=577992 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:35:26,728 p=577992 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.647195", "end": "2025-09-29 09:35:26.570209", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:35:24.923014", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nCreating bda-master ... \r\nCreating bda-master ... error\r\n\nERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"b38b52ea3d6b2150bcc92851c0b76a60eae23cb9d79f52b4f7a58cd814d5c441\". You have to remove (or rename) that container to be able to reuse that name.\n\nERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"b38b52ea3d6b2150bcc92851c0b76a60eae23cb9d79f52b4f7a58cd814d5c441\". You have to remove (or rename) that container to be able to reuse that name.\nEncountered errors while bringing up the project.", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Creating bda-master ... ", "Creating bda-master ... error", "", "ERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"b38b52ea3d6b2150bcc92851c0b76a60eae23cb9d79f52b4f7a58cd814d5c441\". You have to remove (or rename) that container to be able to reuse that name.", "", "ERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"b38b52ea3d6b2150bcc92851c0b76a60eae23cb9d79f52b4f7a58cd814d5c441\". You have to remove (or rename) that container to be able to reuse that name.", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:35:27,353 p=577992 u=root n=ansible | changed: [bda]
2025-09-29 09:35:27,928 p=577992 u=root n=ansible | changed: [host3]
2025-09-29 09:35:28,526 p=577992 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:03.375635", "end": "2025-09-29 09:35:28.381531", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:35:25.005896", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nCreating master-host2 ... \r\nCreating warm-host2   ... \r\nCreating sf-host2     ... \r\nCreating master-host2 ... error\r\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nCreating sf-host2     ... done\r\nCreating warm-host2   ... error\r\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nEncountered errors while bringing up the project.", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Creating master-host2 ... ", "Creating warm-host2   ... ", "Creating sf-host2     ... ", "Creating master-host2 ... error", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Creating sf-host2     ... done", "Creating warm-host2   ... error", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:35:28,601 p=577992 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-29 09:35:31,159 p=577992 u=root n=ansible | ok: [bda]
2025-09-29 09:35:31,458 p=577992 u=root n=ansible | ok: [host3]
2025-09-29 09:35:31,547 p=577992 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-29 09:35:50,728 p=577992 u=root n=ansible |  [ERROR]: User interrupted execution

2025-09-29 09:44:48,680 p=605577 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] *************************************************************************************************************************************************************************
2025-09-29 09:44:48,713 p=605577 u=root n=ansible | TASK [Gathering Facts] *********************************************************************************************************************************************************************************************************************
2025-09-29 09:44:52,129 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:44:52,132 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:44:52,238 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:44:52,362 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:44:52,409 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:44:52,434 p=605577 u=root n=ansible | TASK [Set deployment facts] ****************************************************************************************************************************************************************************************************************
2025-09-29 09:44:52,553 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:44:52,671 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:44:52,675 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:44:52,675 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:44:52,709 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:44:52,735 p=605577 u=root n=ansible | TASK [Display deployment banner] ***********************************************************************************************************************************************************************************************************
2025-09-29 09:44:52,851 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:14:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:44:52,895 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:14:52Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:44:52,960 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:14:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:44:52,962 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:14:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:44:53,005 p=605577 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:14:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:44:53,199 p=605577 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ***********************************************************************************************************************************************************
2025-09-29 09:44:55,328 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:44:55,353 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:44:55,380 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:44:55,400 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:44:55,462 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:44:55,472 p=605577 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] ********************************************************************************************************************************************************************************************
2025-09-29 09:44:55,555 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:44:55,597 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:44:55,645 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:44:55,648 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:44:55,694 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:44:55,722 p=605577 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] *********************************************************************************************************************************************************
2025-09-29 09:44:55,762 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:44:55,782 p=605577 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] ************************************************************************************************************************************************************************************
2025-09-29 09:44:55,815 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:44:55,832 p=605577 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] ****************************************************************************************************************************************************************************
2025-09-29 09:44:55,866 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:44:55,888 p=605577 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ***********************************************************************************************************************************************************************************
2025-09-29 09:44:57,041 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:44:57,054 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:44:57,084 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:44:57,103 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:44:57,143 p=605577 u=root n=ansible | changed: [lb1]
2025-09-29 09:44:57,177 p=605577 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ***************************************************************************************************************************************************************************************
2025-09-29 09:44:57,211 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:44:57,240 p=605577 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] ********************************************************************************************************************************************************************************************
2025-09-29 09:44:59,426 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:44:59,438 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:44:59,748 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:44:59,774 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:44:59,793 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:44:59,807 p=605577 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] **********************************************************************************************************************************************************************************
2025-09-29 09:45:01,034 p=605577 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:45:01,069 p=605577 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:45:01,076 p=605577 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:45:01,107 p=605577 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:45:01,138 p=605577 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:45:01,752 p=605577 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:45:01,819 p=605577 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:45:01,832 p=605577 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:45:01,857 p=605577 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:45:01,996 p=605577 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:45:02,063 p=605577 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ***********************************************************************************************************************************************************************
2025-09-29 09:45:02,145 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:02,191 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:02,228 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:02,234 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:02,247 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:02,262 p=605577 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] *****************************************************************************************************************************************************************************
2025-09-29 09:45:02,992 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:03,046 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:03,175 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:03,219 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:03,331 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:03,344 p=605577 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] *************************************************************************************************************************************************************
2025-09-29 09:45:04,184 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:04,197 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:04,307 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:04,314 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:04,355 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:04,378 p=605577 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] **************************************************************************************************************************************************************
2025-09-29 09:45:04,459 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:04,583 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:04,655 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:04,658 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:04,681 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:04,711 p=605577 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ***************************************************************************************************************************************************************************
2025-09-29 09:45:04,819 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:04,879 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:04,944 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:04,948 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:05,815 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:05,851 p=605577 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ***************************************************************************************************************************************************************
2025-09-29 09:45:05,975 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:06,024 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:06,080 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:06,082 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:06,128 p=605577 u=root n=ansible | ok: [lb1]
2025-09-29 09:45:06,153 p=605577 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] **********************************************************************************************************************************************************************
2025-09-29 09:45:06,217 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:06,322 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:06,377 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:06,380 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:06,409 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:06,595 p=605577 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ***********************************************************************************************************************************************************************************
2025-09-29 09:45:06,776 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:06,828 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:06,833 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:06,848 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:06,898 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:06,930 p=605577 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] ********************************************************************************************************************************************************************
2025-09-29 09:45:07,006 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:07,020 p=605577 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] ********************************************************************************************************************************************************************
2025-09-29 09:45:07,051 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:07,059 p=605577 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] ********************************************************************************************************************************************************************
2025-09-29 09:45:07,088 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:07,096 p=605577 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] ********************************************************************************************************************************************************************
2025-09-29 09:45:07,127 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:07,136 p=605577 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] ********************************************************************************************************************************************************************
2025-09-29 09:45:07,148 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:07,156 p=605577 u=root n=ansible | TASK [install_elastic : Display node configuration] ****************************************************************************************************************************************************************************************
2025-09-29 09:45:07,285 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:45:07,296 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:45:07,304 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:07,349 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:45:07,350 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:45:07,369 p=605577 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] ****************************************************************************************************************************************************************************
2025-09-29 09:45:07,554 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:07,580 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:07,604 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:07,639 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:07,652 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:07,673 p=605577 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ***************************************************************************************************************************************************************************************
2025-09-29 09:45:07,916 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:07,926 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:07,929 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:07,941 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:08,039 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:08,063 p=605577 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ***********************************************************************************************************************************************************************************
2025-09-29 09:45:08,232 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:45:08,292 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:45:08,299 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:45:08,346 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:08,347 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:45:08,374 p=605577 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] *************************************************************************************************************************************************************************
2025-09-29 09:45:08,643 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:08,755 p=605577 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:45:08,786 p=605577 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] **********************************************************************************************************************************************************************************
2025-09-29 09:45:09,719 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:09,782 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:09,788 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:09,964 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:10,540 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:45:10,572 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:45:10,666 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:45:10,985 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:45:10,999 p=605577 u=root n=ansible | TASK [install_elastic : Detect OS family] **************************************************************************************************************************************************************************************************
2025-09-29 09:45:11,184 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:11,232 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:11,233 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:11,279 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:11,293 p=605577 u=root n=ansible | TASK [install_elastic : Install Docker packages] *******************************************************************************************************************************************************************************************
2025-09-29 09:45:11,417 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:11,466 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:11,495 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:11,605 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:11,618 p=605577 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] ******************************************************************************************************************************************************************************
2025-09-29 09:45:11,784 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:11,811 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:11,819 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:11,859 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:11,882 p=605577 u=root n=ansible | TASK [install_elastic : Install Python Docker module] **************************************************************************************************************************************************************************************
2025-09-29 09:45:12,034 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:12,066 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:12,097 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:12,142 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:12,163 p=605577 u=root n=ansible | TASK [install_elastic : Update apt cache] **************************************************************************************************************************************************************************************************
2025-09-29 09:45:13,719 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:13,756 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:13,815 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:13,975 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:13,989 p=605577 u=root n=ansible | TASK [install_elastic : Install Docker packages] *******************************************************************************************************************************************************************************************
2025-09-29 09:45:15,234 p=605577 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:45:15,235 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:45:15,254 p=605577 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:45:15,254 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:45:15,321 p=605577 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:45:15,322 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:45:15,437 p=605577 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:45:15,437 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:45:15,467 p=605577 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] ********************************************************************************************************************************************************
2025-09-29 09:45:15,609 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:15,703 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:15,704 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:15,785 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:15,809 p=605577 u=root n=ansible | TASK [install_elastic : Download Docker installation script] *******************************************************************************************************************************************************************************
2025-09-29 09:45:15,994 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:16,035 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:16,036 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:16,106 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:16,128 p=605577 u=root n=ansible | TASK [install_elastic : Install Docker using script] ***************************************************************************************************************************************************************************************
2025-09-29 09:45:16,273 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:16,335 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:16,369 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:16,370 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:16,386 p=605577 u=root n=ansible | TASK [install_elastic : Install docker-compose] ********************************************************************************************************************************************************************************************
2025-09-29 09:45:16,546 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:16,555 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:16,589 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:16,590 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:16,601 p=605577 u=root n=ansible | TASK [install_elastic : Start Docker service] **********************************************************************************************************************************************************************************************
2025-09-29 09:45:18,325 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:18,350 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:18,425 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:18,492 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:18,507 p=605577 u=root n=ansible | TASK [install_elastic : Add current user to docker group] **********************************************************************************************************************************************************************************
2025-09-29 09:45:19,882 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:20,025 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:20,065 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:20,111 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:20,124 p=605577 u=root n=ansible | TASK [install_elastic : Test Docker installation] ******************************************************************************************************************************************************************************************
2025-09-29 09:45:21,016 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:21,052 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:21,188 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:21,206 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:21,220 p=605577 u=root n=ansible | TASK [install_elastic : Display Docker version] ********************************************************************************************************************************************************************************************
2025-09-29 09:45:21,362 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:45:21,381 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:45:21,435 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:45:21,466 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:45:21,478 p=605577 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ***************************************************************************************************************************************************************************
2025-09-29 09:45:22,671 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:45:22,767 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:45:22,771 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:45:22,871 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:45:22,884 p=605577 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] ************************************************************************************************************************************************************************************
2025-09-29 09:45:23,742 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:23,787 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:23,859 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:23,892 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:23,919 p=605577 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] **************************************************************************************************************************************************************************
2025-09-29 09:45:24,100 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:24,130 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:24,138 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:24,218 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:24,238 p=605577 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] **********************************************************************************************************************************************************************************
2025-09-29 09:45:24,370 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:24,444 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:24,470 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:24,509 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:24,527 p=605577 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] *************************************************************************************************************************************************************************************************
2025-09-29 09:45:25,427 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:45:25,456 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:45:25,469 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:45:25,606 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:45:25,633 p=605577 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] *************************************************************************************************************************************************************************************
2025-09-29 09:45:26,467 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:45:26,545 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:45:26,548 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:26,794 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:45:26,811 p=605577 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] *************************************************************************************************************************************************************************
2025-09-29 09:45:28,155 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:28,166 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:28,182 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:28,183 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:28,202 p=605577 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] ******************************************************************************************************************************************************************************************
2025-09-29 09:45:29,135 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:45:29,200 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:45:29,208 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:45:29,224 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:45:29,253 p=605577 u=root n=ansible | TASK [install_elastic : Display system configuration status] *******************************************************************************************************************************************************************************
2025-09-29 09:45:29,446 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:45:29,473 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:45:29,474 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:45:29,492 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:45:29,511 p=605577 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] **************************************************************************************************************************************************************************
2025-09-29 09:45:29,732 p=605577 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:45:29,735 p=605577 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:45:29,737 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:30,499 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:30,505 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:30,569 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:30,574 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:45:31,315 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:45:31,350 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:45:31,401 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:45:31,449 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:45:31,474 p=605577 u=root n=ansible | TASK [install_elastic : Create node-specific directories] **********************************************************************************************************************************************************************************
2025-09-29 09:45:31,842 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:32,564 p=605577 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:45:32,581 p=605577 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:45:32,744 p=605577 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:45:32,789 p=605577 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:45:33,411 p=605577 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:45:33,510 p=605577 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:45:33,605 p=605577 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:45:33,767 p=605577 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:45:34,287 p=605577 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:45:34,419 p=605577 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:45:34,536 p=605577 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:45:34,636 p=605577 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:45:35,287 p=605577 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:45:35,431 p=605577 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:45:35,591 p=605577 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:45:36,141 p=605577 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:45:36,355 p=605577 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:45:36,469 p=605577 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:45:36,936 p=605577 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:45:37,264 p=605577 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:45:37,477 p=605577 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:45:37,904 p=605577 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:45:38,198 p=605577 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:45:38,370 p=605577 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:45:38,840 p=605577 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:45:39,174 p=605577 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:45:39,244 p=605577 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:45:39,817 p=605577 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:45:40,098 p=605577 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:45:40,184 p=605577 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:45:40,208 p=605577 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] ******************************************************************************************************************************************************************************
2025-09-29 09:45:40,426 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:45:40,555 p=605577 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:45:40,664 p=605577 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ***************************************************************************************************************************************************************************************************
2025-09-29 09:45:41,909 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:41,928 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:41,946 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:42,265 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:42,294 p=605577 u=root n=ansible | TASK [install_elastic : Create certificate directories] ************************************************************************************************************************************************************************************
2025-09-29 09:45:43,260 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:45:43,312 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:45:43,337 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:45:43,565 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:45:44,050 p=605577 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:45:44,145 p=605577 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:45:44,175 p=605577 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:45:44,337 p=605577 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:45:44,350 p=605577 u=root n=ansible | TASK [install_elastic : Create node certificate directories] *******************************************************************************************************************************************************************************
2025-09-29 09:45:45,223 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:45,262 p=605577 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:45,307 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:45,322 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:46,086 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:46,129 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:46,154 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:46,834 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:46,874 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:47,079 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:47,101 p=605577 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] ************************************************************************************************************************************************************************************
2025-09-29 09:45:48,051 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:45:48,069 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:45:48,285 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:45:48,290 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:45:48,314 p=605577 u=root n=ansible | TASK [install_elastic : Generate CA private key] *******************************************************************************************************************************************************************************************
2025-09-29 09:45:48,494 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:48,534 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:48,536 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:48,624 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:48,643 p=605577 u=root n=ansible | TASK [install_elastic : Generate CA certificate] *******************************************************************************************************************************************************************************************
2025-09-29 09:45:48,805 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:48,848 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:48,859 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:48,860 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:48,872 p=605577 u=root n=ansible | TASK [install_elastic : Set CA permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:45:49,043 p=605577 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:45:49,088 p=605577 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:45:49,094 p=605577 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:45:49,095 p=605577 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:45:49,097 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:45:49,153 p=605577 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:45:49,188 p=605577 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:45:49,190 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:45:49,199 p=605577 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:45:49,201 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:45:49,202 p=605577 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:45:49,204 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:45:49,222 p=605577 u=root n=ansible | TASK [install_elastic : Generate private key for each node] ********************************************************************************************************************************************************************************
2025-09-29 09:45:50,615 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:50,671 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:50,691 p=605577 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:50,715 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:51,636 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:51,903 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:52,217 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:53,107 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:53,336 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:53,959 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:53,988 p=605577 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] ************************************************************************************************************************************************************************
2025-09-29 09:45:54,955 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:55,048 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:55,052 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:55,213 p=605577 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:55,853 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:55,964 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:56,043 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:56,835 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:56,968 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:45:57,012 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:57,048 p=605577 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] ************************************************************************************************************************************************************************************
2025-09-29 09:45:58,118 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:58,190 p=605577 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:58,218 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:58,273 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:45:59,084 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:59,279 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:45:59,470 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:00,181 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:00,382 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:00,661 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:00,678 p=605577 u=root n=ansible | TASK [install_elastic : Set key permissions] ***********************************************************************************************************************************************************************************************
2025-09-29 09:46:01,514 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:01,542 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:01,732 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:01,764 p=605577 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:02,414 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:02,447 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:02,510 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:03,250 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:03,290 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:03,509 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:03,532 p=605577 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ***************************************************************************************************************************************************************************************
2025-09-29 09:46:04,524 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:04,535 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:04,636 p=605577 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:04,747 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:05,299 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:05,528 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:05,656 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:06,227 p=605577 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:06,405 p=605577 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:06,497 p=605577 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:06,522 p=605577 u=root n=ansible | TASK [install_elastic : Remove CSR files] **************************************************************************************************************************************************************************************************
2025-09-29 09:46:07,506 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:07,564 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:07,647 p=605577 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:07,688 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:08,497 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:08,509 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:08,516 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:46:09,287 p=605577 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:09,367 p=605577 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:46:09,505 p=605577 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:46:09,532 p=605577 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] ******************************************************************************************************************************************************************************
2025-09-29 09:46:09,698 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:46:09,732 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:46:09,748 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:46:09,749 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:46:09,770 p=605577 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ***************************************************************************************************************************************************************
2025-09-29 09:46:10,033 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:11,715 p=605577 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:46:11,769 p=605577 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:46:11,900 p=605577 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:46:12,377 p=605577 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:46:13,359 p=605577 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:46:13,483 p=605577 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:46:14,698 p=605577 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:46:14,922 p=605577 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:46:14,955 p=605577 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:46:16,104 p=605577 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:46:16,128 p=605577 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] ********************************************************************************************************************************************************************************
2025-09-29 09:46:16,373 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:17,780 p=605577 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:46:17,880 p=605577 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:46:17,942 p=605577 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:46:18,502 p=605577 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:46:19,416 p=605577 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:46:19,436 p=605577 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:46:20,623 p=605577 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:46:21,049 p=605577 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:46:21,081 p=605577 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:46:22,286 p=605577 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:46:22,314 p=605577 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] ************************************************************************************************************************************************************
2025-09-29 09:46:22,702 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:24,209 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:46:24,256 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:46:24,304 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:46:24,349 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:46:24,371 p=605577 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] ****************************************************************************************************************************************************************************
2025-09-29 09:46:24,650 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:25,209 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:46:25,495 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:46:25,563 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:46:25,598 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:46:25,651 p=605577 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ***********************************************************************************************************************************************************************
2025-09-29 09:46:25,799 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:46:25,861 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:46:25,929 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:46:25,991 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:46:25,994 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:26,013 p=605577 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] *************************************************************************************************************************************************************************
2025-09-29 09:46:26,244 p=605577 u=root n=ansible | skipping: [lb1]
2025-09-29 09:46:26,299 p=605577 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3, bda
2025-09-29 09:46:26,489 p=605577 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] **********************************************************************************************************************************************************************************
2025-09-29 09:46:26,573 p=605577 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:46:26,633 p=605577 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:46:26,647 p=605577 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:46:26,703 p=605577 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:46:26,721 p=605577 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ***************************************************************************************************************************************************************************
2025-09-29 09:46:28,704 p=605577 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.NotFound: 404 Client Error for http+docker://localhost/v1.44/networks/elastic: Not Found ("network elastic not found")
2025-09-29 09:46:28,705 p=605577 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 404 Client Error for http+docker://localhost/v1.44/networks/elastic: Not Found (\"network elastic not found\")"}
2025-09-29 09:46:28,705 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:46:29,094 p=605577 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address")
2025-09-29 09:46:29,095 p=605577 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address\")"}
2025-09-29 09:46:29,095 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:46:29,106 p=605577 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address")
2025-09-29 09:46:29,107 p=605577 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address\")"}
2025-09-29 09:46:29,107 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:46:29,271 p=605577 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: invalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address")
2025-09-29 09:46:29,271 p=605577 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 400 Client Error for http+docker://localhost/v1.44/networks/create: Bad Request (\"invalid network config:\ninvalid gateway 192.168.180.1: parent subnet 192.168.180.0/24 doesn't contain this address\")"}
2025-09-29 09:46:29,271 p=605577 u=root n=ansible | ...ignoring
2025-09-29 09:46:29,294 p=605577 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] *******************************************************************************************************************************************************************************
2025-09-29 09:46:30,242 p=605577 u=root n=ansible | ok: [host1]
2025-09-29 09:46:30,292 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:46:30,293 p=605577 u=root n=ansible | ok: [bda]
2025-09-29 09:46:30,300 p=605577 u=root n=ansible | ok: [host2]
2025-09-29 09:46:30,324 p=605577 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] ****************************************************************************************************************************************************************************
2025-09-29 09:46:30,519 p=605577 u=root n=ansible | skipping: [host1]
2025-09-29 09:46:30,561 p=605577 u=root n=ansible | skipping: [host2]
2025-09-29 09:46:30,562 p=605577 u=root n=ansible | skipping: [host3]
2025-09-29 09:46:30,629 p=605577 u=root n=ansible | skipping: [bda]
2025-09-29 09:46:30,653 p=605577 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] ****************************************************************************************************************************************************************************
2025-09-29 09:46:32,761 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:46:32,889 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:46:32,923 p=605577 u=root n=ansible | changed: [host2]
2025-09-29 09:46:33,423 p=605577 u=root n=ansible | changed: [bda]
2025-09-29 09:46:33,443 p=605577 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] *************************************************************************************************************************************************************************
2025-09-29 09:46:35,926 p=605577 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.457388", "end": "2025-09-29 09:46:35.732517", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:46:34.275129", "stderr": "Creating bda-master ... \r\nCreating bda-master ... error\r\n\nERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"e8a25705d8c778326d9d8cd082df5cc978c636f8691379117f3cd11208a6a7f4\". You have to remove (or rename) that container to be able to reuse that name.\n\nERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"e8a25705d8c778326d9d8cd082df5cc978c636f8691379117f3cd11208a6a7f4\". You have to remove (or rename) that container to be able to reuse that name.\nEncountered errors while bringing up the project.", "stderr_lines": ["Creating bda-master ... ", "Creating bda-master ... error", "", "ERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"e8a25705d8c778326d9d8cd082df5cc978c636f8691379117f3cd11208a6a7f4\". You have to remove (or rename) that container to be able to reuse that name.", "", "ERROR: for bda-master  Cannot create container for service bda-master: Conflict. The container name \"/bda-master\" is already in use by container \"e8a25705d8c778326d9d8cd082df5cc978c636f8691379117f3cd11208a6a7f4\". You have to remove (or rename) that container to be able to reuse that name.", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:46:36,846 p=605577 u=root n=ansible | changed: [host1]
2025-09-29 09:46:37,221 p=605577 u=root n=ansible | changed: [host3]
2025-09-29 09:46:38,087 p=605577 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:03.683804", "end": "2025-09-29 09:46:37.947966", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:46:34.264162", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nCreating master-host2 ... \r\nCreating warm-host2   ... \r\nCreating sf-host2     ... \r\nCreating sf-host2     ... done\r\nCreating master-host2 ... error\r\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/master-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nCreating warm-host2   ... error\r\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/master-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nEncountered errors while bringing up the project.", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Creating master-host2 ... ", "Creating warm-host2   ... ", "Creating sf-host2     ... ", "Creating sf-host2     ... done", "Creating master-host2 ... error", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/master-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Creating warm-host2   ... error", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/master-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/warm-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:46:38,119 p=605577 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] *********************************************************************************************************************************************************************************
2025-09-29 09:46:40,829 p=605577 u=root n=ansible | ok: [host3]
2025-09-29 09:49:22,059 p=615956 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 09:49:22,118 p=615956 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 09:49:25,255 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:25,444 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:25,572 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:25,653 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:25,942 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:25,960 p=615956 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 09:49:26,077 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:26,122 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:26,160 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:26,165 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:26,193 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:26,218 p=615956 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 09:49:26,317 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:19:24Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:49:26,377 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:19:24Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:49:26,427 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:19:25Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:49:26,434 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:19:25Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:49:26,478 p=615956 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:19:24Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:49:26,701 p=615956 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 09:49:28,867 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:28,872 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:28,962 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:28,985 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:29,283 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:29,302 p=615956 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 09:49:29,398 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:29,439 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:29,476 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:29,483 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:29,517 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:29,539 p=615956 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 09:49:29,577 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:29,597 p=615956 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 09:49:29,628 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:29,644 p=615956 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 09:49:29,681 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:29,706 p=615956 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 09:49:31,043 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:49:31,114 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:49:31,114 p=615956 u=root n=ansible | changed: [lb1]
2025-09-29 09:49:31,417 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:49:32,147 p=615956 u=root n=ansible | changed: [bda]
2025-09-29 09:49:32,170 p=615956 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 09:49:32,199 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:32,215 p=615956 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 09:49:34,485 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:35,464 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:49:35,510 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:49:35,526 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:49:35,602 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:35,710 p=615956 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 09:49:37,737 p=615956 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:49:37,767 p=615956 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:49:37,792 p=615956 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:49:37,815 p=615956 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:49:37,844 p=615956 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:49:38,409 p=615956 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:49:38,474 p=615956 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:49:38,477 p=615956 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:49:38,481 p=615956 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:49:38,486 p=615956 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:49:38,602 p=615956 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 09:49:38,689 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:38,729 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:38,771 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:38,773 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:38,792 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:38,813 p=615956 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 09:49:39,574 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:39,604 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:39,663 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:39,695 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:39,705 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:39,727 p=615956 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 09:49:40,584 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:40,600 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:40,608 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:40,640 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:40,767 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:40,796 p=615956 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 09:49:40,900 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:40,954 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:40,991 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:40,998 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:41,043 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:41,066 p=615956 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 09:49:41,140 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:41,184 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:41,234 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:41,295 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:42,079 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:42,095 p=615956 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 09:49:42,155 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:42,204 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:42,260 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:42,309 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:42,354 p=615956 u=root n=ansible | ok: [lb1]
2025-09-29 09:49:42,371 p=615956 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 09:49:42,465 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:42,506 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:42,541 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:42,547 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:42,576 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:42,678 p=615956 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 09:49:42,844 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:42,856 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:42,874 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:42,905 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:42,939 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:42,963 p=615956 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:49:43,039 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:43,062 p=615956 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:49:43,141 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:43,160 p=615956 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:49:43,236 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:43,256 p=615956 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:49:43,339 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:43,358 p=615956 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 09:49:43,384 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:43,403 p=615956 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 09:49:43,545 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:49:43,602 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:49:43,609 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:49:43,652 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:43,652 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:49:43,673 p=615956 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 09:49:43,839 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:43,863 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:43,877 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:43,895 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:43,908 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:43,929 p=615956 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 09:49:44,147 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:44,176 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:44,215 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:44,231 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:44,279 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:44,305 p=615956 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 09:49:44,451 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:49:44,489 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:49:44,496 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:49:44,509 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:49:44,520 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:44,539 p=615956 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 09:49:44,748 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:49:44,825 p=615956 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:49:44,854 p=615956 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:49:45,777 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:49:45,829 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:49:45,847 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:49:45,927 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:49:46,695 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:49:46,698 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:49:46,707 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:49:46,904 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:49:46,924 p=615956 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 09:49:47,070 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:47,095 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:47,146 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:47,146 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:47,162 p=615956 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:49:47,313 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:47,343 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:47,348 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:47,398 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:47,417 p=615956 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 09:49:47,557 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:47,586 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:47,599 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:47,651 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:47,671 p=615956 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 09:49:47,854 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:47,855 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:47,864 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:47,898 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:47,924 p=615956 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 09:49:49,582 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:49,643 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:49,687 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:49,769 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:49,788 p=615956 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 09:49:51,111 p=615956 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:49:51,112 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:49:51,125 p=615956 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:49:51,126 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:49:51,246 p=615956 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:49:51,246 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:49:51,326 p=615956 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:49:51,326 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:49:51,343 p=615956 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 09:49:51,513 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:51,550 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:51,580 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:51,607 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:51,622 p=615956 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 09:49:51,759 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:51,792 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:51,808 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:51,859 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:51,882 p=615956 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 09:49:52,025 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:52,053 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:52,073 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:52,090 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:52,106 p=615956 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 09:49:52,203 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:49:52,246 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:49:52,295 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:49:52,317 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:49:52,336 p=615956 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 09:49:54,321 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:54,428 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:54,429 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:54,506 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:54,522 p=615956 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 09:49:55,900 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:55,980 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:56,006 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:56,017 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:56,036 p=615956 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 09:49:56,982 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:56,983 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:57,130 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:57,191 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:57,208 p=615956 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 09:49:57,341 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:49:57,367 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:49:57,377 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:49:57,415 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:49:57,432 p=615956 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:49:58,480 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:49:58,481 p=615956 u=root n=ansible | changed: [bda]
2025-09-29 09:49:58,612 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:49:58,751 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:49:58,773 p=615956 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 09:49:59,764 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:49:59,775 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:49:59,874 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:49:59,923 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:49:59,939 p=615956 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 09:50:00,071 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:50:00,103 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:50:00,116 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:50:00,151 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:50:00,174 p=615956 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 09:50:00,337 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:50:00,376 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:50:00,377 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:50:00,416 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:50:00,439 p=615956 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 09:50:01,216 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:50:01,316 p=615956 u=root n=ansible | changed: [bda]
2025-09-29 09:50:01,412 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:50:01,465 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:50:01,484 p=615956 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 09:50:02,359 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:50:02,479 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:50:02,599 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:50:02,601 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:50:02,619 p=615956 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 09:50:03,809 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:50:03,836 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:50:03,842 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:50:03,856 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:50:03,875 p=615956 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 09:50:04,806 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:50:04,809 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:50:04,989 p=615956 u=root n=ansible | changed: [bda]
2025-09-29 09:50:05,031 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:50:05,053 p=615956 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 09:50:05,198 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:50:05,232 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:50:05,260 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:50:05,284 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:50:05,302 p=615956 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 09:50:05,527 p=615956 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:50:05,532 p=615956 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:50:05,534 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:50:06,208 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:50:06,229 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:50:06,249 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:50:06,373 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:50:06,958 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:50:07,010 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:50:07,099 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:50:07,135 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:50:07,156 p=615956 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 09:50:07,379 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:50:08,099 p=615956 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:50:08,125 p=615956 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:50:08,198 p=615956 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:50:08,245 p=615956 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:50:08,918 p=615956 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:50:09,016 p=615956 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:50:09,034 p=615956 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:50:09,282 p=615956 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:50:09,637 p=615956 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:50:09,939 p=615956 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:50:09,948 p=615956 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:50:10,239 p=615956 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:50:10,848 p=615956 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:50:10,948 p=615956 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:50:11,324 p=615956 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:50:11,926 p=615956 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:50:12,001 p=615956 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:50:12,294 p=615956 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:50:12,829 p=615956 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:50:12,843 p=615956 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:50:13,264 p=615956 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:50:13,780 p=615956 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:50:13,786 p=615956 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:50:14,171 p=615956 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:50:14,616 p=615956 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:50:14,619 p=615956 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:50:14,949 p=615956 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:50:15,469 p=615956 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:50:15,534 p=615956 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:50:16,052 p=615956 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:50:16,074 p=615956 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 09:50:16,284 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:50:16,460 p=615956 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 09:50:16,584 p=615956 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 09:50:17,737 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:50:17,806 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:50:17,827 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:50:18,049 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:50:18,068 p=615956 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 09:50:19,250 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:50:19,327 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:50:19,332 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:50:19,517 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:50:20,046 p=615956 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:50:20,308 p=615956 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:50:20,309 p=615956 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:50:20,705 p=615956 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:50:20,725 p=615956 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 09:50:21,745 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:21,776 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:21,848 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:21,941 p=615956 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:22,708 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:22,829 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:22,876 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:23,677 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:23,691 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:24,088 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:24,118 p=615956 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 09:50:25,209 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:50:25,447 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:50:25,463 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:50:25,635 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:50:25,655 p=615956 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 09:50:25,798 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:50:25,831 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:50:25,842 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:50:25,891 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:50:25,909 p=615956 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 09:50:26,053 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:50:26,084 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:50:26,097 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:50:26,131 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:50:26,149 p=615956 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 09:50:26,437 p=615956 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:50:26,452 p=615956 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:50:26,500 p=615956 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:50:26,502 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:50:26,514 p=615956 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:50:26,518 p=615956 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:50:26,520 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:50:26,545 p=615956 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:50:26,594 p=615956 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:50:26,596 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:50:26,610 p=615956 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:50:26,612 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:50:26,630 p=615956 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:50:27,853 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:28,154 p=615956 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:28,365 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:28,900 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:29,377 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:30,128 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:30,668 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:31,122 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:31,358 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:31,743 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:31,759 p=615956 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 09:50:32,719 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:32,999 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:33,052 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:33,066 p=615956 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:34,181 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:34,285 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:34,409 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:35,269 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:35,421 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:35,923 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:35,944 p=615956 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 09:50:36,847 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:36,968 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:36,987 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:37,005 p=615956 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:37,780 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:37,932 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:38,053 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:38,793 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:39,068 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:39,072 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:39,095 p=615956 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 09:50:40,075 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:40,204 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:40,219 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:40,304 p=615956 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:40,915 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:41,078 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:41,142 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:41,723 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:41,967 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:42,002 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:42,027 p=615956 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 09:50:42,970 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:43,128 p=615956 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:43,141 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:43,156 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:43,893 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:44,082 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:44,159 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:44,775 p=615956 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:44,932 p=615956 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:45,058 p=615956 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:45,076 p=615956 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 09:50:46,035 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:46,124 p=615956 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:46,142 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:46,202 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:46,874 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:46,968 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:47,063 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:50:47,637 p=615956 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:47,773 p=615956 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:50:47,914 p=615956 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:50:47,944 p=615956 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 09:50:48,084 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:50:48,112 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:50:48,133 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:50:48,162 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:50:48,179 p=615956 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 09:50:48,409 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:50:49,790 p=615956 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:50:49,868 p=615956 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:50:49,895 p=615956 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:50:50,661 p=615956 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:50:51,496 p=615956 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:50:51,575 p=615956 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:50:52,862 p=615956 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:50:53,041 p=615956 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:50:53,327 p=615956 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:50:54,613 p=615956 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:50:54,639 p=615956 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 09:50:54,864 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:50:56,333 p=615956 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:50:56,387 p=615956 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:50:56,471 p=615956 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:50:56,998 p=615956 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:50:57,947 p=615956 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:50:58,019 p=615956 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:50:59,351 p=615956 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:50:59,582 p=615956 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:51:00,051 p=615956 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:51:01,233 p=615956 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:51:01,253 p=615956 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 09:51:01,453 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:51:02,708 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:51:02,924 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:51:03,012 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:51:03,177 p=615956 u=root n=ansible | changed: [host1]
2025-09-29 09:51:03,201 p=615956 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 09:51:03,448 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:51:04,124 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:51:04,125 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:51:04,195 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:51:04,227 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:51:04,257 p=615956 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 09:51:04,528 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:51:04,580 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:51:04,594 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:51:04,616 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:51:04,623 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:51:04,646 p=615956 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:51:04,876 p=615956 u=root n=ansible | skipping: [lb1]
2025-09-29 09:51:04,966 p=615956 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, bda, host3
2025-09-29 09:51:05,169 p=615956 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************************************************************************************************************************************
2025-09-29 09:51:05,324 p=615956 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:51:05,351 p=615956 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:51:05,439 p=615956 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:51:05,447 p=615956 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:51:05,464 p=615956 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 09:51:07,565 p=615956 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.APIError: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden ("Pool overlaps with other one on this address space")
2025-09-29 09:51:07,566 p=615956 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden (\"Pool overlaps with other one on this address space\")"}
2025-09-29 09:51:07,566 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:08,014 p=615956 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.APIError: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden ("Pool overlaps with other one on this address space")
2025-09-29 09:51:08,015 p=615956 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden (\"Pool overlaps with other one on this address space\")"}
2025-09-29 09:51:08,015 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:08,121 p=615956 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.APIError: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden ("Pool overlaps with other one on this address space")
2025-09-29 09:51:08,122 p=615956 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden (\"Pool overlaps with other one on this address space\")"}
2025-09-29 09:51:08,122 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:08,122 p=615956 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.APIError: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden ("Pool overlaps with other one on this address space")
2025-09-29 09:51:08,123 p=615956 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 403 Client Error for http+docker://localhost/v1.44/networks/create: Forbidden (\"Pool overlaps with other one on this address space\")"}
2025-09-29 09:51:08,123 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:08,140 p=615956 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************************************************************************************************************************************
2025-09-29 09:51:09,090 p=615956 u=root n=ansible | ok: [host1]
2025-09-29 09:51:09,118 p=615956 u=root n=ansible | ok: [host2]
2025-09-29 09:51:09,185 p=615956 u=root n=ansible | ok: [bda]
2025-09-29 09:51:09,297 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:51:09,322 p=615956 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************************************************************************************************************************************
2025-09-29 09:51:09,439 p=615956 u=root n=ansible | skipping: [host1]
2025-09-29 09:51:09,502 p=615956 u=root n=ansible | skipping: [host2]
2025-09-29 09:51:09,506 p=615956 u=root n=ansible | skipping: [host3]
2025-09-29 09:51:09,558 p=615956 u=root n=ansible | skipping: [bda]
2025-09-29 09:51:09,584 p=615956 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************************************************************************************************************************************
2025-09-29 09:51:12,025 p=615956 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.495150", "end": "2025-09-29 09:51:11.901858", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:51:10.406708", "stderr": "Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\nRemoving network elasticsearch_elastic\nerror while removing network: network elasticsearch_elastic id cf7b31f510b0f9d7c26bf062d58b694fdf5f82b4f62af8b705b3a60d863e9e60 has active endpoints", "stderr_lines": ["Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.", "Removing network elasticsearch_elastic", "error while removing network: network elasticsearch_elastic id cf7b31f510b0f9d7c26bf062d58b694fdf5f82b4f62af8b705b3a60d863e9e60 has active endpoints"], "stdout": "", "stdout_lines": []}
2025-09-29 09:51:12,026 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:12,055 p=615956 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose down\n", "delta": "0:00:01.468180", "end": "2025-09-29 09:51:11.947047", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:51:10.478867", "stderr": "Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\nRemoving network elasticsearch_elastic\nerror while removing network: network elasticsearch_elastic id cf7b31f510b0f9d7c26bf062d58b694fdf5f82b4f62af8b705b3a60d863e9e60 has active endpoints", "stderr_lines": ["Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.", "Removing network elasticsearch_elastic", "error while removing network: network elasticsearch_elastic id cf7b31f510b0f9d7c26bf062d58b694fdf5f82b4f62af8b705b3a60d863e9e60 has active endpoints"], "stdout": "", "stdout_lines": []}
2025-09-29 09:51:12,056 p=615956 u=root n=ansible | ...ignoring
2025-09-29 09:51:15,662 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:51:23,465 p=615956 u=root n=ansible | changed: [host2]
2025-09-29 09:51:23,487 p=615956 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 09:51:26,601 p=615956 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:02.190412", "end": "2025-09-29 09:51:26.478100", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:51:24.287688", "stderr": "Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\nCreating master-host1 ... \r\nCreating hot-host1    ... \r\nCreating ml-host1     ... \r\nCreating ml-host1     ... error\r\n\nERROR: for ml-host1  Cannot create container for service ml-host1: Conflict. The container name \"/ml-host1\" is already in use by container \"278035e14b937cfb65e214f3c77704d6f39907fca9800b4a3c6318c7af7f139c\". You have to remove (or rename) that container to be able to reuse that name.\nCreating hot-host1    ... error\r\n\nERROR: for hot-host1  Cannot create container for service hot-host1: Conflict. The container name \"/hot-host1\" is already in use by container \"5d72fc85bb452bf98d93e63b3b2d5c9fefa622f807638752fc7b5f026b53f15a\". You have to remove (or rename) that container to be able to reuse that name.\nHost is already in use by another container\nCreating master-host1 ... error\r\n\nERROR: for master-host1  Cannot start service master-host1: driver failed programming external connectivity on endpoint master-host1 (ef10b1dd29232ce70afaf1c67acd3206c9e2bbc7121669475bb71a804b11e4c0): Bind for 192.168.166.130:9300 failed: port is already allocated\n\nERROR: for ml-host1  Cannot create container for service ml-host1: Conflict. The container name \"/ml-host1\" is already in use by container \"278035e14b937cfb65e214f3c77704d6f39907fca9800b4a3c6318c7af7f139c\". You have to remove (or rename) that container to be able to reuse that name.\n\nERROR: for hot-host1  Cannot create container for service hot-host1: Conflict. The container name \"/hot-host1\" is already in use by container \"5d72fc85bb452bf98d93e63b3b2d5c9fefa622f807638752fc7b5f026b53f15a\". You have to remove (or rename) that container to be able to reuse that name.\n\nERROR: for master-host1  Cannot start service master-host1: driver failed programming external connectivity on endpoint master-host1 (ef10b1dd29232ce70afaf1c67acd3206c9e2bbc7121669475bb71a804b11e4c0): Bind for 192.168.166.130:9300 failed: port is already allocated\nEncountered errors while bringing up the project.", "stderr_lines": ["Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.", "Creating master-host1 ... ", "Creating hot-host1    ... ", "Creating ml-host1     ... ", "Creating ml-host1     ... error", "", "ERROR: for ml-host1  Cannot create container for service ml-host1: Conflict. The container name \"/ml-host1\" is already in use by container \"278035e14b937cfb65e214f3c77704d6f39907fca9800b4a3c6318c7af7f139c\". You have to remove (or rename) that container to be able to reuse that name.", "Creating hot-host1    ... error", "", "ERROR: for hot-host1  Cannot create container for service hot-host1: Conflict. The container name \"/hot-host1\" is already in use by container \"5d72fc85bb452bf98d93e63b3b2d5c9fefa622f807638752fc7b5f026b53f15a\". You have to remove (or rename) that container to be able to reuse that name.", "Host is already in use by another container", "Creating master-host1 ... error", "", "ERROR: for master-host1  Cannot start service master-host1: driver failed programming external connectivity on endpoint master-host1 (ef10b1dd29232ce70afaf1c67acd3206c9e2bbc7121669475bb71a804b11e4c0): Bind for 192.168.166.130:9300 failed: port is already allocated", "", "ERROR: for ml-host1  Cannot create container for service ml-host1: Conflict. The container name \"/ml-host1\" is already in use by container \"278035e14b937cfb65e214f3c77704d6f39907fca9800b4a3c6318c7af7f139c\". You have to remove (or rename) that container to be able to reuse that name.", "", "ERROR: for hot-host1  Cannot create container for service hot-host1: Conflict. The container name \"/hot-host1\" is already in use by container \"5d72fc85bb452bf98d93e63b3b2d5c9fefa622f807638752fc7b5f026b53f15a\". You have to remove (or rename) that container to be able to reuse that name.", "", "ERROR: for master-host1  Cannot start service master-host1: driver failed programming external connectivity on endpoint master-host1 (ef10b1dd29232ce70afaf1c67acd3206c9e2bbc7121669475bb71a804b11e4c0): Bind for 192.168.166.130:9300 failed: port is already allocated", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:51:27,199 p=615956 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:02.822212", "end": "2025-09-29 09:51:27.065860", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:51:24.243648", "stderr": "Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\nCreating ml-host1 ... \r\nCreating hot-host1 ... \r\nCreating master-host1 ... \r\nCreating master-host1 ... error\r\n\nERROR: for master-host1  Cannot create container for service master-host1: Conflict. The container name \"/master-host1\" is already in use by container \"2cf94b8c22be62b13f6e02819c1b73453d65e99475c68ad0aa822273d3815c72\". You have to remove (or rename) that container to be able to reuse that name.\nCreating hot-host1    ... done\r\nCreating ml-host1     ... done\r\n\nERROR: for master-host1  Cannot create container for service master-host1: Conflict. The container name \"/master-host1\" is already in use by container \"2cf94b8c22be62b13f6e02819c1b73453d65e99475c68ad0aa822273d3815c72\". You have to remove (or rename) that container to be able to reuse that name.\nEncountered errors while bringing up the project.", "stderr_lines": ["Found orphan containers (bda-master) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.", "Creating ml-host1 ... ", "Creating hot-host1 ... ", "Creating master-host1 ... ", "Creating master-host1 ... error", "", "ERROR: for master-host1  Cannot create container for service master-host1: Conflict. The container name \"/master-host1\" is already in use by container \"2cf94b8c22be62b13f6e02819c1b73453d65e99475c68ad0aa822273d3815c72\". You have to remove (or rename) that container to be able to reuse that name.", "Creating hot-host1    ... done", "Creating ml-host1     ... done", "", "ERROR: for master-host1  Cannot create container for service master-host1: Conflict. The container name \"/master-host1\" is already in use by container \"2cf94b8c22be62b13f6e02819c1b73453d65e99475c68ad0aa822273d3815c72\". You have to remove (or rename) that container to be able to reuse that name.", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:51:27,498 p=615956 u=root n=ansible | changed: [host3]
2025-09-29 09:51:27,889 p=615956 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:03.423285", "end": "2025-09-29 09:51:27.750891", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:51:24.327606", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nCreating master-host2 ... \r\nCreating sf-host2     ... \r\nCreating warm-host2   ... \r\nCreating sf-host2     ... done\r\nCreating warm-host2   ... error\r\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nCreating master-host2 ... error\r\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\n\nERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nEncountered errors while bringing up the project.", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Creating master-host2 ... ", "Creating sf-host2     ... ", "Creating warm-host2   ... ", "Creating sf-host2     ... done", "Creating warm-host2   ... error", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Creating master-host2 ... error", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for warm-host2  Cannot start service warm-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/warm-host2/config/jvm.options\" to rootfs at \"/usr/share/elasticsearch/config/jvm.options\": mount /usr/share/siem/elasticsearch/warm-host2/config/jvm.options:/usr/share/elasticsearch/config/jvm.options (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "", "ERROR: for master-host2  Cannot start service master-host2: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml\" to rootfs at \"/usr/share/elasticsearch/config/elasticsearch.yml\": mount /usr/share/siem/elasticsearch/master-host2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml (via /proc/self/fd/6), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type", "Encountered errors while bringing up the project."], "stdout": "", "stdout_lines": []}
2025-09-29 09:51:27,976 p=615956 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************************************************************************************************************************************
2025-09-29 09:51:30,732 p=615956 u=root n=ansible | ok: [host3]
2025-09-29 09:51:30,784 p=615956 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************************************************************************************************************************************
2025-09-29 09:51:42,721 p=615956 u=root n=ansible |  [ERROR]: User interrupted execution

2025-09-29 09:54:51,105 p=626626 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************
2025-09-29 09:54:51,143 p=626626 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-29 09:54:54,626 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:54:54,706 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:54:54,738 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:54:54,837 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:54:55,041 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:54:55,054 p=626626 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-29 09:54:55,141 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:54:55,198 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:54:55,249 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:54:55,251 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:54:55,288 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:54:55,313 p=626626 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************
2025-09-29 09:54:55,436 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:54:55,493 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:54:55,552 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:54:55,555 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:54:55,585 p=626626 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:54:55,776 p=626626 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-29 09:54:57,608 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:54:57,683 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:54:57,823 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:54:57,864 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:54:57,879 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:54:57,899 p=626626 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-29 09:54:58,034 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:54:58,073 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:54:58,123 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:54:58,127 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:54:58,185 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:54:58,223 p=626626 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-29 09:54:58,281 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:54:58,297 p=626626 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-29 09:54:58,323 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:54:58,338 p=626626 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-29 09:54:58,363 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:54:58,384 p=626626 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-29 09:54:59,664 p=626626 u=root n=ansible | changed: [lb1]
2025-09-29 09:54:59,688 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:54:59,703 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:54:59,704 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:55:00,651 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:00,674 p=626626 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-29 09:55:00,698 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:00,720 p=626626 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-29 09:55:02,858 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:03,146 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:55:03,197 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:03,257 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:55:03,313 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:03,341 p=626626 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-29 09:55:04,505 p=626626 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 09:55:04,562 p=626626 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 09:55:04,570 p=626626 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 09:55:04,585 p=626626 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 09:55:04,678 p=626626 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 09:55:05,308 p=626626 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 09:55:05,382 p=626626 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 09:55:05,398 p=626626 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 09:55:05,486 p=626626 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 09:55:05,563 p=626626 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 09:55:05,699 p=626626 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-29 09:55:05,794 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:05,832 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:05,863 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:05,868 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:05,891 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:05,907 p=626626 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-29 09:55:06,787 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:06,813 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:06,821 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:06,918 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:06,919 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:06,933 p=626626 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-29 09:55:07,774 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:07,776 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:07,834 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:07,891 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:08,005 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:08,029 p=626626 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-29 09:55:08,182 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:08,222 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:08,281 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:08,284 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:08,313 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:08,331 p=626626 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-29 09:55:08,404 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:08,446 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:08,481 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:08,490 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:09,330 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:09,366 p=626626 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-29 09:55:09,454 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:09,504 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:09,618 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:09,621 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:09,686 p=626626 u=root n=ansible | ok: [lb1]
2025-09-29 09:55:09,773 p=626626 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-29 09:55:09,856 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:09,895 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:09,931 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:09,933 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:09,949 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:10,029 p=626626 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************
2025-09-29 09:55:10,188 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:10,203 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:10,233 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:10,233 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:10,303 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:10,322 p=626626 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 09:55:10,367 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:10,376 p=626626 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 09:55:10,420 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:10,432 p=626626 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 09:55:10,520 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:10,536 p=626626 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 09:55:10,589 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:10,602 p=626626 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 09:55:10,622 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:10,636 p=626626 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************
2025-09-29 09:55:10,810 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 09:55:10,825 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 09:55:10,833 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:10,861 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 09:55:10,878 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 09:55:10,892 p=626626 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************
2025-09-29 09:55:11,044 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:11,123 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:11,126 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:11,138 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:11,222 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:11,238 p=626626 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************
2025-09-29 09:55:11,450 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:11,512 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:11,518 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:11,554 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:11,627 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:11,646 p=626626 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************
2025-09-29 09:55:11,820 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:55:11,858 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:55:11,862 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:55:11,891 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 09:55:11,903 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:11,925 p=626626 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************
2025-09-29 09:55:12,149 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:12,238 p=626626 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 09:55:12,292 p=626626 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-29 09:55:13,235 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:13,271 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:13,306 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:13,321 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:14,068 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:55:14,083 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:55:14,107 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:55:14,122 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:55:14,165 p=626626 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************
2025-09-29 09:55:14,309 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:14,365 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:14,404 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:14,452 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:14,466 p=626626 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************
2025-09-29 09:55:14,551 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:14,622 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:14,659 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:14,678 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:14,706 p=626626 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************
2025-09-29 09:55:14,848 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:15,054 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:15,092 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:15,114 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:15,129 p=626626 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************
2025-09-29 09:55:15,251 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:15,301 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:15,328 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:15,388 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:15,410 p=626626 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************
2025-09-29 09:55:16,833 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:16,860 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:16,913 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:16,953 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:16,975 p=626626 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************
2025-09-29 09:55:18,088 p=626626 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:55:18,089 p=626626 u=root n=ansible | ...ignoring
2025-09-29 09:55:18,175 p=626626 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:55:18,175 p=626626 u=root n=ansible | ...ignoring
2025-09-29 09:55:18,204 p=626626 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:55:18,204 p=626626 u=root n=ansible | ...ignoring
2025-09-29 09:55:18,251 p=626626 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 09:55:18,251 p=626626 u=root n=ansible | ...ignoring
2025-09-29 09:55:18,278 p=626626 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************
2025-09-29 09:55:18,521 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:18,555 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:18,571 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:18,613 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:18,638 p=626626 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************
2025-09-29 09:55:18,785 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:18,825 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:18,894 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:18,936 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:18,959 p=626626 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************
2025-09-29 09:55:19,132 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:19,169 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:19,223 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:19,240 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:19,259 p=626626 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************
2025-09-29 09:55:19,441 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:19,471 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:19,472 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:19,555 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:19,577 p=626626 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************
2025-09-29 09:55:21,521 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:21,578 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:21,583 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:21,640 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:21,665 p=626626 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************
2025-09-29 09:55:23,124 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:23,140 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:23,263 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:23,294 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:23,319 p=626626 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************
2025-09-29 09:55:24,315 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:24,377 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:24,477 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:24,717 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:24,738 p=626626 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************
2025-09-29 09:55:24,915 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:55:24,917 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:55:24,955 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:55:24,971 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 09:55:24,991 p=626626 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-29 09:55:26,319 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:26,349 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:55:26,358 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:55:26,371 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:55:26,388 p=626626 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-29 09:55:27,313 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:27,322 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:27,431 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:27,508 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:27,519 p=626626 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-29 09:55:27,643 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:27,712 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:27,766 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:27,898 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:27,913 p=626626 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-29 09:55:28,059 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:28,078 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:28,104 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:28,167 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:28,190 p=626626 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-29 09:55:29,143 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:55:29,202 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:29,252 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:55:29,428 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:55:29,449 p=626626 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-29 09:55:30,353 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:55:30,380 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:55:30,397 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:30,611 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:30,628 p=626626 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-29 09:55:31,912 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:31,948 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:31,965 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:32,044 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:32,061 p=626626 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-29 09:55:32,880 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:55:32,985 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:55:33,044 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:55:33,099 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:55:33,114 p=626626 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************
2025-09-29 09:55:33,247 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:55:33,315 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:55:33,351 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:55:33,396 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 09:55:33,413 p=626626 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************
2025-09-29 09:55:33,625 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 09:55:33,634 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 09:55:33,637 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:34,415 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:34,514 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:34,516 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:34,590 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 09:55:35,362 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:55:35,412 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:55:35,420 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:55:35,424 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:55:35,458 p=626626 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-29 09:55:35,757 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:36,435 p=626626 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 09:55:36,478 p=626626 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 09:55:36,516 p=626626 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 09:55:36,536 p=626626 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 09:55:37,317 p=626626 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 09:55:37,331 p=626626 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 09:55:37,359 p=626626 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 09:55:37,392 p=626626 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 09:55:38,172 p=626626 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 09:55:38,198 p=626626 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 09:55:38,206 p=626626 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 09:55:38,286 p=626626 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 09:55:38,898 p=626626 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 09:55:38,955 p=626626 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 09:55:39,287 p=626626 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 09:55:39,687 p=626626 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 09:55:39,740 p=626626 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 09:55:40,251 p=626626 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 09:55:40,561 p=626626 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 09:55:40,648 p=626626 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 09:55:41,056 p=626626 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 09:55:41,299 p=626626 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 09:55:41,415 p=626626 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 09:55:41,938 p=626626 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 09:55:42,239 p=626626 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 09:55:42,305 p=626626 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 09:55:42,779 p=626626 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 09:55:43,020 p=626626 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 09:55:43,178 p=626626 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 09:55:43,630 p=626626 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 09:55:43,671 p=626626 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************
2025-09-29 09:55:43,952 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:55:44,024 p=626626 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host3, host2, bda
2025-09-29 09:55:44,232 p=626626 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-29 09:55:45,429 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:45,506 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:45,622 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:45,822 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:45,850 p=626626 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************
2025-09-29 09:55:46,926 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 09:55:46,940 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 09:55:46,963 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 09:55:47,033 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 09:55:47,780 p=626626 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:55:47,825 p=626626 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:55:47,841 p=626626 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:55:47,920 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 09:55:47,933 p=626626 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************
2025-09-29 09:55:48,824 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:48,945 p=626626 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:48,968 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:48,970 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:49,805 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:49,867 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:49,992 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:50,787 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:55:50,808 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:55:50,819 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:50,851 p=626626 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-29 09:55:51,843 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:55:51,907 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:55:51,948 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:55:52,017 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:55:52,048 p=626626 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-29 09:55:52,233 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:52,275 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:52,310 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:52,360 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:52,380 p=626626 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-29 09:55:52,542 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:52,603 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:52,652 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:52,715 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:52,734 p=626626 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************
2025-09-29 09:55:52,953 p=626626 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:55:52,978 p=626626 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:55:53,007 p=626626 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:55:53,009 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:55:53,046 p=626626 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:55:53,048 p=626626 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 09:55:53,053 p=626626 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:55:53,054 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:55:53,095 p=626626 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:55:53,097 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:55:53,100 p=626626 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 09:55:53,102 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:55:53,121 p=626626 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************
2025-09-29 09:55:54,529 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:54,550 p=626626 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:54,731 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:55,126 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:55,709 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:56,426 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:56,827 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:57,317 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:58,060 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:55:58,908 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:55:58,938 p=626626 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************
2025-09-29 09:55:59,879 p=626626 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:55:59,887 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:59,919 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:55:59,994 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:00,739 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:00,798 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:00,888 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:01,630 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:01,663 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:01,677 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:01,713 p=626626 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************
2025-09-29 09:56:02,779 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:02,795 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:02,842 p=626626 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:02,979 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:03,739 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:03,813 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:04,045 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:04,767 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:04,851 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:05,111 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:05,130 p=626626 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************
2025-09-29 09:56:06,103 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:06,165 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:06,334 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:06,346 p=626626 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:06,889 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:07,027 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:07,384 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:07,883 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:07,887 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:08,413 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:08,440 p=626626 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************
2025-09-29 09:56:09,432 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:09,607 p=626626 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:09,617 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:09,698 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:10,305 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:10,618 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:10,637 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:11,148 p=626626 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:11,544 p=626626 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:11,652 p=626626 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:11,669 p=626626 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************
2025-09-29 09:56:12,707 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:12,749 p=626626 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:12,803 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:12,919 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:13,604 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:13,867 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:13,998 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 09:56:14,473 p=626626 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:14,728 p=626626 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 09:56:14,931 p=626626 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 09:56:14,951 p=626626 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************
2025-09-29 09:56:15,123 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:56:15,167 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:56:15,197 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:56:15,254 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 09:56:15,270 p=626626 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************
2025-09-29 09:56:15,482 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:16,863 p=626626 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 09:56:17,113 p=626626 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 09:56:17,256 p=626626 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 09:56:17,630 p=626626 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 09:56:18,374 p=626626 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 09:56:18,860 p=626626 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 09:56:19,986 p=626626 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 09:56:20,103 p=626626 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 09:56:20,584 p=626626 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 09:56:21,768 p=626626 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 09:56:21,803 p=626626 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-29 09:56:22,079 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:23,489 p=626626 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 09:56:23,556 p=626626 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 09:56:23,654 p=626626 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 09:56:24,272 p=626626 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 09:56:25,052 p=626626 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 09:56:25,345 p=626626 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 09:56:26,557 p=626626 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 09:56:26,777 p=626626 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 09:56:26,917 p=626626 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 09:56:27,932 p=626626 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 09:56:27,964 p=626626 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 09:56:28,284 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:29,462 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:56:29,550 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:56:29,740 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:56:29,766 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:56:29,787 p=626626 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 09:56:30,022 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:30,765 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:30,765 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:56:30,860 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:56:30,875 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:56:30,899 p=626626 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 09:56:31,057 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:31,121 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:31,179 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:31,229 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:31,234 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:56:31,253 p=626626 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 09:56:31,681 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:31,755 p=626626 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3, bda
2025-09-29 09:56:31,877 p=626626 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************
2025-09-29 09:56:32,049 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNodes: 3\n"
}
2025-09-29 09:56:32,054 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNodes: 3\n"
}
2025-09-29 09:56:32,079 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNodes: 3\n"
}
2025-09-29 09:56:32,166 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: bda\nNodes: 1\n"
}
2025-09-29 09:56:32,181 p=626626 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************
2025-09-29 09:56:34,578 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:56:34,625 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:56:34,626 p=626626 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible_collections.community.docker.plugins.module_utils._api.errors.APIError: 409 Client Error for http+docker://localhost/v1.44/networks/create: Conflict ("network with name elastic already exists")
2025-09-29 09:56:34,627 p=626626 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "An unexpected Docker error occurred: 409 Client Error for http+docker://localhost/v1.44/networks/create: Conflict (\"network with name elastic already exists\")"}
2025-09-29 09:56:34,627 p=626626 u=root n=ansible | ...ignoring
2025-09-29 09:56:34,656 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:56:34,680 p=626626 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************
2025-09-29 09:56:35,759 p=626626 u=root n=ansible | ok: [host2]
2025-09-29 09:56:35,773 p=626626 u=root n=ansible | ok: [host1]
2025-09-29 09:56:35,820 p=626626 u=root n=ansible | ok: [host3]
2025-09-29 09:56:35,934 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:35,963 p=626626 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************
2025-09-29 09:56:36,102 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:36,180 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:36,211 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:36,291 p=626626 u=root n=ansible | skipping: [bda]
2025-09-29 09:56:36,324 p=626626 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************
2025-09-29 09:56:38,646 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:56:38,750 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:56:38,885 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:56:38,937 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:56:38,966 p=626626 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 09:56:41,269 p=626626 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.097389", "end": "2025-09-29 09:56:41.108541", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:56:40.011152", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:56:41,278 p=626626 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.246259", "end": "2025-09-29 09:56:41.175310", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:56:39.929051", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:56:41,388 p=626626 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.453389", "end": "2025-09-29 09:56:41.264008", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:56:39.810619", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:56:41,419 p=626626 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": true, "cmd": "cd /usr/share/siem/elasticsearch\ndocker-compose up -d\n", "delta": "0:00:01.360540", "end": "2025-09-29 09:56:41.307702", "msg": "non-zero return code", "rc": 1, "start": "2025-09-29 09:56:39.947162", "stderr": "Creating network \"elasticsearch_elastic\" with driver \"bridge\"\nPool overlaps with other one on this address space", "stderr_lines": ["Creating network \"elasticsearch_elastic\" with driver \"bridge\"", "Pool overlaps with other one on this address space"], "stdout": "", "stdout_lines": []}
2025-09-29 09:56:41,470 p=626626 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************
2025-09-29 09:56:41,541 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:41,652 p=626626 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-29 09:56:41,742 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:41,760 p=626626 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-29 09:56:42,035 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:56:42,037 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:56:42,119 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:56:42,159 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 09:56:42,242 p=626626 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************
2025-09-29 09:56:42,352 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:42,421 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:42,479 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:42,513 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:42,515 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:42,542 p=626626 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************
2025-09-29 09:56:42,643 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:42,695 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:42,736 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:42,776 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:44,140 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:44,174 p=626626 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************
2025-09-29 09:56:44,275 p=626626 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:56:44,278 p=626626 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:56:44,279 p=626626 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:56:44,310 p=626626 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:56:44,316 p=626626 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:56:44,333 p=626626 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 09:56:44,369 p=626626 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:56:44,371 p=626626 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:56:44,372 p=626626 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 09:56:44,373 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:44,380 p=626626 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:56:44,382 p=626626 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:56:44,387 p=626626 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:56:44,389 p=626626 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:56:44,404 p=626626 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:56:44,405 p=626626 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:56:44,428 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:44,430 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:44,493 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 09:56:44,497 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 09:56:44,513 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 09:56:44,523 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 09:56:44,529 p=626626 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 09:56:44,530 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:45,222 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 09:56:45,931 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 09:56:46,844 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 09:56:47,648 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 09:56:48,468 p=626626 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 09:56:48,490 p=626626 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************
2025-09-29 09:56:48,590 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:48,643 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:48,708 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:48,734 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:49,482 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:49,503 p=626626 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************
2025-09-29 09:56:49,621 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:49,654 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:49,715 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:49,746 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:51,155 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:51,181 p=626626 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************
2025-09-29 09:56:51,246 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:51,284 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:51,391 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:51,436 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:53,055 p=626626 u=root n=ansible | ok: [bda]
2025-09-29 09:56:53,079 p=626626 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************
2025-09-29 09:56:53,152 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:53,273 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:53,325 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:53,371 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:57,998 p=626626 u=root n=ansible | changed: [bda]
2025-09-29 09:56:58,025 p=626626 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************
2025-09-29 09:56:58,139 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:56:58,212 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:56:58,248 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:56:58,267 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 09:56:58,277 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:58,600 p=626626 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************
2025-09-29 09:56:59,388 p=626626 u=root n=ansible | changed: [host1]
2025-09-29 09:56:59,435 p=626626 u=root n=ansible | changed: [host3]
2025-09-29 09:56:59,516 p=626626 u=root n=ansible | changed: [host2]
2025-09-29 09:56:59,531 p=626626 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-29 09:56:59,681 p=626626 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n║ End Time: 2025-09-29T06:24:56Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:56:59,726 p=626626 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n║ End Time: 2025-09-29T06:24:56Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:56:59,764 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:56:59,772 p=626626 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n║ End Time: 2025-09-29T06:24:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:56:59,815 p=626626 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T06:24:53Z                      ║\n║ End Time: 2025-09-29T06:24:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 09:56:59,841 p=626626 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************
2025-09-29 09:56:59,992 p=626626 u=root n=ansible | skipping: [host1]
2025-09-29 09:57:00,052 p=626626 u=root n=ansible | skipping: [host2]
2025-09-29 09:57:00,097 p=626626 u=root n=ansible | skipping: [host3]
2025-09-29 09:57:00,118 p=626626 u=root n=ansible | skipping: [lb1]
2025-09-29 09:57:00,266 p=626626 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 09:57:00,267 p=626626 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 09:57:00,416 p=626626 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-29 09:57:00,416 p=626626 u=root n=ansible | bda                        : ok=66   changed=13   unreachable=0    failed=1    skipped=17   rescued=1    ignored=1   
2025-09-29 09:57:00,417 p=626626 u=root n=ansible | host1                      : ok=59   changed=13   unreachable=0    failed=0    skipped=26   rescued=1    ignored=2   
2025-09-29 09:57:00,417 p=626626 u=root n=ansible | host2                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=1   
2025-09-29 09:57:00,417 p=626626 u=root n=ansible | host3                      : ok=59   changed=14   unreachable=0    failed=0    skipped=26   rescued=1    ignored=1   
2025-09-29 09:57:00,418 p=626626 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 10:39:44,899 p=786720 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 10:39:44,956 p=786720 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 10:39:48,534 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:48,636 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:48,657 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:48,789 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:48,827 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:48,857 p=786720 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 10:39:48,933 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:48,976 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:49,074 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:49,078 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:49,118 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:49,153 p=786720 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 10:39:49,294 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:39:49,344 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T07:09:48Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:39:49,395 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:39:49,398 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:39:49,437 p=786720 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T07:09:48Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:39:49,635 p=786720 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 10:39:51,859 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:51,873 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:52,066 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:52,089 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:52,256 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:52,276 p=786720 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 10:39:52,361 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:52,421 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:52,423 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:52,442 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:52,475 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:52,505 p=786720 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 10:39:52,542 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:39:52,560 p=786720 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 10:39:52,592 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:39:52,607 p=786720 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 10:39:52,630 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:39:52,642 p=786720 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 10:39:53,747 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:39:53,824 p=786720 u=root n=ansible | changed: [host1]
2025-09-29 10:39:53,826 p=786720 u=root n=ansible | changed: [lb1]
2025-09-29 10:39:53,841 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:39:53,979 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:39:54,003 p=786720 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 10:39:54,033 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:39:54,054 p=786720 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 10:39:56,037 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:39:56,138 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:56,150 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:39:56,185 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:39:56,429 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:56,456 p=786720 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 10:39:57,564 p=786720 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 10:39:57,604 p=786720 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 10:39:57,635 p=786720 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 10:39:57,687 p=786720 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 10:39:57,743 p=786720 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 10:39:58,226 p=786720 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 10:39:58,267 p=786720 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 10:39:58,294 p=786720 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 10:39:58,345 p=786720 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 10:39:58,482 p=786720 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 10:39:58,570 p=786720 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 10:39:58,658 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:58,706 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:58,755 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:58,759 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:58,807 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:58,824 p=786720 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 10:39:59,591 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:39:59,617 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:39:59,662 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:39:59,704 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:39:59,720 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:39:59,741 p=786720 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 10:40:00,594 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:00,660 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:00,679 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:00,689 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:40:00,769 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:00,797 p=786720 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 10:40:00,882 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:00,940 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:00,992 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:01,033 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:01,068 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:40:01,084 p=786720 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 10:40:01,139 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:01,257 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:01,314 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:01,319 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:02,104 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:40:02,123 p=786720 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 10:40:02,208 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:02,243 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:02,278 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:02,285 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:02,323 p=786720 u=root n=ansible | ok: [lb1]
2025-09-29 10:40:02,439 p=786720 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 10:40:02,546 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:02,592 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:02,623 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:02,638 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:02,669 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:02,735 p=786720 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 10:40:02,894 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:02,934 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:02,937 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:02,959 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:02,971 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:02,985 p=786720 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 10:40:03,038 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:03,049 p=786720 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 10:40:03,090 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:03,104 p=786720 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 10:40:03,142 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:03,152 p=786720 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 10:40:03,192 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:03,202 p=786720 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 10:40:03,218 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:03,229 p=786720 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 10:40:03,367 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 10:40:03,382 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 10:40:03,391 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 10:40:03,413 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 10:40:03,422 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:03,462 p=786720 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 10:40:03,661 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:03,687 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:03,706 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:03,712 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:03,753 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:03,771 p=786720 u=root n=ansible | TASK [install_elastic : Build simple discovery list] ****************************************************************************************************************************************************************************************
2025-09-29 10:40:03,963 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:03,968 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:04,078 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:04,128 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:04,184 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:04,198 p=786720 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 10:40:04,374 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 10:40:04,384 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 10:40:04,392 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 10:40:04,416 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:04,450 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\nMaster nodes: 192.168.166.130:9300,192.168.166.131:9300,192.168.166.132:9300,192.168.166.130:9300\n"
}
2025-09-29 10:40:04,489 p=786720 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 10:40:04,780 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:04,860 p=786720 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 10:40:04,926 p=786720 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 10:40:05,858 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:05,861 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:05,931 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:05,960 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:06,751 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 10:40:06,763 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 10:40:06,781 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 10:40:06,854 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 10:40:06,890 p=786720 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 10:40:07,074 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:07,119 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:07,120 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:07,285 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:07,305 p=786720 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 10:40:07,410 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:07,486 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:07,511 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:07,537 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:07,563 p=786720 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 10:40:07,685 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:07,747 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:07,749 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:07,819 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:07,837 p=786720 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 10:40:08,020 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:08,045 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:08,067 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:08,108 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:08,135 p=786720 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 10:40:09,677 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:09,683 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:09,748 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:09,863 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:09,898 p=786720 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 10:40:11,239 p=786720 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 10:40:11,240 p=786720 u=root n=ansible | ...ignoring
2025-09-29 10:40:11,246 p=786720 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 10:40:11,247 p=786720 u=root n=ansible | ...ignoring
2025-09-29 10:40:11,281 p=786720 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 10:40:11,282 p=786720 u=root n=ansible | ...ignoring
2025-09-29 10:40:11,283 p=786720 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 10:40:11,283 p=786720 u=root n=ansible | ...ignoring
2025-09-29 10:40:11,295 p=786720 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 10:40:11,444 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:11,516 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:11,554 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:11,622 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:11,649 p=786720 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 10:40:11,839 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:11,916 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:11,993 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:12,048 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:12,062 p=786720 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 10:40:12,210 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:12,218 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:12,221 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:12,313 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:12,332 p=786720 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 10:40:12,456 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:12,570 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:12,590 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:12,639 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:12,675 p=786720 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 10:40:14,869 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:14,945 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:14,961 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:15,013 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:15,044 p=786720 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 10:40:16,440 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:16,520 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:16,547 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:16,627 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:16,650 p=786720 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 10:40:17,700 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:17,739 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:17,753 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:17,835 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:17,871 p=786720 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 10:40:18,003 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 10:40:18,080 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 10:40:18,081 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 10:40:18,153 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 10:40:18,171 p=786720 u=root n=ansible | TASK [install_elastic : Create Docker network for Elasticsearch] ****************************************************************************************************************************************************************************
2025-09-29 10:40:19,203 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:40:19,223 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:40:19,518 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:40:19,526 p=786720 u=root n=ansible | changed: [host1]
2025-09-29 10:40:19,555 p=786720 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 10:40:20,501 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:20,611 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:20,630 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:20,765 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:20,794 p=786720 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 10:40:20,965 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:21,028 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:21,075 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:21,098 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:21,116 p=786720 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 10:40:21,263 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:21,267 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:21,276 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:21,345 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:21,368 p=786720 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 10:40:22,225 p=786720 u=root n=ansible | changed: [host1]
2025-09-29 10:40:22,451 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:40:22,468 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:40:22,541 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:40:22,558 p=786720 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 10:40:23,369 p=786720 u=root n=ansible | changed: [host1]
2025-09-29 10:40:23,488 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:40:23,538 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:40:23,664 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:23,693 p=786720 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 10:40:24,814 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:24,847 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:24,877 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:24,902 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:24,919 p=786720 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 10:40:25,805 p=786720 u=root n=ansible | changed: [host1]
2025-09-29 10:40:25,813 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:40:25,841 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:40:25,873 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:40:25,892 p=786720 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 10:40:26,069 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 10:40:26,102 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 10:40:26,123 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 10:40:26,155 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic network created\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n"
}
2025-09-29 10:40:26,169 p=786720 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 10:40:26,393 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 10:40:26,402 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/certs) 
2025-09-29 10:40:26,405 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:26,971 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:27,127 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:27,159 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:27,219 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 10:40:27,670 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 10:40:27,930 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 10:40:27,964 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 10:40:28,030 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 10:40:28,058 p=786720 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 10:40:28,305 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:28,991 p=786720 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 10:40:29,155 p=786720 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 10:40:29,178 p=786720 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 10:40:29,219 p=786720 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 10:40:29,836 p=786720 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 10:40:29,987 p=786720 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 10:40:30,156 p=786720 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 10:40:30,166 p=786720 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 10:40:30,728 p=786720 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 10:40:30,776 p=786720 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 10:40:30,882 p=786720 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 10:40:30,997 p=786720 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 10:40:31,574 p=786720 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 10:40:31,742 p=786720 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 10:40:32,013 p=786720 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 10:40:32,379 p=786720 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 10:40:32,609 p=786720 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 10:40:32,846 p=786720 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 10:40:33,176 p=786720 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 10:40:33,570 p=786720 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 10:40:33,869 p=786720 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 10:40:34,077 p=786720 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 10:40:34,666 p=786720 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 10:40:34,738 p=786720 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 10:40:34,937 p=786720 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 10:40:35,651 p=786720 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 10:40:35,700 p=786720 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 10:40:35,800 p=786720 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 10:40:36,512 p=786720 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 10:40:36,538 p=786720 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 10:40:36,568 p=786720 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 10:40:37,032 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:40:37,136 p=786720 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 10:40:37,268 p=786720 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 10:40:38,605 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:38,705 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:38,775 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:38,802 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:38,819 p=786720 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 10:40:39,764 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs)
2025-09-29 10:40:39,875 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs)
2025-09-29 10:40:39,880 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs)
2025-09-29 10:40:40,081 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs)
2025-09-29 10:40:40,772 p=786720 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/certs/ca)
2025-09-29 10:40:40,874 p=786720 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/certs/ca)
2025-09-29 10:40:41,012 p=786720 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/certs/ca)
2025-09-29 10:40:41,144 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/certs/ca)
2025-09-29 10:40:41,179 p=786720 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 10:40:42,186 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:42,249 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:42,251 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:42,480 p=786720 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:42,955 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:43,081 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:43,112 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:43,839 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:43,874 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:43,939 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:43,973 p=786720 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 10:40:44,871 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:40:44,907 p=786720 u=root n=ansible | ok: [host1]
2025-09-29 10:40:44,980 p=786720 u=root n=ansible | ok: [host2]
2025-09-29 10:40:45,042 p=786720 u=root n=ansible | ok: [host3]
2025-09-29 10:40:45,071 p=786720 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 10:40:45,209 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:45,245 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:45,258 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:45,337 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:45,349 p=786720 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 10:40:45,522 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:45,549 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:45,549 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:45,616 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:45,631 p=786720 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 10:40:45,771 p=786720 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 10:40:45,801 p=786720 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 10:40:46,008 p=786720 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 10:40:46,010 p=786720 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 10:40:46,012 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:40:46,012 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:40:46,023 p=786720 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 10:40:46,024 p=786720 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 10:40:46,113 p=786720 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 10:40:46,115 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:40:46,130 p=786720 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 10:40:46,132 p=786720 u=root n=ansible | skipping: [bda]
2025-09-29 10:40:46,148 p=786720 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 10:40:47,442 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:47,795 p=786720 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:47,884 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:47,971 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:48,681 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:49,222 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:49,619 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:50,326 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:50,360 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:51,297 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:51,312 p=786720 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node] *************************************************************************************************************************************************************************
2025-09-29 10:40:52,301 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:52,304 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:52,323 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:52,517 p=786720 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:53,149 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:53,155 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:53,229 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:53,953 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:54,034 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:54,175 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:54,212 p=786720 u=root n=ansible | TASK [install_elastic : Sign certificate for each node] *************************************************************************************************************************************************************************************
2025-09-29 10:40:55,345 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:55,361 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:55,425 p=786720 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:55,524 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:56,439 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:56,466 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:56,512 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:57,428 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:57,520 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:57,574 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:40:57,594 p=786720 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 10:40:58,582 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:58,697 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:58,701 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:40:58,812 p=786720 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:59,474 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:59,538 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:40:59,582 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:00,465 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:00,525 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:00,538 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:00,577 p=786720 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 10:41:01,574 p=786720 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:01,739 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:01,803 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:01,845 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:02,607 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:02,652 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:02,724 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:03,378 p=786720 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:03,604 p=786720 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:03,609 p=786720 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:03,635 p=786720 u=root n=ansible | TASK [install_elastic : Remove CSR files] ***************************************************************************************************************************************************************************************************
2025-09-29 10:41:04,763 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:04,880 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:04,910 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:05,040 p=786720 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:05,658 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:05,774 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:05,791 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 10:41:06,612 p=786720 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:06,631 p=786720 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 10:41:06,695 p=786720 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 10:41:06,710 p=786720 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************************************************************************************************************************************
2025-09-29 10:41:06,898 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 10:41:06,976 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 10:41:06,999 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 10:41:07,050 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "✅ SSL certificates created for 1 nodes\nCA: /usr/share/siem/certs/ca/ca.crt\n"
}
2025-09-29 10:41:07,066 p=786720 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 10:41:07,306 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:09,079 p=786720 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 10:41:09,121 p=786720 u=root n=ansible | changed: [bda] => (item=bda-master)
2025-09-29 10:41:09,148 p=786720 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 10:41:09,630 p=786720 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 10:41:11,010 p=786720 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 10:41:11,035 p=786720 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 10:41:12,027 p=786720 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 10:41:12,699 p=786720 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 10:41:12,735 p=786720 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 10:41:13,633 p=786720 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 10:41:13,661 p=786720 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 10:41:13,903 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:15,117 p=786720 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 10:41:15,147 p=786720 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 10:41:15,475 p=786720 u=root n=ansible | ok: [bda] => (item=bda-master)
2025-09-29 10:41:15,752 p=786720 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 10:41:16,755 p=786720 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 10:41:16,830 p=786720 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 10:41:17,916 p=786720 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 10:41:18,208 p=786720 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 10:41:18,343 p=786720 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 10:41:19,344 p=786720 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 10:41:19,366 p=786720 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 10:41:19,623 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:19,756 p=786720 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible.errors.AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined
2025-09-29 10:41:19,757 p=786720 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined"}
2025-09-29 10:41:19,788 p=786720 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible.errors.AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined
2025-09-29 10:41:19,789 p=786720 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined"}
2025-09-29 10:41:19,803 p=786720 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible.errors.AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined
2025-09-29 10:41:19,804 p=786720 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined"}
2025-09-29 10:41:19,813 p=786720 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: ansible.errors.AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined
2025-09-29 10:41:19,813 p=786720 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "AnsibleUndefinedVariable: 'docker_network_subnet' is undefined. 'docker_network_subnet' is undefined"}
2025-09-29 10:41:19,870 p=786720 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 10:41:19,952 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:20,018 p=786720 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 10:41:20,090 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:20,187 p=786720 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 10:41:20,266 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:20,309 p=786720 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 10:41:20,381 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:20,482 p=786720 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 10:41:20,565 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:20,585 p=786720 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 10:41:20,758 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 10:41:20,782 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 10:41:20,823 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 10:41:20,823 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory\n3. Network connectivity between hosts\n4. Directory permissions\n5. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 10:41:20,909 p=786720 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 10:41:21,096 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:21,199 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:21,201 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:21,228 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:21,264 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:41:21,291 p=786720 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 10:41:21,421 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:21,490 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:21,546 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:21,611 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:23,304 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:41:23,328 p=786720 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 10:41:23,436 p=786720 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 10:41:23,439 p=786720 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 10:41:23,456 p=786720 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 10:41:23,480 p=786720 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 10:41:23,487 p=786720 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 10:41:23,489 p=786720 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 10:41:23,493 p=786720 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 10:41:23,499 p=786720 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 10:41:23,515 p=786720 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 10:41:23,517 p=786720 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 10:41:23,548 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:23,562 p=786720 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 10:41:23,568 p=786720 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 10:41:23,585 p=786720 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 10:41:23,612 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:23,618 p=786720 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 10:41:23,621 p=786720 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 10:41:23,623 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:23,668 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 10:41:23,674 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 10:41:23,674 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 10:41:23,684 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 10:41:23,685 p=786720 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 10:41:23,686 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:24,279 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 10:41:24,976 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 10:41:25,873 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 10:41:26,768 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 10:41:27,802 p=786720 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 10:41:27,841 p=786720 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 10:41:27,998 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:28,055 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:28,114 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:28,172 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:29,068 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:41:29,096 p=786720 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 10:41:29,181 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:29,239 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:29,292 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:29,371 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:30,900 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:41:30,916 p=786720 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 10:41:31,001 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:31,038 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:31,068 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:31,096 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:32,660 p=786720 u=root n=ansible | ok: [bda]
2025-09-29 10:41:32,691 p=786720 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 10:41:32,797 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:32,862 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:32,924 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:32,950 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:38,688 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:41:38,705 p=786720 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 10:41:38,802 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:38,844 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:38,881 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:38,905 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 10:41:38,940 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:39,224 p=786720 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 10:41:40,003 p=786720 u=root n=ansible | changed: [bda]
2025-09-29 10:41:40,096 p=786720 u=root n=ansible | changed: [host2]
2025-09-29 10:41:40,255 p=786720 u=root n=ansible | changed: [host3]
2025-09-29 10:41:40,274 p=786720 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 10:41:40,425 p=786720 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n║ End Time: 2025-09-29T07:09:50Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:41:40,460 p=786720 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T07:09:48Z                      ║\n║ End Time: 2025-09-29T07:09:51Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:41:40,493 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:40,516 p=786720 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n║ End Time: 2025-09-29T07:09:51Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:41:40,539 p=786720 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T07:09:47Z                      ║\n║ End Time: 2025-09-29T07:09:51Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 10:41:40,571 p=786720 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 10:41:40,648 p=786720 u=root n=ansible | skipping: [host1]
2025-09-29 10:41:40,760 p=786720 u=root n=ansible | skipping: [host2]
2025-09-29 10:41:40,807 p=786720 u=root n=ansible | skipping: [host3]
2025-09-29 10:41:40,835 p=786720 u=root n=ansible | skipping: [lb1]
2025-09-29 10:41:41,013 p=786720 u=root n=ansible | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: . unexpected '.'
2025-09-29 10:41:41,014 p=786720 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "AnsibleError: template error while templating string: unexpected '.'. String: #!/bin/bash\n# Cluster verification script for {{ inventory_hostname }}\n# Generated: {{ ansible_date_time.iso8601 }}\n\necho \"🏥 ELK Cluster Health Check\"\necho \"==========================\"\n\n# Check Docker containers\necho \"🐳 Docker Containers:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Check Elasticsearch health\necho \"\"\necho \"📊 Elasticsearch Health:\"\n{% for node in elasticsearch_nodes %}\ncurl -s -k http://{{ ansible_default_ipv4.address }}:{{ (es_http_base_port | int) + (node.port_offset | int) }}/_cluster/health?pretty | head -10 || echo \"Node {{ node.name }} not responding\"\n{% endfor %}\n\necho \"\"\necho \"✅ Health check completed!\"\n. unexpected '.'"}
2025-09-29 10:41:41,172 p=786720 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 10:41:41,172 p=786720 u=root n=ansible | bda                        : ok=60   changed=12   unreachable=0    failed=1    skipped=15   rescued=1    ignored=1   
2025-09-29 10:41:41,173 p=786720 u=root n=ansible | host1                      : ok=51   changed=10   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 10:41:41,173 p=786720 u=root n=ansible | host2                      : ok=52   changed=12   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 10:41:41,173 p=786720 u=root n=ansible | host3                      : ok=52   changed=12   unreachable=0    failed=0    skipped=24   rescued=1    ignored=1   
2025-09-29 10:41:41,173 p=786720 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   
2025-09-29 11:33:26,332 p=994181 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************
2025-09-29 11:33:26,379 p=994181 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-29 11:33:30,011 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:30,017 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:30,138 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:30,210 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:30,482 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:30,501 p=994181 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************
2025-09-29 11:33:30,582 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:30,617 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:30,660 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:30,661 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:30,692 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:30,711 p=994181 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************
2025-09-29 11:33:30,798 p=994181 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:03:29Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:30,847 p=994181 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:03:30Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:30,886 p=994181 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:03:29Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:30,917 p=994181 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:03:29Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:30,918 p=994181 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:03:28Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:31,094 p=994181 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-29 11:33:33,095 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:33,115 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:33,183 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:33,191 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:33,290 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:33,313 p=994181 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-29 11:33:33,403 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:33,458 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:33,542 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:33,549 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:33,583 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:33,600 p=994181 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-29 11:33:33,622 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:33,633 p=994181 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-29 11:33:33,652 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:33,662 p=994181 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-29 11:33:33,685 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:33,697 p=994181 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-29 11:33:34,855 p=994181 u=root n=ansible | changed: [host2]
2025-09-29 11:33:34,859 p=994181 u=root n=ansible | changed: [host1]
2025-09-29 11:33:34,900 p=994181 u=root n=ansible | changed: [lb1]
2025-09-29 11:33:34,953 p=994181 u=root n=ansible | changed: [host3]
2025-09-29 11:33:35,000 p=994181 u=root n=ansible | changed: [bda]
2025-09-29 11:33:35,042 p=994181 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-29 11:33:35,084 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:35,117 p=994181 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-29 11:33:37,194 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:37,495 p=994181 u=root n=ansible | changed: [bda]
2025-09-29 11:33:37,510 p=994181 u=root n=ansible | changed: [host3]
2025-09-29 11:33:37,560 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:37,678 p=994181 u=root n=ansible | changed: [host2]
2025-09-29 11:33:37,715 p=994181 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-29 11:33:39,028 p=994181 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 11:33:39,044 p=994181 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 11:33:39,063 p=994181 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 11:33:39,071 p=994181 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 11:33:39,076 p=994181 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 11:33:39,787 p=994181 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 11:33:39,790 p=994181 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 11:33:39,875 p=994181 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 11:33:39,888 p=994181 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 11:33:39,893 p=994181 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 11:33:40,023 p=994181 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-29 11:33:40,103 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:40,157 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:40,220 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:40,275 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:40,310 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:40,331 p=994181 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-29 11:33:41,082 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:41,168 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:41,171 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:41,238 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:41,260 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:41,276 p=994181 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-29 11:33:42,079 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:42,105 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:42,109 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:42,174 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:42,248 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:42,284 p=994181 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-29 11:33:42,366 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:42,459 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:42,497 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:42,504 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:42,550 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:42,579 p=994181 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-29 11:33:42,678 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:42,734 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:42,799 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:42,802 p=994181 u=root n=ansible | skipping: [bda]
2025-09-29 11:33:43,628 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:43,647 p=994181 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-29 11:33:43,723 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:43,783 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:43,858 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:43,872 p=994181 u=root n=ansible | skipping: [bda]
2025-09-29 11:33:43,926 p=994181 u=root n=ansible | ok: [lb1]
2025-09-29 11:33:43,974 p=994181 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-29 11:33:44,142 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:44,182 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:44,239 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:44,289 p=994181 u=root n=ansible | skipping: [bda]
2025-09-29 11:33:44,328 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:44,501 p=994181 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************
2025-09-29 11:33:44,699 p=994181 u=root n=ansible | ok: [host1]
2025-09-29 11:33:44,701 p=994181 u=root n=ansible | ok: [host2]
2025-09-29 11:33:44,725 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:44,764 p=994181 u=root n=ansible | ok: [bda]
2025-09-29 11:33:44,791 p=994181 u=root n=ansible | ok: [host3]
2025-09-29 11:33:44,803 p=994181 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 11:33:44,854 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:44,867 p=994181 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 11:33:44,927 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:44,941 p=994181 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 11:33:44,975 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:44,985 p=994181 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 11:33:45,024 p=994181 u=root n=ansible | skipping: [bda]
2025-09-29 11:33:45,033 p=994181 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 11:33:45,045 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,055 p=994181 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************
2025-09-29 11:33:45,157 p=994181 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 11:33:45,239 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,247 p=994181 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 11:33:45,256 p=994181 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 11:33:45,279 p=994181 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 11:33:45,291 p=994181 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************
2025-09-29 11:33:45,426 p=994181 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:33:45,437 p=994181 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:33:45,440 p=994181 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:33:45,448 p=994181 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:33:45,466 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,513 p=994181 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************
2025-09-29 11:33:45,548 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,633 p=994181 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************
2025-09-29 11:33:45,686 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,795 p=994181 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************
2025-09-29 11:33:45,847 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:45,900 p=994181 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************
2025-09-29 11:33:45,939 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,013 p=994181 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************
2025-09-29 11:33:46,088 p=994181 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 11:33:46,101 p=994181 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 11:33:46,116 p=994181 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 11:33:46,126 p=994181 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 11:33:46,128 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,226 p=994181 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************
2025-09-29 11:33:46,298 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,400 p=994181 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************
2025-09-29 11:33:46,443 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,533 p=994181 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-29 11:33:46,581 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,627 p=994181 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************
2025-09-29 11:33:46,690 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,754 p=994181 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************
2025-09-29 11:33:46,793 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:46,879 p=994181 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-29 11:33:46,949 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,050 p=994181 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 11:33:47,131 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,218 p=994181 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 11:33:47,277 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,353 p=994181 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 11:33:47,405 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,466 p=994181 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 11:33:47,515 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,636 p=994181 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************
2025-09-29 11:33:47,710 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,763 p=994181 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-29 11:33:47,834 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:47,870 p=994181 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-29 11:33:48,050 p=994181 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:33:48,082 p=994181 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:33:48,103 p=994181 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:33:48,161 p=994181 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:33:48,272 p=994181 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************
2025-09-29 11:33:48,381 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:48,417 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:48,450 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:48,459 p=994181 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'kibana_base_path' is undefined. 'kibana_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_kibana/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Initialize Kibana variables\n      ^ here\n"}
2025-09-29 11:33:48,481 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:48,498 p=994181 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************
2025-09-29 11:33:48,572 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:48,621 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:48,629 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:48,644 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:48,680 p=994181 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************
2025-09-29 11:33:48,774 p=994181 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:33:48,779 p=994181 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:33:48,788 p=994181 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 11:33:48,807 p=994181 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:33:48,821 p=994181 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:33:48,824 p=994181 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:33:48,827 p=994181 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 11:33:48,829 p=994181 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:33:48,831 p=994181 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:33:48,833 p=994181 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:33:48,834 p=994181 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:33:48,836 p=994181 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:33:48,837 p=994181 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:33:48,838 p=994181 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:33:48,839 p=994181 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:33:48,841 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:48,842 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:48,842 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:48,880 p=994181 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:33:48,917 p=994181 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:33:48,918 p=994181 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:33:48,919 p=994181 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:33:48,921 p=994181 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:33:48,923 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:48,949 p=994181 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************
2025-09-29 11:33:49,026 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:49,151 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:49,154 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:49,187 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:49,219 p=994181 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************
2025-09-29 11:33:49,287 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:49,393 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:49,396 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:49,434 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:49,459 p=994181 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************
2025-09-29 11:33:49,546 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:49,602 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:49,653 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:49,668 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:49,696 p=994181 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************
2025-09-29 11:33:49,832 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:49,904 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:49,908 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:49,942 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:49,969 p=994181 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************
2025-09-29 11:33:50,039 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:50,151 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:50,154 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:50,199 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:50,449 p=994181 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************
2025-09-29 11:33:51,250 p=994181 u=root n=ansible | changed: [host2]
2025-09-29 11:33:51,259 p=994181 u=root n=ansible | changed: [host3]
2025-09-29 11:33:51,276 p=994181 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************
2025-09-29 11:33:51,421 p=994181 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:03:29Z                      ║\n║ End Time: 2025-09-29T08:03:32Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:51,422 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:51,488 p=994181 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:03:30Z                      ║\n║ End Time: 2025-09-29T08:03:32Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:51,587 p=994181 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:03:29Z                      ║\n║ End Time: 2025-09-29T08:03:32Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:33:51,612 p=994181 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************
2025-09-29 11:33:51,703 p=994181 u=root n=ansible | skipping: [host1]
2025-09-29 11:33:51,747 p=994181 u=root n=ansible | skipping: [host2]
2025-09-29 11:33:51,792 p=994181 u=root n=ansible | skipping: [host3]
2025-09-29 11:33:51,807 p=994181 u=root n=ansible | skipping: [lb1]
2025-09-29 11:33:51,911 p=994181 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-29 11:33:51,911 p=994181 u=root n=ansible | bda                        : ok=15   changed=2    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-29 11:33:51,911 p=994181 u=root n=ansible | host1                      : ok=16   changed=1    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:33:51,912 p=994181 u=root n=ansible | host2                      : ok=17   changed=3    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:33:51,912 p=994181 u=root n=ansible | host3                      : ok=17   changed=3    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:33:51,912 p=994181 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=31   rescued=0    ignored=0   
2025-09-29 11:35:52,059 p=995998 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 11:35:52,110 p=995998 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 11:35:55,650 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:35:55,660 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:35:55,707 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:35:55,847 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:35:55,851 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:35:55,873 p=995998 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 11:35:55,989 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:35:56,041 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:35:56,097 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:35:56,099 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:35:56,134 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:35:56,154 p=995998 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 11:35:56,242 p=995998 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:35:56,270 p=995998 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:05:55Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:35:56,298 p=995998 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:35:56,309 p=995998 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:35:56,333 p=995998 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:35:56,536 p=995998 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 11:35:58,623 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:35:58,660 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:35:58,719 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:35:58,824 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:35:58,976 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:35:58,993 p=995998 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 11:35:59,096 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:35:59,156 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:35:59,215 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:35:59,218 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:35:59,284 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:35:59,315 p=995998 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 11:35:59,378 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:35:59,438 p=995998 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 11:35:59,476 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:35:59,498 p=995998 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 11:35:59,542 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:35:59,561 p=995998 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 11:36:00,733 p=995998 u=root n=ansible | changed: [host2]
2025-09-29 11:36:00,747 p=995998 u=root n=ansible | changed: [lb1]
2025-09-29 11:36:00,762 p=995998 u=root n=ansible | changed: [host1]
2025-09-29 11:36:00,817 p=995998 u=root n=ansible | changed: [bda]
2025-09-29 11:36:01,028 p=995998 u=root n=ansible | changed: [host3]
2025-09-29 11:36:01,038 p=995998 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 11:36:01,049 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:01,057 p=995998 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 11:36:02,880 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:02,898 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:02,939 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:03,007 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:03,089 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:03,114 p=995998 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 11:36:04,296 p=995998 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 11:36:04,345 p=995998 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 11:36:04,359 p=995998 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 11:36:04,436 p=995998 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 11:36:04,467 p=995998 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 11:36:05,020 p=995998 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 11:36:05,044 p=995998 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 11:36:05,094 p=995998 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 11:36:05,280 p=995998 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 11:36:05,297 p=995998 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 11:36:05,397 p=995998 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 11:36:05,505 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:05,554 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:05,607 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:05,610 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:05,646 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:05,673 p=995998 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 11:36:06,513 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:06,578 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:06,614 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:06,645 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:06,696 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:06,721 p=995998 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 11:36:07,538 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:07,556 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:07,668 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:07,683 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:07,751 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:07,778 p=995998 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 11:36:07,912 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:07,970 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:07,996 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:08,005 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:08,060 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:08,088 p=995998 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 11:36:08,175 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:08,231 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:08,280 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:08,284 p=995998 u=root n=ansible | skipping: [bda]
2025-09-29 11:36:09,027 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:09,046 p=995998 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 11:36:09,195 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:09,233 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:09,270 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:09,271 p=995998 u=root n=ansible | skipping: [bda]
2025-09-29 11:36:09,346 p=995998 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:09,369 p=995998 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 11:36:09,476 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:09,524 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:09,566 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:09,573 p=995998 u=root n=ansible | skipping: [bda]
2025-09-29 11:36:09,607 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:09,722 p=995998 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 11:36:09,894 p=995998 u=root n=ansible | ok: [host1]
2025-09-29 11:36:09,938 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:09,957 p=995998 u=root n=ansible | ok: [host3]
2025-09-29 11:36:09,959 p=995998 u=root n=ansible | ok: [host2]
2025-09-29 11:36:10,070 p=995998 u=root n=ansible | ok: [bda]
2025-09-29 11:36:10,091 p=995998 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:36:10,164 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:10,180 p=995998 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:36:10,253 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:10,269 p=995998 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:36:10,331 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:10,341 p=995998 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:36:10,379 p=995998 u=root n=ansible | skipping: [bda]
2025-09-29 11:36:10,387 p=995998 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:36:10,399 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:10,408 p=995998 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 11:36:10,554 p=995998 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 11:36:10,577 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:10,578 p=995998 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 11:36:10,623 p=995998 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 11:36:10,641 p=995998 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 11:36:10,664 p=995998 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 11:36:10,837 p=995998 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'certs_base_path' is undefined. 'certs_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:36:10,877 p=995998 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'certs_base_path' is undefined. 'certs_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:36:10,886 p=995998 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'certs_base_path' is undefined. 'certs_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:36:10,914 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:10,970 p=995998 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'certs_base_path' is undefined. 'certs_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:36:11,054 p=995998 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************************************************************************************************************************************
2025-09-29 11:36:11,101 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:11,172 p=995998 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************************************************************************************************************************************
2025-09-29 11:36:11,258 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:11,363 p=995998 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************************************************************************************************************************************
2025-09-29 11:36:11,445 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:11,535 p=995998 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 11:36:11,605 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:11,708 p=995998 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************************************************************************************************************************************
2025-09-29 11:36:11,805 p=995998 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 11:36:11,816 p=995998 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 11:36:11,830 p=995998 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 11:36:11,839 p=995998 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 11:36:11,841 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:11,927 p=995998 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 11:36:11,999 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,090 p=995998 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 11:36:12,162 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,228 p=995998 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:36:12,306 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,395 p=995998 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 11:36:12,437 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,524 p=995998 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 11:36:12,593 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,683 p=995998 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:36:12,755 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:12,803 p=995998 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 11:36:12,889 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,006 p=995998 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 11:36:13,046 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,194 p=995998 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 11:36:13,258 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,332 p=995998 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 11:36:13,393 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,497 p=995998 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 11:36:13,571 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,659 p=995998 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 11:36:13,704 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:13,736 p=995998 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 11:36:13,895 p=995998 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:36:13,932 p=995998 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:36:13,973 p=995998 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:36:14,015 p=995998 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:36:14,071 p=995998 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 11:36:14,128 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:14,206 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:14,243 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:14,291 p=995998 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'kibana_base_path' is undefined. 'kibana_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_kibana/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Initialize Kibana variables\n      ^ here\n"}
2025-09-29 11:36:14,299 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:14,316 p=995998 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 11:36:14,401 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:14,445 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:14,452 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:14,468 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:14,482 p=995998 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 11:36:14,577 p=995998 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:36:14,581 p=995998 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:36:14,583 p=995998 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:36:14,600 p=995998 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 11:36:14,614 p=995998 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:36:14,620 p=995998 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:36:14,622 p=995998 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:36:14,623 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:14,625 p=995998 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:36:14,626 p=995998 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 11:36:14,627 p=995998 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:36:14,629 p=995998 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:36:14,631 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:14,634 p=995998 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:36:14,647 p=995998 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:36:14,665 p=995998 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:36:14,668 p=995998 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:36:14,671 p=995998 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:36:14,671 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:14,674 p=995998 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:36:14,678 p=995998 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:36:14,683 p=995998 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:36:14,688 p=995998 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:36:14,690 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:14,727 p=995998 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 11:36:14,798 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:14,850 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:14,895 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:14,944 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:14,968 p=995998 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 11:36:15,088 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:15,143 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:15,145 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:15,170 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:15,187 p=995998 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 11:36:15,260 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:15,311 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:15,313 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:15,334 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:15,354 p=995998 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 11:36:15,442 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:15,483 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:15,491 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:15,534 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:15,553 p=995998 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 11:36:15,629 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:15,665 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:15,670 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:15,718 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:15,945 p=995998 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 11:36:16,092 p=995998 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n║ End Time: 2025-09-29T08:05:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:16,154 p=995998 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:05:54Z                      ║\n║ End Time: 2025-09-29T08:05:58Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:16,163 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:16,188 p=995998 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:05:55Z                      ║\n║ End Time: 2025-09-29T08:05:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:16,212 p=995998 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 11:36:16,317 p=995998 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:16,348 p=995998 u=root n=ansible | skipping: [host2]
2025-09-29 11:36:16,362 p=995998 u=root n=ansible | skipping: [host3]
2025-09-29 11:36:16,379 p=995998 u=root n=ansible | skipping: [lb1]
2025-09-29 11:36:16,460 p=995998 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 11:36:16,461 p=995998 u=root n=ansible | bda                        : ok=15   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-29 11:36:16,461 p=995998 u=root n=ansible | host1                      : ok=16   changed=1    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:36:16,461 p=995998 u=root n=ansible | host2                      : ok=16   changed=1    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:36:16,462 p=995998 u=root n=ansible | host3                      : ok=16   changed=1    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:36:16,462 p=995998 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=31   rescued=0    ignored=0   
2025-09-29 11:36:52,118 p=997717 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 11:36:52,181 p=997717 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 11:36:55,075 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:55,134 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:36:55,137 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:36:55,347 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:36:55,395 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:36:55,431 p=997717 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 11:36:55,517 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:36:55,579 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:36:55,628 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:36:55,632 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:36:55,661 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:55,690 p=997717 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 11:36:55,879 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:55,944 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:56,009 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:56,039 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:56,048 p=997717 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:36:56,280 p=997717 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 11:36:58,204 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:36:58,226 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:36:58,281 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:36:58,312 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:36:58,319 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:58,334 p=997717 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 11:36:58,413 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:36:58,475 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:36:58,525 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:36:58,535 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:36:58,560 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:36:58,579 p=997717 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 11:36:58,610 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:58,632 p=997717 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 11:36:58,664 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:58,686 p=997717 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 11:36:58,722 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:36:58,743 p=997717 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 11:36:59,935 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:36:59,961 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:36:59,962 p=997717 u=root n=ansible | changed: [bda]
2025-09-29 11:36:59,984 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:37:00,040 p=997717 u=root n=ansible | changed: [lb1]
2025-09-29 11:37:00,062 p=997717 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 11:37:00,121 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:00,146 p=997717 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 11:37:02,266 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:02,372 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:02,376 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:02,401 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:02,413 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:02,446 p=997717 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 11:37:03,484 p=997717 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 11:37:03,588 p=997717 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 11:37:03,595 p=997717 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 11:37:03,637 p=997717 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 11:37:03,641 p=997717 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 11:37:04,262 p=997717 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 11:37:04,313 p=997717 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 11:37:04,388 p=997717 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 11:37:04,398 p=997717 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 11:37:04,404 p=997717 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 11:37:04,495 p=997717 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 11:37:04,573 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:04,651 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:04,710 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:04,753 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:04,794 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:04,815 p=997717 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 11:37:05,581 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:05,804 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:05,804 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:05,824 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:05,857 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:05,891 p=997717 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 11:37:06,871 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:06,905 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:06,922 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:06,989 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:07,074 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:07,107 p=997717 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 11:37:07,249 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:07,298 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:07,342 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:07,357 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:07,397 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:07,426 p=997717 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 11:37:07,500 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:07,556 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:07,608 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:07,658 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:08,481 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:08,514 p=997717 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 11:37:08,591 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:08,678 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:08,732 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:08,735 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:08,785 p=997717 u=root n=ansible | ok: [lb1]
2025-09-29 11:37:08,814 p=997717 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 11:37:08,894 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:09,011 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:09,063 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:09,065 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:09,090 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:09,178 p=997717 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 11:37:09,459 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:09,460 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:09,485 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:09,579 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:09,611 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:09,634 p=997717 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:37:09,709 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:09,727 p=997717 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:37:09,814 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:09,825 p=997717 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:37:09,876 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:09,897 p=997717 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:37:09,941 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:09,950 p=997717 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:37:09,962 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:09,974 p=997717 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 11:37:10,146 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 11:37:10,169 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 11:37:10,170 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 11:37:10,176 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:10,251 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 11:37:10,267 p=997717 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 11:37:10,410 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:10,439 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:10,440 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:10,440 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:10,527 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:10,557 p=997717 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************************************************************************************************************************************
2025-09-29 11:37:10,851 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:10,863 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:10,864 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:10,911 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:11,029 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:11,053 p=997717 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************************************************************************************************************************************
2025-09-29 11:37:11,307 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:11,341 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:11,414 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:11,466 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:11,494 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:11,508 p=997717 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************************************************************************************************************************************
2025-09-29 11:37:11,623 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:11,657 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:11,686 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:11,709 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:11,727 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:11,745 p=997717 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 11:37:11,883 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:37:11,934 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:37:11,961 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:37:11,966 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:11,979 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:37:12,007 p=997717 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************************************************************************************************************************************
2025-09-29 11:37:12,281 p=997717 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 11:37:12,299 p=997717 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 11:37:12,312 p=997717 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 11:37:12,319 p=997717 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 11:37:12,321 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:12,830 p=997717 u=root n=ansible | changed: [host1] => (item=host1)
2025-09-29 11:37:12,932 p=997717 u=root n=ansible | changed: [host2] => (item=host1)
2025-09-29 11:37:13,017 p=997717 u=root n=ansible | changed: [host3] => (item=host1)
2025-09-29 11:37:13,115 p=997717 u=root n=ansible | ok: [bda] => (item=host1)
2025-09-29 11:37:13,755 p=997717 u=root n=ansible | changed: [host1] => (item=host2)
2025-09-29 11:37:13,825 p=997717 u=root n=ansible | changed: [host2] => (item=host2)
2025-09-29 11:37:13,968 p=997717 u=root n=ansible | changed: [host3] => (item=host2)
2025-09-29 11:37:14,077 p=997717 u=root n=ansible | ok: [bda] => (item=host2)
2025-09-29 11:37:14,689 p=997717 u=root n=ansible | changed: [host2] => (item=host3)
2025-09-29 11:37:14,710 p=997717 u=root n=ansible | changed: [host1] => (item=host3)
2025-09-29 11:37:14,815 p=997717 u=root n=ansible | changed: [host3] => (item=host3)
2025-09-29 11:37:14,992 p=997717 u=root n=ansible | ok: [bda] => (item=host3)
2025-09-29 11:37:15,546 p=997717 u=root n=ansible | changed: [host1] => (item=bda)
2025-09-29 11:37:15,586 p=997717 u=root n=ansible | changed: [host2] => (item=bda)
2025-09-29 11:37:15,698 p=997717 u=root n=ansible | changed: [host3] => (item=bda)
2025-09-29 11:37:16,003 p=997717 u=root n=ansible | ok: [bda] => (item=bda)
2025-09-29 11:37:16,028 p=997717 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 11:37:16,309 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:16,441 p=997717 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 11:37:16,505 p=997717 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:37:17,451 p=997717 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:17,546 p=997717 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:17,679 p=997717 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:17,682 p=997717 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:18,137 p=997717 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/siem)
2025-09-29 11:37:18,531 p=997717 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/siem)
2025-09-29 11:37:18,591 p=997717 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/siem)
2025-09-29 11:37:18,602 p=997717 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/siem)
2025-09-29 11:37:18,641 p=997717 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 11:37:18,798 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:18,808 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:18,822 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:18,875 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:18,901 p=997717 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 11:37:19,031 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:19,093 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:19,115 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:19,180 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:19,207 p=997717 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 11:37:19,401 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:19,410 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:19,441 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:19,464 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:19,485 p=997717 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 11:37:19,586 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:19,685 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:19,711 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:19,737 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:19,771 p=997717 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 11:37:21,214 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:21,279 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:21,435 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:21,435 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:21,464 p=997717 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 11:37:22,515 p=997717 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:37:22,516 p=997717 u=root n=ansible | ...ignoring
2025-09-29 11:37:22,688 p=997717 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:37:22,688 p=997717 u=root n=ansible | ...ignoring
2025-09-29 11:37:22,808 p=997717 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:37:22,808 p=997717 u=root n=ansible | ...ignoring
2025-09-29 11:37:23,032 p=997717 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:37:23,033 p=997717 u=root n=ansible | ...ignoring
2025-09-29 11:37:23,060 p=997717 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 11:37:23,202 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:23,247 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:23,282 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:23,358 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:23,369 p=997717 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 11:37:23,486 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:23,532 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:23,555 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:23,593 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:23,608 p=997717 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 11:37:23,731 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:23,760 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:23,776 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:23,830 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:23,845 p=997717 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 11:37:23,941 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:23,993 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:24,024 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:24,043 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:24,067 p=997717 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 11:37:25,930 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:25,947 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:25,977 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:26,049 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:26,090 p=997717 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 11:37:27,538 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:27,561 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:27,667 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:27,696 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:27,720 p=997717 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 11:37:28,670 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:28,792 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:28,824 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:28,825 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:28,843 p=997717 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 11:37:29,007 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:37:29,035 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:37:29,063 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:37:29,097 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:37:29,166 p=997717 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 11:37:29,874 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:29,937 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:30,077 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:30,107 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:30,126 p=997717 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 11:37:30,221 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:30,290 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:30,329 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:30,371 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:30,398 p=997717 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 11:37:30,589 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:37:30,622 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:37:30,630 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:37:30,674 p=997717 u=root n=ansible | skipping: [bda]
2025-09-29 11:37:30,688 p=997717 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 11:37:31,684 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:37:31,686 p=997717 u=root n=ansible | changed: [bda]
2025-09-29 11:37:31,710 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:37:31,808 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:37:31,829 p=997717 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 11:37:32,754 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:37:32,777 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:37:32,837 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:32,838 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:37:32,872 p=997717 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 11:37:34,146 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:34,172 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:34,188 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:34,261 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:34,289 p=997717 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 11:37:35,265 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:37:35,315 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:37:35,343 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:37:35,382 p=997717 u=root n=ansible | changed: [bda]
2025-09-29 11:37:35,406 p=997717 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 11:37:35,538 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:37:35,618 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:37:35,628 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:37:35,708 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:37:35,732 p=997717 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 11:37:35,996 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 11:37:36,000 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/siem) 
2025-09-29 11:37:36,001 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:36,557 p=997717 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:36,655 p=997717 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:36,802 p=997717 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:36,804 p=997717 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:37:37,475 p=997717 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/siem)
2025-09-29 11:37:37,675 p=997717 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/siem)
2025-09-29 11:37:37,728 p=997717 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/siem)
2025-09-29 11:37:37,944 p=997717 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/siem)
2025-09-29 11:37:37,971 p=997717 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:37:38,242 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:39,033 p=997717 u=root n=ansible | changed: [host1] => (item=master-host1/data)
2025-09-29 11:37:39,080 p=997717 u=root n=ansible | changed: [host2] => (item=master-host2/data)
2025-09-29 11:37:39,100 p=997717 u=root n=ansible | changed: [bda] => (item=bda-master/data)
2025-09-29 11:37:39,110 p=997717 u=root n=ansible | changed: [host3] => (item=master-host3/data)
2025-09-29 11:37:39,949 p=997717 u=root n=ansible | changed: [host1] => (item=master-host1/logs)
2025-09-29 11:37:39,973 p=997717 u=root n=ansible | changed: [bda] => (item=bda-master/logs)
2025-09-29 11:37:40,031 p=997717 u=root n=ansible | changed: [host2] => (item=master-host2/logs)
2025-09-29 11:37:40,036 p=997717 u=root n=ansible | changed: [host3] => (item=master-host3/logs)
2025-09-29 11:37:40,716 p=997717 u=root n=ansible | changed: [bda] => (item=bda-master/config)
2025-09-29 11:37:40,822 p=997717 u=root n=ansible | changed: [host1] => (item=master-host1/config)
2025-09-29 11:37:40,845 p=997717 u=root n=ansible | changed: [host2] => (item=master-host2/config)
2025-09-29 11:37:40,926 p=997717 u=root n=ansible | changed: [host3] => (item=master-host3/config)
2025-09-29 11:37:41,682 p=997717 u=root n=ansible | changed: [host1] => (item=hot-host1/data)
2025-09-29 11:37:41,704 p=997717 u=root n=ansible | changed: [host3] => (item=hot-host3/data)
2025-09-29 11:37:41,739 p=997717 u=root n=ansible | changed: [host2] => (item=warm-host2/data)
2025-09-29 11:37:42,531 p=997717 u=root n=ansible | changed: [host1] => (item=hot-host1/logs)
2025-09-29 11:37:42,536 p=997717 u=root n=ansible | changed: [host2] => (item=warm-host2/logs)
2025-09-29 11:37:42,540 p=997717 u=root n=ansible | changed: [host3] => (item=hot-host3/logs)
2025-09-29 11:37:43,420 p=997717 u=root n=ansible | changed: [host2] => (item=warm-host2/config)
2025-09-29 11:37:43,435 p=997717 u=root n=ansible | changed: [host3] => (item=hot-host3/config)
2025-09-29 11:37:43,444 p=997717 u=root n=ansible | changed: [host1] => (item=hot-host1/config)
2025-09-29 11:37:44,357 p=997717 u=root n=ansible | changed: [host1] => (item=ml-host1/data)
2025-09-29 11:37:44,464 p=997717 u=root n=ansible | changed: [host2] => (item=sf-host2/data)
2025-09-29 11:37:44,472 p=997717 u=root n=ansible | changed: [host3] => (item=cold-host3/data)
2025-09-29 11:37:45,189 p=997717 u=root n=ansible | changed: [host1] => (item=ml-host1/logs)
2025-09-29 11:37:45,262 p=997717 u=root n=ansible | changed: [host3] => (item=cold-host3/logs)
2025-09-29 11:37:45,311 p=997717 u=root n=ansible | changed: [host2] => (item=sf-host2/logs)
2025-09-29 11:37:45,993 p=997717 u=root n=ansible | changed: [host1] => (item=ml-host1/config)
2025-09-29 11:37:46,113 p=997717 u=root n=ansible | changed: [host3] => (item=cold-host3/config)
2025-09-29 11:37:46,145 p=997717 u=root n=ansible | changed: [host2] => (item=sf-host2/config)
2025-09-29 11:37:46,179 p=997717 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 11:37:46,470 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:37:46,587 p=997717 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 11:37:46,724 p=997717 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 11:37:47,855 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:47,984 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:47,995 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:48,070 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:48,097 p=997717 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 11:37:49,181 p=997717 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/siem)
2025-09-29 11:37:49,189 p=997717 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/siem)
2025-09-29 11:37:49,203 p=997717 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/siem)
2025-09-29 11:37:49,217 p=997717 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/siem)
2025-09-29 11:37:49,950 p=997717 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/siem/ca)
2025-09-29 11:37:50,035 p=997717 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/siem/ca)
2025-09-29 11:37:50,092 p=997717 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/siem/ca)
2025-09-29 11:37:50,116 p=997717 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/siem/ca)
2025-09-29 11:37:50,231 p=997717 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 11:37:51,186 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:37:51,199 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:37:51,312 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:37:51,350 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:37:52,021 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:37:52,099 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:37:52,216 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:37:53,072 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:37:53,153 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:37:53,179 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:37:53,213 p=997717 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 11:37:54,128 p=997717 u=root n=ansible | ok: [host1]
2025-09-29 11:37:54,234 p=997717 u=root n=ansible | ok: [host2]
2025-09-29 11:37:54,285 p=997717 u=root n=ansible | ok: [host3]
2025-09-29 11:37:54,320 p=997717 u=root n=ansible | ok: [bda]
2025-09-29 11:37:54,347 p=997717 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 11:37:57,367 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:37:57,392 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:38:00,683 p=997717 u=root n=ansible | changed: [bda]
2025-09-29 11:38:01,186 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:38:01,205 p=997717 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 11:38:02,118 p=997717 u=root n=ansible | changed: [bda]
2025-09-29 11:38:02,181 p=997717 u=root n=ansible | changed: [host3]
2025-09-29 11:38:02,247 p=997717 u=root n=ansible | changed: [host1]
2025-09-29 11:38:02,279 p=997717 u=root n=ansible | changed: [host2]
2025-09-29 11:38:02,298 p=997717 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 11:38:03,214 p=997717 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/siem/ca/ca.key', 'mode': '0600'})
2025-09-29 11:38:03,233 p=997717 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/siem/ca/ca.key', 'mode': '0600'})
2025-09-29 11:38:03,294 p=997717 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/siem/ca/ca.key', 'mode': '0600'})
2025-09-29 11:38:03,432 p=997717 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/siem/ca/ca.key', 'mode': '0600'})
2025-09-29 11:38:03,998 p=997717 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/siem/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:38:04,058 p=997717 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/siem/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:38:04,177 p=997717 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/siem/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:38:04,397 p=997717 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/siem/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:38:04,417 p=997717 u=root n=ansible | TASK [install_elastic : Create OpenSSL config for each node with hostname SANs] *************************************************************************************************************************************************************
2025-09-29 11:38:06,220 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:06,272 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:06,303 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:06,351 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:07,594 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:07,700 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:08,087 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:09,085 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:09,306 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:09,440 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:09,472 p=997717 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:38:10,877 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:11,120 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:11,350 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:11,352 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:12,115 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:12,620 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:12,938 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:13,558 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:13,943 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:14,801 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:14,825 p=997717 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node with config] *************************************************************************************************************************************************************
2025-09-29 11:38:15,724 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:15,823 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:15,926 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:15,998 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:16,628 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:16,657 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:16,982 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:17,521 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:17,556 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:17,868 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:17,896 p=997717 u=root n=ansible | TASK [install_elastic : Sign certificate for each node with extensions] *********************************************************************************************************************************************************************
2025-09-29 11:38:18,956 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:18,976 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:19,094 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:19,189 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:20,048 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:20,085 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:20,247 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:20,964 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:21,067 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:21,377 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:21,411 p=997717 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 11:38:22,184 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:22,287 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:22,346 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:22,607 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:23,073 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:23,198 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:23,275 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:24,021 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:24,142 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:24,339 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:24,375 p=997717 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 11:38:25,351 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:25,393 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:25,407 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:25,455 p=997717 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:26,236 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:26,334 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:26,344 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:38:27,097 p=997717 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:38:27,199 p=997717 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:27,385 p=997717 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:38:27,409 p=997717 u=root n=ansible | TASK [install_elastic : Remove temporary files] *********************************************************************************************************************************************************************************************
2025-09-29 11:38:27,629 p=997717 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:38:27,637 p=997717 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:38:27,655 p=997717 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:38:27,723 p=997717 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:38:27,947 p=997717 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 11:38:27,993 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,053 p=997717 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:38:28,134 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,192 p=997717 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 11:38:28,257 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,346 p=997717 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 11:38:28,390 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,501 p=997717 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 11:38:28,573 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,676 p=997717 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 11:38:28,732 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,842 p=997717 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 11:38:28,914 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:28,997 p=997717 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 11:38:29,073 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:29,102 p=997717 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 11:38:29,241 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:38:29,334 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:38:29,359 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:38:29,378 p=997717 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:38:29,488 p=997717 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 11:38:29,564 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:29,616 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:29,689 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:29,770 p=997717 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'kibana_base_path' is undefined. 'kibana_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_kibana/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Initialize Kibana variables\n      ^ here\n"}
2025-09-29 11:38:29,771 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:29,787 p=997717 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 11:38:29,858 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:29,913 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:29,916 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:29,952 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:29,976 p=997717 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 11:38:30,103 p=997717 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:38:30,106 p=997717 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:38:30,120 p=997717 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:38:30,129 p=997717 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 11:38:30,150 p=997717 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 11:38:30,154 p=997717 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:38:30,155 p=997717 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:38:30,157 p=997717 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:38:30,159 p=997717 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:38:30,162 p=997717 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:38:30,164 p=997717 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:38:30,172 p=997717 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:38:30,173 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:30,175 p=997717 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:38:30,176 p=997717 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:38:30,179 p=997717 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:38:30,181 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:30,182 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:30,221 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:38:30,241 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:38:30,243 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:38:30,253 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:38:30,257 p=997717 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:38:30,259 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:30,284 p=997717 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 11:38:30,424 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:30,482 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:30,484 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:30,521 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:30,550 p=997717 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 11:38:30,677 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:30,729 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:30,732 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:30,779 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:30,805 p=997717 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 11:38:30,883 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:30,990 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:30,993 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:31,026 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:31,055 p=997717 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 11:38:31,126 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:31,189 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:31,203 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:31,236 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:31,277 p=997717 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 11:38:31,359 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:31,420 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:31,480 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:31,513 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:31,733 p=997717 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 11:38:31,870 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:31,892 p=997717 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n║ End Time: 2025-09-29T08:06:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:38:31,916 p=997717 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n║ End Time: 2025-09-29T08:06:58Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:38:31,929 p=997717 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:06:54Z                      ║\n║ End Time: 2025-09-29T08:06:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:38:31,940 p=997717 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 11:38:32,058 p=997717 u=root n=ansible | skipping: [host1]
2025-09-29 11:38:32,108 p=997717 u=root n=ansible | skipping: [host2]
2025-09-29 11:38:32,111 p=997717 u=root n=ansible | skipping: [host3]
2025-09-29 11:38:32,150 p=997717 u=root n=ansible | skipping: [lb1]
2025-09-29 11:38:32,359 p=997717 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 11:38:32,360 p=997717 u=root n=ansible | bda                        : ok=52   changed=14   unreachable=0    failed=1    skipped=12   rescued=1    ignored=1   
2025-09-29 11:38:32,360 p=997717 u=root n=ansible | host1                      : ok=53   changed=17   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:38:32,360 p=997717 u=root n=ansible | host2                      : ok=53   changed=18   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:38:32,360 p=997717 u=root n=ansible | host3                      : ok=53   changed=18   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:38:32,361 p=997717 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=31   rescued=0    ignored=0   
2025-09-29 11:40:52,065 p=1004779 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 11:40:52,138 p=1004779 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 11:40:55,469 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:40:55,591 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:40:55,642 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:40:55,764 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:40:55,879 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:40:55,891 p=1004779 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 11:40:55,961 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:40:56,005 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:40:56,039 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:40:56,046 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:40:56,067 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:40:56,098 p=1004779 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 11:40:56,220 p=1004779 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:40:56,251 p=1004779 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:40:56,282 p=1004779 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:40:56,302 p=1004779 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:40:56,319 p=1004779 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:40:56,430 p=1004779 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 11:40:58,483 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:40:58,490 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:40:58,568 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:40:58,612 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:40:58,673 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:40:58,689 p=1004779 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 11:40:58,797 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:40:58,854 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:40:58,889 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:40:58,894 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:40:58,930 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:40:58,943 p=1004779 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 11:40:58,965 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:40:58,981 p=1004779 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 11:40:59,008 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:40:59,027 p=1004779 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 11:40:59,051 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:40:59,065 p=1004779 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 11:41:00,181 p=1004779 u=root n=ansible | changed: [host2]
2025-09-29 11:41:00,218 p=1004779 u=root n=ansible | changed: [host1]
2025-09-29 11:41:00,351 p=1004779 u=root n=ansible | changed: [bda]
2025-09-29 11:41:00,352 p=1004779 u=root n=ansible | changed: [lb1]
2025-09-29 11:41:00,363 p=1004779 u=root n=ansible | changed: [host3]
2025-09-29 11:41:00,382 p=1004779 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 11:41:00,404 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:00,422 p=1004779 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 11:41:02,362 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:02,813 p=1004779 u=root n=ansible | changed: [host2]
2025-09-29 11:41:02,831 p=1004779 u=root n=ansible | changed: [host1]
2025-09-29 11:41:02,834 p=1004779 u=root n=ansible | changed: [host3]
2025-09-29 11:41:02,887 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:02,905 p=1004779 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 11:41:03,997 p=1004779 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 11:41:04,040 p=1004779 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 11:41:04,045 p=1004779 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 11:41:04,123 p=1004779 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 11:41:04,154 p=1004779 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 11:41:04,788 p=1004779 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 11:41:04,820 p=1004779 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 11:41:04,831 p=1004779 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 11:41:04,852 p=1004779 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 11:41:04,865 p=1004779 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 11:41:04,947 p=1004779 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 11:41:05,038 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:41:05,093 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:41:05,128 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:41:05,130 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:05,163 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:05,187 p=1004779 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 11:41:05,930 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:41:06,140 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:06,164 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:41:06,217 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:06,231 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:41:06,264 p=1004779 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 11:41:07,051 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:41:07,147 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:07,157 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:41:07,258 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:07,288 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:41:07,315 p=1004779 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 11:41:07,411 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:41:07,524 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:41:07,574 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:41:07,577 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:07,607 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:07,646 p=1004779 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 11:41:07,702 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:07,793 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:07,831 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:07,833 p=1004779 u=root n=ansible | skipping: [bda]
2025-09-29 11:41:08,565 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:08,604 p=1004779 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 11:41:08,683 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:08,720 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:08,784 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:08,789 p=1004779 u=root n=ansible | skipping: [bda]
2025-09-29 11:41:08,908 p=1004779 u=root n=ansible | ok: [lb1]
2025-09-29 11:41:08,929 p=1004779 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 11:41:09,004 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:09,057 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:09,172 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:09,174 p=1004779 u=root n=ansible | skipping: [bda]
2025-09-29 11:41:09,219 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:09,333 p=1004779 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 11:41:09,486 p=1004779 u=root n=ansible | ok: [host2]
2025-09-29 11:41:09,497 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:09,527 p=1004779 u=root n=ansible | ok: [host1]
2025-09-29 11:41:09,588 p=1004779 u=root n=ansible | ok: [bda]
2025-09-29 11:41:09,609 p=1004779 u=root n=ansible | ok: [host3]
2025-09-29 11:41:09,632 p=1004779 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:41:09,734 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:09,765 p=1004779 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:41:09,830 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:09,840 p=1004779 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:41:09,881 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:09,892 p=1004779 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:41:09,930 p=1004779 u=root n=ansible | skipping: [bda]
2025-09-29 11:41:09,942 p=1004779 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:41:09,957 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:09,971 p=1004779 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 11:41:10,151 p=1004779 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 11:41:10,155 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:10,183 p=1004779 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 11:41:10,193 p=1004779 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 11:41:10,212 p=1004779 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 11:41:10,236 p=1004779 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 11:41:10,419 p=1004779 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:41:10,421 p=1004779 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:41:10,422 p=1004779 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:41:10,456 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:10,457 p=1004779 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'elasticsearch_base_path' is undefined. 'elasticsearch_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/main.yml': line 32, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    # STEP 2: Set required variables\n    - name: Set deployment configuration variables\n      ^ here\n"}
2025-09-29 11:41:10,526 p=1004779 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************************************************************************************************************************************
2025-09-29 11:41:10,601 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:10,709 p=1004779 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************************************************************************************************************************************
2025-09-29 11:41:10,765 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:10,825 p=1004779 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************************************************************************************************************************************
2025-09-29 11:41:10,894 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,021 p=1004779 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 11:41:11,071 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,179 p=1004779 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************************************************************************************************************************************
2025-09-29 11:41:11,267 p=1004779 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 11:41:11,276 p=1004779 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 11:41:11,290 p=1004779 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 11:41:11,305 p=1004779 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 11:41:11,307 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,388 p=1004779 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 11:41:11,463 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,530 p=1004779 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 11:41:11,618 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,689 p=1004779 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:41:11,770 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:11,836 p=1004779 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 11:41:11,895 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:12,052 p=1004779 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 11:41:12,137 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:12,233 p=1004779 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:41:12,317 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:12,460 p=1004779 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 11:41:12,528 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:12,600 p=1004779 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 11:41:12,645 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:12,758 p=1004779 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 11:41:12,808 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:13,010 p=1004779 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 11:41:13,053 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:13,130 p=1004779 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 11:41:13,168 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:13,266 p=1004779 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 11:41:13,333 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:13,370 p=1004779 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 11:41:13,541 p=1004779 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:41:13,573 p=1004779 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:41:13,574 p=1004779 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:41:13,590 p=1004779 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:41:13,749 p=1004779 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 11:41:13,827 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:13,902 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:13,938 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:13,966 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:13,972 p=1004779 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'kibana_base_path' is undefined. 'kibana_base_path' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_kibana/tasks/main.yml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n  block:\n    - name: Initialize Kibana variables\n      ^ here\n"}
2025-09-29 11:41:13,993 p=1004779 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 11:41:14,045 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:14,095 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:14,156 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:14,184 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:14,213 p=1004779 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 11:41:14,276 p=1004779 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:41:14,307 p=1004779 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:41:14,310 p=1004779 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:41:14,312 p=1004779 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:41:14,313 p=1004779 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:41:14,390 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:14,396 p=1004779 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 11:41:14,397 p=1004779 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:41:14,403 p=1004779 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:41:14,419 p=1004779 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:41:14,423 p=1004779 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:41:14,435 p=1004779 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 11:41:14,452 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:14,453 p=1004779 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:41:14,455 p=1004779 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:41:14,464 p=1004779 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:41:14,470 p=1004779 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:41:14,472 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:14,512 p=1004779 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:41:14,526 p=1004779 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:41:14,537 p=1004779 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:41:14,549 p=1004779 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:41:14,556 p=1004779 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:41:14,559 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:14,585 p=1004779 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 11:41:14,672 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:14,728 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:14,777 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:14,833 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:14,874 p=1004779 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 11:41:15,013 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:15,047 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:15,054 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:15,091 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:15,129 p=1004779 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 11:41:15,248 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:15,301 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:15,303 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:15,335 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:15,360 p=1004779 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 11:41:15,428 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:15,521 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:15,524 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:15,557 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:15,613 p=1004779 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 11:41:15,706 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:15,814 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:15,817 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:15,854 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:16,099 p=1004779 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 11:41:16,885 p=1004779 u=root n=ansible | changed: [host1]
2025-09-29 11:41:17,022 p=1004779 u=root n=ansible | changed: [host2]
2025-09-29 11:41:17,063 p=1004779 u=root n=ansible | changed: [host3]
2025-09-29 11:41:17,088 p=1004779 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 11:41:17,242 p=1004779 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n║ End Time: 2025-09-29T08:10:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:41:17,244 p=1004779 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n║ End Time: 2025-09-29T08:10:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:41:17,264 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:17,345 p=1004779 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:10:54Z                      ║\n║ End Time: 2025-09-29T08:10:57Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:41:17,365 p=1004779 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 11:41:17,485 p=1004779 u=root n=ansible | skipping: [host1]
2025-09-29 11:41:17,532 p=1004779 u=root n=ansible | skipping: [host2]
2025-09-29 11:41:17,535 p=1004779 u=root n=ansible | skipping: [host3]
2025-09-29 11:41:17,562 p=1004779 u=root n=ansible | skipping: [lb1]
2025-09-29 11:41:17,703 p=1004779 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 11:41:17,703 p=1004779 u=root n=ansible | bda                        : ok=15   changed=1    unreachable=0    failed=1    skipped=3    rescued=1    ignored=0   
2025-09-29 11:41:17,704 p=1004779 u=root n=ansible | host1                      : ok=17   changed=3    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:41:17,704 p=1004779 u=root n=ansible | host2                      : ok=17   changed=3    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:41:17,704 p=1004779 u=root n=ansible | host3                      : ok=17   changed=3    unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 11:41:17,704 p=1004779 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=31   rescued=0    ignored=0   
2025-09-29 11:50:29,206 p=1006920 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 11:50:29,252 p=1006920 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 11:50:32,498 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:32,621 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:32,792 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:32,959 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:32,963 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:32,990 p=1006920 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 11:50:33,072 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:33,210 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:33,273 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:33,275 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:33,318 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:33,348 p=1006920 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 11:50:33,463 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:50:33,492 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:50:33,545 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:20:32Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:50:33,549 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:50:33,604 p=1006920 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:50:33,817 p=1006920 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 11:50:35,986 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:36,043 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:36,190 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:36,294 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:36,465 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:36,495 p=1006920 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 11:50:36,635 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:36,713 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:36,766 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:36,769 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:36,832 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:36,856 p=1006920 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 11:50:36,891 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:36,912 p=1006920 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 11:50:36,950 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:36,967 p=1006920 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 11:50:36,997 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:37,013 p=1006920 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 11:50:38,142 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:50:38,159 p=1006920 u=root n=ansible | changed: [lb1]
2025-09-29 11:50:38,201 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:50:38,307 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:50:38,325 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:50:38,346 p=1006920 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 11:50:38,361 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:38,378 p=1006920 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 11:50:40,443 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:40,457 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:40,492 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:40,632 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:40,638 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:40,683 p=1006920 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 11:50:41,892 p=1006920 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 11:50:41,904 p=1006920 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 11:50:41,946 p=1006920 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 11:50:41,979 p=1006920 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 11:50:42,149 p=1006920 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 11:50:42,593 p=1006920 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 11:50:42,680 p=1006920 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 11:50:42,682 p=1006920 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 11:50:42,688 p=1006920 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 11:50:42,920 p=1006920 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 11:50:43,024 p=1006920 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 11:50:43,107 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:43,192 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:43,234 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:43,237 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:43,264 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:43,299 p=1006920 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 11:50:44,069 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:44,103 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:44,130 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:44,144 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:44,199 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:44,213 p=1006920 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 11:50:44,940 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:45,080 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:45,107 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:45,138 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:45,250 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:45,295 p=1006920 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 11:50:45,407 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:45,460 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:45,520 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:45,528 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:45,566 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:45,600 p=1006920 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 11:50:45,672 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:45,773 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:45,820 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:45,822 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:46,687 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:46,700 p=1006920 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 11:50:46,792 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:46,829 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:46,868 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:46,872 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:46,912 p=1006920 u=root n=ansible | ok: [lb1]
2025-09-29 11:50:46,928 p=1006920 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 11:50:47,002 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:47,046 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:47,096 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:47,099 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:47,117 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:47,225 p=1006920 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 11:50:47,373 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:47,462 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:47,467 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:47,467 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:47,498 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:47,535 p=1006920 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:50:47,633 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:47,650 p=1006920 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:50:47,726 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:47,735 p=1006920 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:50:47,773 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:47,782 p=1006920 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:50:47,826 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:47,835 p=1006920 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 11:50:47,850 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:47,860 p=1006920 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 11:50:48,010 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 11:50:48,033 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:48,048 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 11:50:48,100 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 11:50:48,108 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 11:50:48,130 p=1006920 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 11:50:48,258 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:48,324 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:48,359 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:48,368 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:48,444 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:48,475 p=1006920 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************************************************************************************************************************************
2025-09-29 11:50:48,714 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:48,767 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:48,778 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:48,791 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:48,854 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:48,869 p=1006920 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************************************************************************************************************************************
2025-09-29 11:50:49,125 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:49,154 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:49,220 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:49,297 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:49,348 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:49,364 p=1006920 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************************************************************************************************************************************
2025-09-29 11:50:49,499 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:49,547 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:49,553 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:49,601 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:49,614 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:49,635 p=1006920 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 11:50:49,804 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:50:49,852 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:50:49,855 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:50:49,866 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 11:50:49,898 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:49,935 p=1006920 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************************************************************************************************************************************
2025-09-29 11:50:50,228 p=1006920 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 11:50:50,241 p=1006920 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 11:50:50,259 p=1006920 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 11:50:50,271 p=1006920 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 11:50:50,273 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:50,935 p=1006920 u=root n=ansible | ok: [host1] => (item=host1)
2025-09-29 11:50:50,971 p=1006920 u=root n=ansible | ok: [host2] => (item=host1)
2025-09-29 11:50:50,984 p=1006920 u=root n=ansible | ok: [host3] => (item=host1)
2025-09-29 11:50:51,099 p=1006920 u=root n=ansible | ok: [bda] => (item=host1)
2025-09-29 11:50:52,003 p=1006920 u=root n=ansible | ok: [host2] => (item=host2)
2025-09-29 11:50:52,004 p=1006920 u=root n=ansible | ok: [host1] => (item=host2)
2025-09-29 11:50:52,005 p=1006920 u=root n=ansible | ok: [host3] => (item=host2)
2025-09-29 11:50:52,135 p=1006920 u=root n=ansible | ok: [bda] => (item=host2)
2025-09-29 11:50:52,776 p=1006920 u=root n=ansible | ok: [host3] => (item=host3)
2025-09-29 11:50:52,777 p=1006920 u=root n=ansible | ok: [host2] => (item=host3)
2025-09-29 11:50:52,838 p=1006920 u=root n=ansible | ok: [host1] => (item=host3)
2025-09-29 11:50:53,057 p=1006920 u=root n=ansible | ok: [bda] => (item=host3)
2025-09-29 11:50:53,664 p=1006920 u=root n=ansible | ok: [host3] => (item=bda)
2025-09-29 11:50:53,684 p=1006920 u=root n=ansible | ok: [host2] => (item=bda)
2025-09-29 11:50:53,748 p=1006920 u=root n=ansible | ok: [host1] => (item=bda)
2025-09-29 11:50:54,133 p=1006920 u=root n=ansible | ok: [bda] => (item=bda)
2025-09-29 11:50:54,164 p=1006920 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 11:50:54,468 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:50:54,598 p=1006920 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 11:50:54,656 p=1006920 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:50:55,653 p=1006920 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:50:55,673 p=1006920 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:50:55,682 p=1006920 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:50:55,807 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:50:56,428 p=1006920 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:50:56,529 p=1006920 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:50:56,639 p=1006920 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:50:56,799 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:50:56,815 p=1006920 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 11:50:56,904 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:56,972 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:57,025 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:57,065 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:57,094 p=1006920 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 11:50:57,234 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:57,331 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:57,333 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:57,421 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:57,452 p=1006920 u=root n=ansible | TASK [install_elastic : Install pip for Python Docker module] *******************************************************************************************************************************************************************************
2025-09-29 11:50:57,633 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:57,676 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:57,677 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:57,716 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:57,746 p=1006920 u=root n=ansible | TASK [install_elastic : Install Python Docker module] ***************************************************************************************************************************************************************************************
2025-09-29 11:50:57,912 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:50:57,936 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:50:57,992 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:50:57,997 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:50:58,019 p=1006920 u=root n=ansible | TASK [install_elastic : Update apt cache] ***************************************************************************************************************************************************************************************************
2025-09-29 11:50:59,478 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:50:59,661 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:50:59,699 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:50:59,712 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:50:59,728 p=1006920 u=root n=ansible | TASK [install_elastic : Install Docker packages] ********************************************************************************************************************************************************************************************
2025-09-29 11:51:00,938 p=1006920 u=root n=ansible | fatal: [host1]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:51:00,939 p=1006920 u=root n=ansible | ...ignoring
2025-09-29 11:51:01,070 p=1006920 u=root n=ansible | fatal: [host2]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:51:01,070 p=1006920 u=root n=ansible | ...ignoring
2025-09-29 11:51:01,124 p=1006920 u=root n=ansible | fatal: [bda]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:51:01,124 p=1006920 u=root n=ansible | ...ignoring
2025-09-29 11:51:01,137 p=1006920 u=root n=ansible | fatal: [host3]: FAILED! => {"changed": false, "msg": "No package matching 'docker' is available"}
2025-09-29 11:51:01,137 p=1006920 u=root n=ansible | ...ignoring
2025-09-29 11:51:01,166 p=1006920 u=root n=ansible | TASK [install_elastic : Install Docker alternative packages if first attempt fails] *********************************************************************************************************************************************************
2025-09-29 11:51:01,310 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:01,393 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:01,417 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:01,480 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:01,508 p=1006920 u=root n=ansible | TASK [install_elastic : Download Docker installation script] ********************************************************************************************************************************************************************************
2025-09-29 11:51:01,667 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:01,713 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:01,772 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:01,864 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:01,883 p=1006920 u=root n=ansible | TASK [install_elastic : Install Docker using script] ****************************************************************************************************************************************************************************************
2025-09-29 11:51:02,004 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:02,070 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:02,080 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:02,131 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:02,145 p=1006920 u=root n=ansible | TASK [install_elastic : Install docker-compose] *********************************************************************************************************************************************************************************************
2025-09-29 11:51:02,288 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:02,290 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:02,338 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:02,346 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:02,365 p=1006920 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 11:51:04,477 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:04,573 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:04,603 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:04,838 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:04,877 p=1006920 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 11:51:06,231 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:06,255 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:06,264 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:06,338 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:06,360 p=1006920 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 11:51:07,188 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:07,331 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:07,434 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:07,477 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:07,511 p=1006920 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 11:51:07,655 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:51:07,761 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:51:07,777 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:51:07,825 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 11:51:07,841 p=1006920 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 11:51:08,651 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:08,685 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:08,763 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:08,917 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:08,952 p=1006920 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 11:51:09,118 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:09,168 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:09,201 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:09,246 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:09,271 p=1006920 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 11:51:09,409 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:51:09,453 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:51:09,540 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:51:09,574 p=1006920 u=root n=ansible | skipping: [bda]
2025-09-29 11:51:09,593 p=1006920 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 11:51:10,515 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:51:10,598 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:51:10,659 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:51:10,687 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:51:10,700 p=1006920 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 11:51:11,450 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:51:11,607 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:51:11,676 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:51:11,796 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:11,821 p=1006920 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 11:51:12,954 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:13,015 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:13,057 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:13,127 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:13,149 p=1006920 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 11:51:13,985 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:51:14,048 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:51:14,078 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:51:14,258 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:51:14,276 p=1006920 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 11:51:14,438 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:51:14,480 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:51:14,482 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:51:14,562 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 11:51:14,581 p=1006920 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 11:51:14,810 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 11:51:14,817 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-29 11:51:14,818 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:51:15,524 p=1006920 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:51:15,567 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:51:15,628 p=1006920 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:51:15,712 p=1006920 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 11:51:16,364 p=1006920 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:16,396 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:16,507 p=1006920 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:16,521 p=1006920 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:16,546 p=1006920 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 11:51:16,785 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:51:17,573 p=1006920 u=root n=ansible | changed: [host1] => (item=master-host1/data)
2025-09-29 11:51:17,724 p=1006920 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 11:51:17,727 p=1006920 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 11:51:17,730 p=1006920 u=root n=ansible | changed: [bda] => (item=bda-master/data)
2025-09-29 11:51:18,578 p=1006920 u=root n=ansible | changed: [host1] => (item=master-host1/logs)
2025-09-29 11:51:18,607 p=1006920 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 11:51:18,686 p=1006920 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 11:51:18,689 p=1006920 u=root n=ansible | changed: [bda] => (item=bda-master/logs)
2025-09-29 11:51:19,477 p=1006920 u=root n=ansible | changed: [host1] => (item=master-host1/config)
2025-09-29 11:51:19,633 p=1006920 u=root n=ansible | changed: [bda] => (item=bda-master/config)
2025-09-29 11:51:19,688 p=1006920 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 11:51:19,736 p=1006920 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 11:51:20,365 p=1006920 u=root n=ansible | changed: [host1] => (item=hot-host1/data)
2025-09-29 11:51:20,586 p=1006920 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 11:51:20,719 p=1006920 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 11:51:21,452 p=1006920 u=root n=ansible | changed: [host1] => (item=hot-host1/logs)
2025-09-29 11:51:21,606 p=1006920 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 11:51:21,633 p=1006920 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 11:51:22,440 p=1006920 u=root n=ansible | changed: [host1] => (item=hot-host1/config)
2025-09-29 11:51:22,487 p=1006920 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 11:51:22,513 p=1006920 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 11:51:23,350 p=1006920 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 11:51:23,371 p=1006920 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 11:51:23,381 p=1006920 u=root n=ansible | changed: [host1] => (item=ml-host1/data)
2025-09-29 11:51:24,160 p=1006920 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 11:51:24,208 p=1006920 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 11:51:24,268 p=1006920 u=root n=ansible | changed: [host1] => (item=ml-host1/logs)
2025-09-29 11:51:24,935 p=1006920 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 11:51:25,111 p=1006920 u=root n=ansible | changed: [host1] => (item=ml-host1/config)
2025-09-29 11:51:25,184 p=1006920 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 11:51:25,215 p=1006920 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 11:51:25,457 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:51:25,562 p=1006920 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, bda, host3
2025-09-29 11:51:25,650 p=1006920 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 11:51:26,902 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:26,954 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:26,996 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:27,059 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:27,076 p=1006920 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 11:51:28,057 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:28,060 p=1006920 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:28,073 p=1006920 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:28,146 p=1006920 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 11:51:29,004 p=1006920 u=root n=ansible | changed: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 11:51:29,054 p=1006920 u=root n=ansible | changed: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 11:51:29,066 p=1006920 u=root n=ansible | changed: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 11:51:29,096 p=1006920 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 11:51:29,128 p=1006920 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 11:51:30,030 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:30,271 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:30,276 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:30,287 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:30,820 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:30,949 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:31,257 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:31,709 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:31,738 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:32,122 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:32,158 p=1006920 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 11:51:33,013 p=1006920 u=root n=ansible | ok: [host1]
2025-09-29 11:51:33,182 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:51:33,189 p=1006920 u=root n=ansible | ok: [host2]
2025-09-29 11:51:33,190 p=1006920 u=root n=ansible | ok: [host3]
2025-09-29 11:51:33,221 p=1006920 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 11:51:37,064 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:51:37,284 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:51:37,898 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:51:38,136 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:51:38,169 p=1006920 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 11:51:39,166 p=1006920 u=root n=ansible | changed: [host2]
2025-09-29 11:51:39,240 p=1006920 u=root n=ansible | changed: [host1]
2025-09-29 11:51:39,300 p=1006920 u=root n=ansible | changed: [host3]
2025-09-29 11:51:39,404 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:51:39,426 p=1006920 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 11:51:40,378 p=1006920 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'})
2025-09-29 11:51:40,669 p=1006920 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'})
2025-09-29 11:51:40,708 p=1006920 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'})
2025-09-29 11:51:40,766 p=1006920 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'})
2025-09-29 11:51:41,544 p=1006920 u=root n=ansible | changed: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:51:41,650 p=1006920 u=root n=ansible | changed: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:51:41,702 p=1006920 u=root n=ansible | changed: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:51:41,709 p=1006920 u=root n=ansible | ok: [bda] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'})
2025-09-29 11:51:41,742 p=1006920 u=root n=ansible | TASK [install_elastic : Create OpenSSL config for each node with hostname SANs] *************************************************************************************************************************************************************
2025-09-29 11:51:43,796 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:43,855 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:43,924 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:43,977 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:45,436 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:45,492 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:45,508 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:46,829 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:46,948 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:47,069 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:47,108 p=1006920 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:51:48,452 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:48,568 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:48,907 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:49,471 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:49,514 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:49,815 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:50,425 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:51,065 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:51,274 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:51,514 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:51,548 p=1006920 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node with config] *************************************************************************************************************************************************************
2025-09-29 11:51:52,438 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:52,601 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:52,675 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:52,741 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:53,373 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:53,428 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:53,493 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:54,307 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:54,382 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:54,383 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:54,401 p=1006920 u=root n=ansible | TASK [install_elastic : Sign certificate for each node with extensions] *********************************************************************************************************************************************************************
2025-09-29 11:51:55,455 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:55,488 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:55,510 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:55,809 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:56,463 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:56,486 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:56,499 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:57,423 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:57,496 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:57,597 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:51:57,621 p=1006920 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************************************************************************************************************************************
2025-09-29 11:51:58,581 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:58,627 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:58,716 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:58,770 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:51:59,436 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:59,485 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:51:59,594 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:52:00,262 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:52:00,314 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:52:00,540 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:52:00,570 p=1006920 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************************************************************************************************************************************
2025-09-29 11:52:01,594 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:52:01,701 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:52:01,734 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:52:01,894 p=1006920 u=root n=ansible | changed: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:52:02,594 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:52:02,609 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:52:02,667 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 11:52:03,526 p=1006920 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 11:52:03,540 p=1006920 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:52:03,611 p=1006920 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 11:52:03,646 p=1006920 u=root n=ansible | TASK [install_elastic : Remove temporary files] *********************************************************************************************************************************************************************************************
2025-09-29 11:52:03,865 p=1006920 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:52:03,902 p=1006920 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:52:03,931 p=1006920 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:52:04,035 p=1006920 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'item' is undefined. 'item' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 145, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Remove temporary files\n  ^ here\n"}
2025-09-29 11:52:04,112 p=1006920 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 11:52:04,178 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:04,295 p=1006920 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 11:52:04,394 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:04,496 p=1006920 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 11:52:04,555 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:04,635 p=1006920 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 11:52:04,709 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:04,824 p=1006920 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 11:52:04,901 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:04,952 p=1006920 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 11:52:05,006 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:05,060 p=1006920 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 11:52:05,124 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:05,177 p=1006920 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 11:52:05,228 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:05,270 p=1006920 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 11:52:05,435 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:52:05,474 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:52:05,510 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:52:05,513 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 11:52:05,583 p=1006920 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 11:52:05,711 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:05,787 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:05,849 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:05,876 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:05,885 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:52:05,901 p=1006920 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 11:52:06,003 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:06,066 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:06,115 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:06,146 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:07,475 p=1006920 u=root n=ansible | ok: [bda]
2025-09-29 11:52:07,507 p=1006920 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 11:52:07,583 p=1006920 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:52:07,588 p=1006920 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:52:07,590 p=1006920 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:52:07,594 p=1006920 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:52:07,596 p=1006920 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:52:07,641 p=1006920 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 11:52:07,644 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:07,651 p=1006920 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:52:07,653 p=1006920 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:52:07,666 p=1006920 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:52:07,667 p=1006920 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:52:07,688 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:07,706 p=1006920 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 11:52:07,713 p=1006920 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:52:07,730 p=1006920 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:52:07,739 p=1006920 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:52:07,742 p=1006920 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:52:07,745 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:07,787 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 11:52:07,793 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 11:52:07,811 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 11:52:07,812 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 11:52:07,819 p=1006920 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 11:52:07,821 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:08,505 p=1006920 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 11:52:09,336 p=1006920 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 11:52:10,083 p=1006920 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 11:52:10,853 p=1006920 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 11:52:11,570 p=1006920 u=root n=ansible | changed: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 11:52:11,611 p=1006920 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 11:52:11,847 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:11,878 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:11,936 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:11,981 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:12,760 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:52:12,782 p=1006920 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 11:52:12,837 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:12,875 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:12,960 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:13,008 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:14,250 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:52:14,272 p=1006920 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 11:52:14,383 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:14,437 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:14,488 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:14,515 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:15,813 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:52:15,827 p=1006920 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 11:52:15,891 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:15,998 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:16,044 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:16,099 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:20,790 p=1006920 u=root n=ansible | changed: [bda]
2025-09-29 11:52:20,820 p=1006920 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 11:52:20,912 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:20,963 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:21,047 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:21,072 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 11:52:21,081 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:21,317 p=1006920 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 11:52:21,470 p=1006920 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n║ End Time: 2025-09-29T08:20:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:52:21,526 p=1006920 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n║ End Time: 2025-09-29T08:20:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:52:21,549 p=1006920 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:20:32Z                      ║\n║ End Time: 2025-09-29T08:20:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:52:21,555 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:21,598 p=1006920 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T08:20:31Z                      ║\n║ End Time: 2025-09-29T08:20:35Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:52:21,622 p=1006920 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 11:52:21,690 p=1006920 u=root n=ansible | skipping: [host1]
2025-09-29 11:52:21,738 p=1006920 u=root n=ansible | skipping: [host2]
2025-09-29 11:52:21,785 p=1006920 u=root n=ansible | skipping: [host3]
2025-09-29 11:52:21,838 p=1006920 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'siem_base_path' is undefined. 'siem_base_path' is undefined\n\nThe error appears to be in '/root/ansible/main-playbook.yml': line 91, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n    - name: Create cluster verification script\n      ^ here\n"}
2025-09-29 11:52:21,855 p=1006920 u=root n=ansible | skipping: [lb1]
2025-09-29 11:52:22,012 p=1006920 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 11:52:22,013 p=1006920 u=root n=ansible | bda                        : ok=61   changed=18   unreachable=0    failed=1    skipped=12   rescued=1    ignored=1   
2025-09-29 11:52:22,013 p=1006920 u=root n=ansible | host1                      : ok=53   changed=17   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:52:22,013 p=1006920 u=root n=ansible | host2                      : ok=53   changed=16   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:52:22,013 p=1006920 u=root n=ansible | host3                      : ok=53   changed=16   unreachable=0    failed=0    skipped=21   rescued=1    ignored=1   
2025-09-29 11:52:22,013 p=1006920 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=31   rescued=0    ignored=0   
2025-09-29 11:59:48,154 p=1041355 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************************************************************************************************************************************
2025-09-29 11:59:48,193 p=1041355 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
2025-09-29 11:59:51,811 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 11:59:52,036 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 11:59:52,042 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 11:59:52,049 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 11:59:52,056 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 11:59:52,076 p=1041355 u=root n=ansible | TASK [Set deployment facts] *****************************************************************************************************************************************************************************************************************
2025-09-29 11:59:52,163 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 11:59:52,212 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 11:59:52,246 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 11:59:52,248 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 11:59:52,278 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 11:59:52,293 p=1041355 u=root n=ansible | TASK [Display deployment banner] ************************************************************************************************************************************************************************************************************
2025-09-29 11:59:52,366 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, HOT, MASTER, ML, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:59:52,418 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ IP: 192.168.166.131                       ║\n║ Groups: DATA_NODES, ELASTICSEARCH, MASTER, SF, WARM, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:59:52,494 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ IP: 192.168.166.132                       ║\n║ Groups: COLD, DATA_NODES, ELASTICSEARCH, HOT, MASTER, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:29:50Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:59:52,497 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ IP: 192.168.166.130                       ║\n║ Groups: BDA, ELASTICSEARCH, MASTER, ML, SF, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:59:52,560 p=1041355 u=root n=ansible | ok: [lb1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║              APK SIEM ELK CLUSTER DEPLOYMENT                 ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: lb1                               ║\n║ IP: 192.168.166.134                       ║\n║ Groups: LB, physical_hosts                       ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 11:59:52,752 p=1041355 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************************************************************************************************************************************
2025-09-29 11:59:55,016 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 11:59:55,033 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 11:59:55,128 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 11:59:55,276 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 11:59:55,404 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 11:59:55,419 p=1041355 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************************************************************************************************************************************
2025-09-29 11:59:55,509 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 11:59:55,559 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 11:59:55,615 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 11:59:55,626 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 11:59:55,652 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 11:59:55,682 p=1041355 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************************************************************************************************************************************
2025-09-29 11:59:55,724 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 11:59:55,748 p=1041355 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************************************************************************************************************************************
2025-09-29 11:59:55,778 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 11:59:55,797 p=1041355 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************************************************************************************************************************************
2025-09-29 11:59:55,835 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 11:59:55,866 p=1041355 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************************************************************************************************************************************
2025-09-29 11:59:57,082 p=1041355 u=root n=ansible | changed: [host1]
2025-09-29 11:59:57,112 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 11:59:57,120 p=1041355 u=root n=ansible | changed: [lb1]
2025-09-29 11:59:57,171 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 11:59:57,209 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 11:59:57,234 p=1041355 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************************************************************************************************************************************
2025-09-29 11:59:57,256 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 11:59:57,274 p=1041355 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************************************************************************************************************************************
2025-09-29 11:59:59,343 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 11:59:59,409 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 11:59:59,439 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 11:59:59,450 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 11:59:59,524 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 11:59:59,546 p=1041355 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************************************************************************************************************************************
2025-09-29 12:00:00,810 p=1041355 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 12:00:00,812 p=1041355 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 12:00:00,838 p=1041355 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 12:00:00,849 p=1041355 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 12:00:00,950 p=1041355 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 12:00:01,557 p=1041355 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 12:00:01,573 p=1041355 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 12:00:01,598 p=1041355 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 12:00:01,620 p=1041355 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 12:00:01,628 p=1041355 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 12:00:01,752 p=1041355 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************************************************************************************************************************************
2025-09-29 12:00:01,885 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:01,948 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:01,952 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:01,953 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:01,971 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:01,996 p=1041355 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************************************************************************************************************************************
2025-09-29 12:00:02,823 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:02,865 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:02,973 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:02,993 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:03,028 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:03,054 p=1041355 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************************************************************************************************************************************
2025-09-29 12:00:03,833 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:03,851 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:03,891 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:03,969 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:04,012 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:04,045 p=1041355 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************************************************************************************************************************************
2025-09-29 12:00:04,168 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:04,217 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:04,262 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:04,264 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:04,319 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:04,354 p=1041355 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************************************************************************************************************************************
2025-09-29 12:00:04,415 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:04,458 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:04,512 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:04,571 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:05,289 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:05,307 p=1041355 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************************************************************************************************************************************
2025-09-29 12:00:05,420 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:05,485 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:05,548 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:05,551 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:05,701 p=1041355 u=root n=ansible | ok: [lb1]
2025-09-29 12:00:05,727 p=1041355 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************************************************************************************************************************************
2025-09-29 12:00:05,811 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:05,862 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:05,892 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:05,908 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:05,949 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:06,021 p=1041355 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************************************************************************************************************************************
2025-09-29 12:00:06,195 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:06,239 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:06,240 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:06,318 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:06,323 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:06,366 p=1041355 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 12:00:06,487 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:06,505 p=1041355 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 12:00:06,562 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:06,576 p=1041355 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 12:00:06,633 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:06,649 p=1041355 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 12:00:06,710 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:06,727 p=1041355 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************************************************************************************************************************************
2025-09-29 12:00:06,748 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:06,766 p=1041355 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************************************************************************************************************************************
2025-09-29 12:00:06,931 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 12:00:06,934 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 12:00:06,952 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 12:00:06,956 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 12:00:06,976 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:06,997 p=1041355 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************************************************************************************************************************************
2025-09-29 12:00:07,118 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:07,183 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:07,189 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:07,216 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:07,265 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:07,288 p=1041355 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************************************************************************************************************************************
2025-09-29 12:00:07,515 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:07,516 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:07,581 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:07,644 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:07,685 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:07,723 p=1041355 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************************************************************************************************************************************
2025-09-29 12:00:07,926 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:07,977 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:08,030 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:08,080 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:08,177 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:08,195 p=1041355 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************************************************************************************************************************************
2025-09-29 12:00:08,299 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:08,354 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:08,413 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:08,430 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:08,432 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:08,446 p=1041355 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************************************************************************************************************************************
2025-09-29 12:00:08,551 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 12:00:08,598 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 12:00:08,617 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:08,626 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 12:00:08,655 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 12:00:08,671 p=1041355 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************************************************************************************************************************************
2025-09-29 12:00:08,912 p=1041355 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 12:00:08,919 p=1041355 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 12:00:08,929 p=1041355 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 12:00:08,939 p=1041355 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 12:00:08,941 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:09,565 p=1041355 u=root n=ansible | ok: [host1] => (item=host1)
2025-09-29 12:00:09,615 p=1041355 u=root n=ansible | ok: [host3] => (item=host1)
2025-09-29 12:00:09,625 p=1041355 u=root n=ansible | ok: [host2] => (item=host1)
2025-09-29 12:00:09,702 p=1041355 u=root n=ansible | ok: [bda] => (item=host1)
2025-09-29 12:00:10,406 p=1041355 u=root n=ansible | ok: [host3] => (item=host2)
2025-09-29 12:00:10,500 p=1041355 u=root n=ansible | ok: [host2] => (item=host2)
2025-09-29 12:00:10,541 p=1041355 u=root n=ansible | ok: [host1] => (item=host2)
2025-09-29 12:00:10,824 p=1041355 u=root n=ansible | ok: [bda] => (item=host2)
2025-09-29 12:00:11,204 p=1041355 u=root n=ansible | ok: [host3] => (item=host3)
2025-09-29 12:00:11,332 p=1041355 u=root n=ansible | ok: [host1] => (item=host3)
2025-09-29 12:00:11,377 p=1041355 u=root n=ansible | ok: [host2] => (item=host3)
2025-09-29 12:00:11,461 p=1041355 u=root n=ansible | ok: [bda] => (item=host3)
2025-09-29 12:00:12,053 p=1041355 u=root n=ansible | ok: [host3] => (item=bda)
2025-09-29 12:00:12,248 p=1041355 u=root n=ansible | ok: [host2] => (item=bda)
2025-09-29 12:00:12,254 p=1041355 u=root n=ansible | ok: [host1] => (item=bda)
2025-09-29 12:00:12,353 p=1041355 u=root n=ansible | ok: [bda] => (item=bda)
2025-09-29 12:00:12,386 p=1041355 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************************************************************************************************************************************
2025-09-29 12:00:12,708 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:12,828 p=1041355 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 12:00:12,881 p=1041355 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************************************************************************************************************************************
2025-09-29 12:00:13,768 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:13,811 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:13,825 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:13,919 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:14,703 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:14,711 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:14,796 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:14,803 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:14,837 p=1041355 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************************************************************************************************************************************
2025-09-29 12:00:14,977 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:15,081 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:15,099 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:15,161 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:15,188 p=1041355 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************************************************************************************************************************************
2025-09-29 12:00:17,148 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:17,150 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:17,169 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:17,251 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:17,275 p=1041355 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************************************************************************************************************************************
2025-09-29 12:00:18,749 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:18,822 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:18,838 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:18,923 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:18,941 p=1041355 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************************************************************************************************************************************
2025-09-29 12:00:19,879 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:20,101 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:20,104 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:20,141 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:20,159 p=1041355 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************************************************************************************************************************************
2025-09-29 12:00:20,269 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 12:00:20,293 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 12:00:20,318 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 12:00:20,333 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 12:00:20,354 p=1041355 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************************************************************************************************************************************
2025-09-29 12:00:21,173 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:21,368 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:21,393 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:21,456 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:21,536 p=1041355 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************************************************************************************************************************************
2025-09-29 12:00:21,703 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:21,729 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:21,733 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:21,793 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:21,816 p=1041355 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************************************************************************************************************************************
2025-09-29 12:00:21,966 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:22,000 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:22,000 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:22,103 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:22,168 p=1041355 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************************************************************************************************************************************
2025-09-29 12:00:23,025 p=1041355 u=root n=ansible | changed: [host1]
2025-09-29 12:00:23,067 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 12:00:23,070 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 12:00:23,285 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 12:00:23,314 p=1041355 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************************************************************************************************************************************
2025-09-29 12:00:24,218 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 12:00:24,240 p=1041355 u=root n=ansible | changed: [host1]
2025-09-29 12:00:24,284 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 12:00:24,451 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:24,464 p=1041355 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************************************************************************************************************************************
2025-09-29 12:00:25,861 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:25,864 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:25,904 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:25,919 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:25,945 p=1041355 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************************************************************************************************************************************
2025-09-29 12:00:26,904 p=1041355 u=root n=ansible | changed: [host1]
2025-09-29 12:00:26,954 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 12:00:26,971 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 12:00:26,980 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 12:00:27,007 p=1041355 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************************************************************************************************************************************
2025-09-29 12:00:27,259 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 12:00:27,283 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 12:00:27,321 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 12:00:27,335 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network Mode: host (no Docker network needed)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance\n\n⚠️  Important: Ensure /etc/hosts is configured with all cluster hostnames!"
}
2025-09-29 12:00:27,366 p=1041355 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************************************************************************************************************************************
2025-09-29 12:00:27,737 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 12:00:27,744 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-29 12:00:27,746 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:28,356 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:28,487 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:28,551 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:28,669 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 12:00:29,099 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:29,279 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:29,389 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:29,491 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:29,514 p=1041355 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************************************************************************************************************************************
2025-09-29 12:00:29,766 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:30,398 p=1041355 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 12:00:30,428 p=1041355 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 12:00:30,577 p=1041355 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 12:00:30,646 p=1041355 u=root n=ansible | ok: [bda] => (item=bda-master/data)
2025-09-29 12:00:31,135 p=1041355 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 12:00:31,206 p=1041355 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 12:00:31,532 p=1041355 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 12:00:31,557 p=1041355 u=root n=ansible | ok: [bda] => (item=bda-master/logs)
2025-09-29 12:00:32,082 p=1041355 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 12:00:32,113 p=1041355 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 12:00:32,257 p=1041355 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 12:00:32,367 p=1041355 u=root n=ansible | ok: [bda] => (item=bda-master/config)
2025-09-29 12:00:32,975 p=1041355 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 12:00:32,999 p=1041355 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 12:00:33,068 p=1041355 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 12:00:33,819 p=1041355 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 12:00:33,874 p=1041355 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 12:00:33,957 p=1041355 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 12:00:34,742 p=1041355 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 12:00:34,865 p=1041355 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 12:00:34,872 p=1041355 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 12:00:35,709 p=1041355 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 12:00:35,727 p=1041355 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 12:00:35,807 p=1041355 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 12:00:36,573 p=1041355 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 12:00:36,698 p=1041355 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 12:00:36,783 p=1041355 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 12:00:37,476 p=1041355 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 12:00:37,566 p=1041355 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 12:00:37,680 p=1041355 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 12:00:37,723 p=1041355 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************************************************************************************************************************************
2025-09-29 12:00:38,038 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:38,154 p=1041355 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3, bda
2025-09-29 12:00:38,259 p=1041355 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************************************************************************************************************************************
2025-09-29 12:00:39,850 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:39,877 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:39,882 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:40,036 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:40,058 p=1041355 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************************************************************************************************************************************
2025-09-29 12:00:40,995 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:41,027 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:41,042 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:41,099 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 12:00:41,951 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 12:00:41,965 p=1041355 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 12:00:41,984 p=1041355 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 12:00:42,016 p=1041355 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 12:00:42,047 p=1041355 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************************************************************************************************************************************
2025-09-29 12:00:42,939 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:43,035 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:43,186 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:43,387 p=1041355 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:43,912 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:44,108 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:44,204 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:44,879 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:45,061 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:45,215 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:45,236 p=1041355 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************************************************************************************************************************************
2025-09-29 12:00:46,160 p=1041355 u=root n=ansible | ok: [host1]
2025-09-29 12:00:46,279 p=1041355 u=root n=ansible | ok: [host2]
2025-09-29 12:00:46,314 p=1041355 u=root n=ansible | ok: [host3]
2025-09-29 12:00:46,470 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:00:46,492 p=1041355 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************************************************************************************************************************************
2025-09-29 12:00:46,668 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:46,701 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:46,702 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:46,776 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:46,811 p=1041355 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************************************************************************************************************************************
2025-09-29 12:00:47,005 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:47,047 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:47,048 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:47,123 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:47,147 p=1041355 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************************************************************************************************************************************
2025-09-29 12:00:47,346 p=1041355 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 12:00:47,406 p=1041355 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 12:00:47,407 p=1041355 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 12:00:47,420 p=1041355 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 12:00:47,422 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:00:47,471 p=1041355 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 12:00:47,473 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:00:47,476 p=1041355 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 12:00:47,479 p=1041355 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 12:00:47,482 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:00:47,611 p=1041355 u=root n=ansible | skipping: [bda] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 12:00:47,613 p=1041355 u=root n=ansible | skipping: [bda]
2025-09-29 12:00:47,632 p=1041355 u=root n=ansible | TASK [install_elastic : Create OpenSSL config for each node with hostname SANs] *************************************************************************************************************************************************************
2025-09-29 12:00:49,147 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:49,551 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:49,580 p=1041355 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:49,629 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:50,902 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:51,114 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:51,188 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:52,539 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:52,733 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:52,798 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:52,832 p=1041355 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************************************************************************************************************************************
2025-09-29 12:00:53,838 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:53,842 p=1041355 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:53,881 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:53,893 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:54,703 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:54,856 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:54,877 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:55,552 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:55,666 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:55,793 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:55,814 p=1041355 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node with config] *************************************************************************************************************************************************************
2025-09-29 12:00:56,689 p=1041355 u=root n=ansible | ok: [bda] => (item={'name': 'bda-master', 'roles': ['master', 'transform', 'ml', 'ingest', 'data_content'], 'port_offset': 0, 'group_membership': ['BDA', 'MASTER', 'SF', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:56,839 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:56,871 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:56,883 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:57,672 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:57,735 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:57,780 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 12:00:58,465 p=1041355 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 12:00:58,493 p=1041355 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:58,495 p=1041355 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 12:00:58,519 p=1041355 u=root n=ansible | TASK [install_elastic : Sign certificate for each node with extensions] *********************************************************************************************************************************************************************
2025-09-29 12:00:58,736 p=1041355 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'node' is undefined. 'node' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 115, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Sign certificate for each node with extensions\n  ^ here\n"}
2025-09-29 12:00:58,746 p=1041355 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'node' is undefined. 'node' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 115, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Sign certificate for each node with extensions\n  ^ here\n"}
2025-09-29 12:00:58,807 p=1041355 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'node' is undefined. 'node' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 115, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Sign certificate for each node with extensions\n  ^ here\n"}
2025-09-29 12:00:58,843 p=1041355 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'node' is undefined. 'node' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml': line 115, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Sign certificate for each node with extensions\n  ^ here\n"}
2025-09-29 12:00:58,921 p=1041355 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************************************************************************************************************************************
2025-09-29 12:00:59,003 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:59,103 p=1041355 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************************************************************************************************************************************
2025-09-29 12:00:59,187 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:59,302 p=1041355 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 12:00:59,377 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:59,484 p=1041355 u=root n=ansible | TASK [install_elastic : Debug - Display template variables] *********************************************************************************************************************************************************************************
2025-09-29 12:00:59,552 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:59,665 p=1041355 u=root n=ansible | TASK [install_elastic : Debug - Check if template file exists] ******************************************************************************************************************************************************************************
2025-09-29 12:00:59,772 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:00:59,874 p=1041355 u=root n=ansible | TASK [install_elastic : Debug - Display template check result] ******************************************************************************************************************************************************************************
2025-09-29 12:00:59,964 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,083 p=1041355 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************************************************************************************************************************************
2025-09-29 12:01:00,154 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,246 p=1041355 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 12:01:00,317 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,406 p=1041355 u=root n=ansible | TASK [install_elastic : Display docker-compose file details] ********************************************************************************************************************************************************************************
2025-09-29 12:01:00,481 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,574 p=1041355 u=root n=ansible | TASK [install_elastic : Show first 50 lines of docker-compose file if it exists] ************************************************************************************************************************************************************
2025-09-29 12:01:00,666 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,782 p=1041355 u=root n=ansible | TASK [install_elastic : Display docker-compose content preview] *****************************************************************************************************************************************************************************
2025-09-29 12:01:00,865 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:00,964 p=1041355 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 12:01:01,046 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:01,184 p=1041355 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************************************************************************************************************************************
2025-09-29 12:01:01,270 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:01,392 p=1041355 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************************************************************************************************************************************
2025-09-29 12:01:01,443 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:01,549 p=1041355 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************************************************************************************************************************************
2025-09-29 12:01:01,625 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:01,740 p=1041355 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************************************************************************************************************************************
2025-09-29 12:01:01,821 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:01,927 p=1041355 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************************************************************************************************************************************
2025-09-29 12:01:02,003 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:02,031 p=1041355 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************************************************************************************************************************************
2025-09-29 12:01:02,192 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 12:01:02,247 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 12:01:02,251 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 12:01:02,277 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 12:01:02,399 p=1041355 u=root n=ansible | TASK [install_kibana : Initialize Kibana variables] *****************************************************************************************************************************************************************************************
2025-09-29 12:01:02,465 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:02,555 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:02,598 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:02,657 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:02,658 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:01:02,679 p=1041355 u=root n=ansible | TASK [install_kibana : Check if Elasticsearch is running (optional)] ************************************************************************************************************************************************************************
2025-09-29 12:01:02,826 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:02,866 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:02,869 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:02,893 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:04,219 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:01:04,246 p=1041355 u=root n=ansible | TASK [install_kibana : Create Kibana directory structure] ***********************************************************************************************************************************************************************************
2025-09-29 12:01:04,351 p=1041355 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana) 
2025-09-29 12:01:04,354 p=1041355 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 12:01:04,358 p=1041355 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana) 
2025-09-29 12:01:04,360 p=1041355 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 12:01:04,362 p=1041355 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/data) 
2025-09-29 12:01:04,364 p=1041355 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 12:01:04,366 p=1041355 u=root n=ansible | skipping: [host1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 12:01:04,368 p=1041355 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 12:01:04,373 p=1041355 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/config) 
2025-09-29 12:01:04,375 p=1041355 u=root n=ansible | skipping: [host2] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 12:01:04,395 p=1041355 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana) 
2025-09-29 12:01:04,411 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:04,419 p=1041355 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/data) 
2025-09-29 12:01:04,422 p=1041355 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 12:01:04,424 p=1041355 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/config) 
2025-09-29 12:01:04,428 p=1041355 u=root n=ansible | skipping: [host3] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 12:01:04,486 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:04,489 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:04,675 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana) 
2025-09-29 12:01:04,698 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/data) 
2025-09-29 12:01:04,710 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/logs) 
2025-09-29 12:01:04,721 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/config) 
2025-09-29 12:01:04,734 p=1041355 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/kibana/certs) 
2025-09-29 12:01:04,736 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:05,467 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana)
2025-09-29 12:01:06,343 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/data)
2025-09-29 12:01:07,247 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/logs)
2025-09-29 12:01:08,163 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/config)
2025-09-29 12:01:09,019 p=1041355 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/kibana/certs)
2025-09-29 12:01:09,040 p=1041355 u=root n=ansible | TASK [install_kibana : Copy CA certificate if it exists] ************************************************************************************************************************************************************************************
2025-09-29 12:01:09,106 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:09,188 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:09,262 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:09,370 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:10,173 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:01:10,190 p=1041355 u=root n=ansible | TASK [install_kibana : Generate simple Kibana configuration] ********************************************************************************************************************************************************************************
2025-09-29 12:01:10,284 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:10,338 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:10,386 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:10,442 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:11,983 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:01:12,004 p=1041355 u=root n=ansible | TASK [install_kibana : Generate simple Kibana Docker Compose] *******************************************************************************************************************************************************************************
2025-09-29 12:01:12,062 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:12,144 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:12,180 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:12,221 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:13,607 p=1041355 u=root n=ansible | ok: [bda]
2025-09-29 12:01:13,641 p=1041355 u=root n=ansible | TASK [install_kibana : Deploy Kibana (will start when Elasticsearch is ready)] **************************************************************************************************************************************************************
2025-09-29 12:01:13,777 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:13,818 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:13,888 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:13,940 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:19,309 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 12:01:19,356 p=1041355 u=root n=ansible | TASK [install_kibana : Display Kibana installation status] **********************************************************************************************************************************************************************************
2025-09-29 12:01:19,502 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:19,566 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:19,620 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:19,674 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "✅ Kibana Installation Complete!\n================================\nAccess: http://192.168.166.130:5601\n(Will be available when Elasticsearch is running)\n"
}
2025-09-29 12:01:19,687 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:20,024 p=1041355 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************************************************************************************************************************************
2025-09-29 12:01:20,889 p=1041355 u=root n=ansible | changed: [bda]
2025-09-29 12:01:20,987 p=1041355 u=root n=ansible | changed: [host2]
2025-09-29 12:01:20,999 p=1041355 u=root n=ansible | changed: [host3]
2025-09-29 12:01:21,018 p=1041355 u=root n=ansible | TASK [Display deployment completion status] *************************************************************************************************************************************************************************************************
2025-09-29 12:01:21,226 p=1041355 u=root n=ansible | ok: [host1] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host1                               ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n║ End Time: 2025-09-29T08:29:53Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 12:01:21,261 p=1041355 u=root n=ansible | ok: [host2] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host2                               ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n║ End Time: 2025-09-29T08:29:54Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.131:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.131:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 12:01:21,262 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:21,287 p=1041355 u=root n=ansible | ok: [host3] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: host3                               ║\n║ Start Time: 2025-09-29T08:29:50Z                      ║\n║ End Time: 2025-09-29T08:29:54Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 3 nodes ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.132:9200  ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.132:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 12:01:21,352 p=1041355 u=root n=ansible | ok: [bda] => {
    "msg": "╔══════════════════════════════════════════════════════════════╗\n║                DEPLOYMENT COMPLETED SUCCESSFULLY             ║\n╠══════════════════════════════════════════════════════════════╣\n║ Host: bda                               ║\n║ Start Time: 2025-09-29T08:29:51Z                      ║\n║ End Time: 2025-09-29T08:29:53Z                    ║\n║                                                              ║\n║ Services Deployed:                                           ║\n║ ✅ Elasticsearch: 1 nodes ║\n║ ✅ Kibana: Management Interface                              ║\n║                                                              ║\n║ Access Information:                                          ║\n║ 🔗 Elasticsearch: https://192.168.166.130:9200  ║\n║ 🔗 Kibana: https://192.168.166.130:5601          ║\n║ 👤 Username: elastic                                         ║\n║ 🔑 Password: [Check inventory file]                          ║\n║                                                              ║\n║ Management Commands:                                         ║\n║ # Verify cluster health:                                     ║\n║ curl -k -u elastic:PASSWORD \\                               ║\n║   https://192.168.166.130:9200/_cluster/health        ║\n║                                                              ║\n║ # Check containers:                                          ║\n║ docker ps                                                    ║\n║                                                              ║\n║ # View logs:                                                 ║\n║ docker logs [container-name]                                ║\n╚══════════════════════════════════════════════════════════════╝\n"
}
2025-09-29 12:01:21,387 p=1041355 u=root n=ansible | TASK [Create cluster verification script] ***************************************************************************************************************************************************************************************************
2025-09-29 12:01:21,465 p=1041355 u=root n=ansible | skipping: [host1]
2025-09-29 12:01:21,536 p=1041355 u=root n=ansible | skipping: [host2]
2025-09-29 12:01:21,593 p=1041355 u=root n=ansible | skipping: [host3]
2025-09-29 12:01:21,597 p=1041355 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'siem_base_path' is undefined. 'siem_base_path' is undefined\n\nThe error appears to be in '/root/ansible/main-playbook.yml': line 91, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n    - name: Create cluster verification script\n      ^ here\n"}
2025-09-29 12:01:21,736 p=1041355 u=root n=ansible | skipping: [lb1]
2025-09-29 12:01:21,842 p=1041355 u=root n=ansible | PLAY RECAP **********************************************************************************************************************************************************************************************************************************
2025-09-29 12:01:21,843 p=1041355 u=root n=ansible | bda                        : ok=54   changed=6    unreachable=0    failed=1    skipped=8    rescued=1    ignored=0   
2025-09-29 12:01:21,843 p=1041355 u=root n=ansible | host1                      : ok=45   changed=4    unreachable=0    failed=0    skipped=17   rescued=1    ignored=0   
2025-09-29 12:01:21,844 p=1041355 u=root n=ansible | host2                      : ok=46   changed=6    unreachable=0    failed=0    skipped=17   rescued=1    ignored=0   
2025-09-29 12:01:21,845 p=1041355 u=root n=ansible | host3                      : ok=46   changed=6    unreachable=0    failed=0    skipped=17   rescued=1    ignored=0   
2025-09-29 12:01:21,845 p=1041355 u=root n=ansible | lb1                        : ok=14   changed=1    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
2025-09-29 14:58:59,318 p=1675156 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************
2025-09-29 14:58:59,379 p=1675156 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-29 14:59:02,824 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:03,063 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:03,213 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:03,218 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:03,222 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:03,406 p=1675156 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-29 14:59:05,527 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:05,540 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:05,658 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:05,967 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:06,057 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:06,081 p=1675156 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-29 14:59:06,200 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:06,263 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:06,309 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:06,314 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:06,361 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:06,387 p=1675156 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-29 14:59:06,422 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:06,440 p=1675156 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-29 14:59:06,468 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:06,486 p=1675156 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-29 14:59:06,516 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:06,526 p=1675156 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-29 14:59:07,669 p=1675156 u=root n=ansible | changed: [lb1]
2025-09-29 14:59:07,672 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:07,702 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:07,704 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:07,761 p=1675156 u=root n=ansible | changed: [bda]
2025-09-29 14:59:07,780 p=1675156 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-29 14:59:07,800 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:07,818 p=1675156 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-29 14:59:09,724 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:09,733 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:09,757 p=1675156 u=root n=ansible | changed: [bda]
2025-09-29 14:59:09,864 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:09,871 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:09,899 p=1675156 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-29 14:59:11,115 p=1675156 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 14:59:11,131 p=1675156 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 14:59:11,133 p=1675156 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 14:59:11,137 p=1675156 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 14:59:11,159 p=1675156 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 14:59:11,842 p=1675156 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 14:59:11,856 p=1675156 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 14:59:11,869 p=1675156 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 14:59:11,956 p=1675156 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 14:59:11,974 p=1675156 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 14:59:12,064 p=1675156 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-29 14:59:12,184 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:12,240 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:12,297 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:12,301 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:12,331 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:12,359 p=1675156 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-29 14:59:13,225 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:13,262 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:13,314 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:13,400 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:13,519 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:13,543 p=1675156 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-29 14:59:14,410 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:14,530 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:14,586 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:14,590 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:14,615 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:14,627 p=1675156 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-29 14:59:14,701 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:14,776 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:14,844 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:14,846 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:14,895 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:14,922 p=1675156 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-29 14:59:14,989 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:15,042 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:15,105 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:15,157 p=1675156 u=root n=ansible | skipping: [bda]
2025-09-29 14:59:16,037 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:16,073 p=1675156 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-29 14:59:16,140 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:16,283 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:16,344 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:16,356 p=1675156 u=root n=ansible | skipping: [bda]
2025-09-29 14:59:16,407 p=1675156 u=root n=ansible | ok: [lb1]
2025-09-29 14:59:16,430 p=1675156 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-29 14:59:16,536 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:16,570 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:16,613 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:16,616 p=1675156 u=root n=ansible | skipping: [bda]
2025-09-29 14:59:16,656 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:16,763 p=1675156 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************
2025-09-29 14:59:17,034 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:17,038 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:17,038 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:17,078 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:17,140 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:17,164 p=1675156 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 14:59:17,247 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:17,263 p=1675156 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 14:59:17,296 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:17,304 p=1675156 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 14:59:17,336 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:17,346 p=1675156 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 14:59:17,382 p=1675156 u=root n=ansible | skipping: [bda]
2025-09-29 14:59:17,390 p=1675156 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 14:59:17,404 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:17,413 p=1675156 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************
2025-09-29 14:59:17,570 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 14:59:17,582 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:17,607 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 14:59:17,608 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 14:59:17,646 p=1675156 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 14:59:17,657 p=1675156 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************
2025-09-29 14:59:17,817 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:17,821 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:17,822 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:17,845 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:17,884 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:17,901 p=1675156 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************
2025-09-29 14:59:18,103 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:18,136 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:18,261 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:18,294 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:18,351 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:18,362 p=1675156 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************
2025-09-29 14:59:18,538 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:18,616 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:18,742 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:18,779 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:18,786 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:18,830 p=1675156 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************
2025-09-29 14:59:18,925 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:18,969 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:18,971 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:19,019 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:19,032 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:19,061 p=1675156 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************
2025-09-29 14:59:19,238 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 14:59:19,282 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 14:59:19,304 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 14:59:19,313 p=1675156 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 14:59:19,317 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:19,334 p=1675156 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************
2025-09-29 14:59:19,672 p=1675156 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 14:59:19,674 p=1675156 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 14:59:19,682 p=1675156 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 14:59:19,684 p=1675156 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 14:59:19,685 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:20,337 p=1675156 u=root n=ansible | ok: [host1] => (item=host1)
2025-09-29 14:59:20,370 p=1675156 u=root n=ansible | ok: [host2] => (item=host1)
2025-09-29 14:59:20,400 p=1675156 u=root n=ansible | ok: [host3] => (item=host1)
2025-09-29 14:59:20,615 p=1675156 u=root n=ansible | ok: [bda] => (item=host1)
2025-09-29 14:59:21,331 p=1675156 u=root n=ansible | ok: [host3] => (item=host2)
2025-09-29 14:59:21,358 p=1675156 u=root n=ansible | ok: [host2] => (item=host2)
2025-09-29 14:59:21,367 p=1675156 u=root n=ansible | ok: [host1] => (item=host2)
2025-09-29 14:59:21,532 p=1675156 u=root n=ansible | ok: [bda] => (item=host2)
2025-09-29 14:59:22,259 p=1675156 u=root n=ansible | ok: [host2] => (item=host3)
2025-09-29 14:59:22,308 p=1675156 u=root n=ansible | ok: [host3] => (item=host3)
2025-09-29 14:59:22,463 p=1675156 u=root n=ansible | ok: [host1] => (item=host3)
2025-09-29 14:59:22,784 p=1675156 u=root n=ansible | ok: [bda] => (item=host3)
2025-09-29 14:59:23,165 p=1675156 u=root n=ansible | ok: [host2] => (item=bda)
2025-09-29 14:59:23,347 p=1675156 u=root n=ansible | ok: [host3] => (item=bda)
2025-09-29 14:59:23,438 p=1675156 u=root n=ansible | ok: [host1] => (item=bda)
2025-09-29 14:59:23,924 p=1675156 u=root n=ansible | ok: [bda] => (item=bda)
2025-09-29 14:59:23,947 p=1675156 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************
2025-09-29 14:59:24,133 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:24,218 p=1675156 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host3, bda, host2
2025-09-29 14:59:24,287 p=1675156 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-29 14:59:25,115 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:25,297 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:25,314 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:25,428 p=1675156 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:25,945 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:26,148 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:26,213 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:26,560 p=1675156 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:26,593 p=1675156 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************
2025-09-29 14:59:26,735 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:26,762 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:26,818 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:26,823 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:26,846 p=1675156 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************
2025-09-29 14:59:28,452 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:28,638 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:28,716 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:28,739 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:28,769 p=1675156 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************
2025-09-29 14:59:30,126 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:30,141 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:30,307 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:30,349 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:30,371 p=1675156 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************
2025-09-29 14:59:31,293 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:31,304 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:31,352 p=1675156 u=root n=ansible | ok: [bda]
2025-09-29 14:59:31,447 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:31,473 p=1675156 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************
2025-09-29 14:59:31,696 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 14:59:31,732 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 14:59:31,733 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 14:59:31,798 p=1675156 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 14:59:31,820 p=1675156 u=root n=ansible | TASK [install_elastic : Check if Docker network exists] *************************************************************
2025-09-29 14:59:32,034 p=1675156 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'docker_network_name' is undefined. 'docker_network_name' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/system-config.yml': line 44, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n# UPDATED: Create custom Docker bridge network for this host\n- name: Check if Docker network exists\n  ^ here\n"}
2025-09-29 14:59:32,858 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:32,886 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:32,900 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:32,917 p=1675156 u=root n=ansible | TASK [install_elastic : Remove existing Docker network if subnet doesn't match] *************************************
2025-09-29 14:59:34,401 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:34,493 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:34,505 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:34,537 p=1675156 u=root n=ansible | TASK [install_elastic : Create custom Docker bridge network for Elasticsearch] **************************************
2025-09-29 14:59:36,658 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:36,660 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:36,704 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:36,736 p=1675156 u=root n=ansible | TASK [install_elastic : Display Docker network information] *********************************************************
2025-09-29 14:59:36,923 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.25.0.0/16\nStatus: Created\n"
}
2025-09-29 14:59:36,930 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.27.0.0/16\nStatus: Created\n"
}
2025-09-29 14:59:36,945 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.26.0.0/16\nStatus: Created\n"
}
2025-09-29 14:59:36,966 p=1675156 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-29 14:59:37,897 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:37,930 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:38,041 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:38,073 p=1675156 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-29 14:59:38,226 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:38,260 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:38,323 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:38,350 p=1675156 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-29 14:59:38,463 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 14:59:38,528 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 14:59:38,583 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 14:59:38,614 p=1675156 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-29 14:59:39,564 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:39,565 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:39,608 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:39,626 p=1675156 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-29 14:59:40,673 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:40,690 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:40,705 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:40,717 p=1675156 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-29 14:59:42,029 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:42,075 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:42,103 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:42,124 p=1675156 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-29 14:59:43,116 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 14:59:43,303 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 14:59:43,330 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 14:59:43,354 p=1675156 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************
2025-09-29 14:59:43,499 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.25.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 14:59:43,540 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.26.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 14:59:43,575 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.27.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 14:59:43,601 p=1675156 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************
2025-09-29 14:59:43,852 p=1675156 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 14:59:43,860 p=1675156 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-29 14:59:43,862 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:44,635 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:44,652 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:44,726 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 14:59:45,394 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:45,444 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:45,564 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:45,605 p=1675156 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-29 14:59:45,851 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:46,640 p=1675156 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 14:59:46,644 p=1675156 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 14:59:46,759 p=1675156 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 14:59:47,472 p=1675156 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 14:59:47,614 p=1675156 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 14:59:47,627 p=1675156 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 14:59:48,273 p=1675156 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 14:59:48,448 p=1675156 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 14:59:48,530 p=1675156 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 14:59:49,046 p=1675156 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 14:59:49,364 p=1675156 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 14:59:49,482 p=1675156 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 14:59:49,964 p=1675156 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 14:59:50,257 p=1675156 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 14:59:50,426 p=1675156 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 14:59:50,855 p=1675156 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 14:59:51,210 p=1675156 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 14:59:51,363 p=1675156 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 14:59:51,662 p=1675156 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 14:59:52,045 p=1675156 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 14:59:52,437 p=1675156 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 14:59:52,548 p=1675156 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 14:59:52,929 p=1675156 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 14:59:53,293 p=1675156 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 14:59:53,488 p=1675156 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 14:59:53,896 p=1675156 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 14:59:54,109 p=1675156 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 14:59:54,138 p=1675156 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************
2025-09-29 14:59:54,407 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 14:59:54,505 p=1675156 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3
2025-09-29 14:59:54,700 p=1675156 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-29 14:59:55,955 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 14:59:56,102 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 14:59:56,160 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 14:59:56,176 p=1675156 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************
2025-09-29 14:59:57,063 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:57,200 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:57,264 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 14:59:57,972 p=1675156 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 14:59:58,015 p=1675156 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 14:59:58,225 p=1675156 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 14:59:58,242 p=1675156 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************
2025-09-29 14:59:59,131 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 14:59:59,190 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 14:59:59,191 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 14:59:59,866 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:00,080 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:00,235 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:00,821 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:01,044 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:01,140 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:01,161 p=1675156 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-29 15:00:02,121 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:02,217 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:02,252 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:02,279 p=1675156 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-29 15:00:02,423 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:02,469 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:02,519 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:02,538 p=1675156 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-29 15:00:02,658 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:02,687 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:02,708 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:02,731 p=1675156 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************
2025-09-29 15:00:02,928 p=1675156 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:00:02,978 p=1675156 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:00:03,000 p=1675156 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:00:03,003 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:03,009 p=1675156 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:00:03,051 p=1675156 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:00:03,053 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:03,079 p=1675156 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:00:03,082 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:03,103 p=1675156 u=root n=ansible | TASK [install_elastic : Create OpenSSL config for each node with hostname SANs] *************************************
2025-09-29 15:00:04,584 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:04,658 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:04,664 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:06,052 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:06,112 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:06,290 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:07,501 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:07,524 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:07,748 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:07,775 p=1675156 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************
2025-09-29 15:00:08,749 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:08,809 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:08,814 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:09,658 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:09,848 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:09,861 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:10,544 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:10,552 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:10,994 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:11,018 p=1675156 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node with config] *************************************
2025-09-29 15:00:11,956 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:12,068 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:12,124 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:12,758 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:12,852 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:13,042 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:13,505 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:13,759 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:13,850 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:13,865 p=1675156 u=root n=ansible | TASK [install_elastic : Sign certificate for each node with extensions] *********************************************
2025-09-29 15:00:14,774 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:14,843 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:14,881 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:15,600 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:15,775 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:15,796 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:16,517 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:16,623 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:16,659 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:16,688 p=1675156 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************
2025-09-29 15:00:17,647 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:17,713 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:17,792 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:18,454 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:18,503 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:18,589 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:19,213 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:19,359 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:19,417 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:19,437 p=1675156 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************
2025-09-29 15:00:20,410 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:20,422 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:20,538 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:21,171 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:21,293 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:21,406 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:22,015 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:22,085 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:22,469 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:22,484 p=1675156 u=root n=ansible | TASK [install_elastic : Remove CSR files for each node] *************************************************************
2025-09-29 15:00:23,546 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:23,581 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:23,702 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:24,392 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:24,608 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:24,627 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:25,318 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:25,556 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:25,710 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:25,738 p=1675156 u=root n=ansible | TASK [install_elastic : Remove config files for each node] **********************************************************
2025-09-29 15:00:26,730 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:26,877 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:26,958 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:27,640 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:27,763 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:27,845 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:28,577 p=1675156 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:28,659 p=1675156 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:28,680 p=1675156 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:28,704 p=1675156 u=root n=ansible | TASK [install_elastic : Verify certificates include hostname SANs] **************************************************
2025-09-29 15:00:29,616 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:29,872 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:29,905 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:30,615 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:30,872 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:30,891 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:00:31,630 p=1675156 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:31,763 p=1675156 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:00:31,820 p=1675156 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:00:31,849 p=1675156 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************
2025-09-29 15:00:32,062 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host1.apk-siem.local\n\nCertificate verification results:\n- master-host1: OK\n- hot-host1: OK\n- ml-host1: OK\n"
}
2025-09-29 15:00:32,108 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host2.apk-siem.local\n\nCertificate verification results:\n- master-host2: OK\n- warm-host2: OK\n- sf-host2: OK\n"
}
2025-09-29 15:00:32,148 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host3.apk-siem.local\n\nCertificate verification results:\n- master-host3: OK\n- hot-host3: OK\n- cold-host3: OK\n"
}
2025-09-29 15:00:32,172 p=1675156 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************
2025-09-29 15:00:32,482 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:34,018 p=1675156 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 15:00:34,126 p=1675156 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 15:00:34,194 p=1675156 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 15:00:35,644 p=1675156 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 15:00:35,963 p=1675156 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 15:00:35,979 p=1675156 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 15:00:37,239 p=1675156 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 15:00:37,566 p=1675156 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 15:00:37,723 p=1675156 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 15:00:37,761 p=1675156 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-29 15:00:38,021 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:39,287 p=1675156 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 15:00:39,459 p=1675156 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 15:00:39,596 p=1675156 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 15:00:40,782 p=1675156 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 15:00:41,077 p=1675156 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 15:00:41,188 p=1675156 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 15:00:42,475 p=1675156 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 15:00:42,613 p=1675156 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 15:00:42,804 p=1675156 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 15:00:42,822 p=1675156 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 15:00:43,042 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:44,454 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 15:00:44,590 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 15:00:44,590 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 15:00:44,618 p=1675156 u=root n=ansible | TASK [install_elastic : Debug - Display template variables] *********************************************************
2025-09-29 15:00:44,794 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host2.apk-siem.local\n\nNodes to deploy:\n- master-host2: roles=master, heap=2g, offset=0\n- warm-host2: roles=data_warm, heap=4g, offset=1\n- sf-host2: roles=ingest,transform, heap=3g, offset=2\n"
}
2025-09-29 15:00:44,808 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host1.apk-siem.local\n\nNodes to deploy:\n- master-host1: roles=master, heap=2g, offset=0\n- hot-host1: roles=data_hot,data_content, heap=4g, offset=1\n- ml-host1: roles=ml,transform, heap=3g, offset=2\n"
}
2025-09-29 15:00:44,844 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:44,898 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host3.apk-siem.local\n\nNodes to deploy:\n- master-host3: roles=master, heap=2g, offset=0\n- hot-host3: roles=data_hot,data_content, heap=4g, offset=1\n- cold-host3: roles=data_cold, heap=2g, offset=2\n"
}
2025-09-29 15:00:44,929 p=1675156 u=root n=ansible | TASK [install_elastic : Debug - Check if template file exists] ******************************************************
2025-09-29 15:00:45,212 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:45,875 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:45,911 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:45,934 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:45,951 p=1675156 u=root n=ansible | TASK [install_elastic : Debug - Display template check result] ******************************************************
2025-09-29 15:00:46,056 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: True\n"
}
2025-09-29 15:00:46,136 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: False\n"
}
2025-09-29 15:00:46,162 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:46,181 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: False\n"
}
2025-09-29 15:00:46,205 p=1675156 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 15:00:46,459 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:47,992 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:48,085 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:48,130 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:48,151 p=1675156 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 15:00:48,391 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:49,181 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:49,243 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:49,348 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:49,381 p=1675156 u=root n=ansible | TASK [install_elastic : Display docker-compose file details] ********************************************************
2025-09-29 15:00:49,610 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11087 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:00:49,613 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11093 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:00:49,659 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11114 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:00:49,660 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:49,703 p=1675156 u=root n=ansible | TASK [install_elastic : Show first 50 lines of docker-compose file if it exists] ************************************
2025-09-29 15:00:49,994 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:50,748 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:50,791 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:50,811 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:50,836 p=1675156 u=root n=ansible | TASK [install_elastic : Display docker-compose content preview] *****************************************************
2025-09-29 15:00:51,032 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host1:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host1",
        "    hostname: master-host1.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.130:9200:9200\"",
        "      - \"192.168.166.130:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host1\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host1.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:00:51,072 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host2:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host2",
        "    hostname: master-host2.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.131:9200:9200\"",
        "      - \"192.168.166.131:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host2\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host2.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:00:51,121 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:51,125 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host3:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host3",
        "    hostname: master-host3.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.132:9200:9200\"",
        "      - \"192.168.166.132:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host3\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host3.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:00:51,151 p=1675156 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 15:00:51,325 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:51,356 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:51,393 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:51,397 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:51,419 p=1675156 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 15:00:51,640 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:52,448 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:52,499 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:52,500 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:52,524 p=1675156 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 15:00:52,686 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:52,749 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:52,751 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:52,773 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:52,802 p=1675156 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 15:00:53,014 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:00:53,113 p=1675156 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3
2025-09-29 15:00:53,233 p=1675156 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************
2025-09-29 15:00:53,365 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNetwork: elastic (172.25.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:00:53,408 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNetwork: elastic (172.26.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:00:53,409 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNetwork: elastic (172.27.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:00:53,432 p=1675156 u=root n=ansible | TASK [install_elastic : Verify Docker network exists] ***************************************************************
2025-09-29 15:00:54,416 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:54,495 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:54,542 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:54,582 p=1675156 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************
2025-09-29 15:00:55,506 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:00:55,596 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:00:55,663 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:00:55,702 p=1675156 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************
2025-09-29 15:00:55,869 p=1675156 u=root n=ansible | skipping: [host1]
2025-09-29 15:00:55,895 p=1675156 u=root n=ansible | skipping: [host2]
2025-09-29 15:00:55,941 p=1675156 u=root n=ansible | skipping: [host3]
2025-09-29 15:00:55,966 p=1675156 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************
2025-09-29 15:00:58,711 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 15:00:58,722 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 15:00:58,764 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 15:00:58,782 p=1675156 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 15:01:02,609 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 15:01:02,705 p=1675156 u=root n=ansible | changed: [host1]
2025-09-29 15:01:02,846 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 15:01:02,870 p=1675156 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************
2025-09-29 15:01:05,479 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:01:05,712 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:01:05,787 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:01:05,816 p=1675156 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************
2025-09-29 15:02:07,005 p=1675156 u=root n=ansible | ok: [host1]
2025-09-29 15:02:07,065 p=1675156 u=root n=ansible | ok: [host3]
2025-09-29 15:02:07,088 p=1675156 u=root n=ansible | ok: [host2]
2025-09-29 15:02:07,110 p=1675156 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************
2025-09-29 15:02:07,251 p=1675156 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:02:07,449 p=1675156 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:02:07,450 p=1675156 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:02:07,510 p=1675156 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************
2025-09-29 15:02:07,572 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:02:07,630 p=1675156 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-29 15:02:07,695 p=1675156 u=root n=ansible | skipping: [lb1]
2025-09-29 15:02:07,716 p=1675156 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-29 15:02:07,889 p=1675156 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:02:07,921 p=1675156 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:02:07,947 p=1675156 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:02:07,973 p=1675156 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:02:08,208 p=1675156 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************
2025-09-29 15:02:09,188 p=1675156 u=root n=ansible | changed: [host2]
2025-09-29 15:02:09,192 p=1675156 u=root n=ansible | changed: [host3]
2025-09-29 15:02:09,987 p=1675156 u=root n=ansible | changed: [bda]
2025-09-29 15:02:10,183 p=1675156 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-29 15:02:10,183 p=1675156 u=root n=ansible | bda                        : ok=27   changed=3    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-29 15:02:10,183 p=1675156 u=root n=ansible | host1                      : ok=73   changed=13   unreachable=0    failed=0    skipped=11   rescued=1    ignored=0   
2025-09-29 15:02:10,184 p=1675156 u=root n=ansible | host2                      : ok=74   changed=15   unreachable=0    failed=0    skipped=11   rescued=1    ignored=0   
2025-09-29 15:02:10,184 p=1675156 u=root n=ansible | host3                      : ok=74   changed=15   unreachable=0    failed=0    skipped=11   rescued=1    ignored=0   
2025-09-29 15:02:10,184 p=1675156 u=root n=ansible | lb1                        : ok=12   changed=1    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
2025-09-29 15:06:46,029 p=1717900 u=root n=ansible | PLAY [APK SIEM ELK Cluster Installer - Fixed & Simplified Version] **************************************************
2025-09-29 15:06:46,090 p=1717900 u=root n=ansible | TASK [Gathering Facts] **********************************************************************************************
2025-09-29 15:06:49,335 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:06:49,485 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:06:49,614 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:06:50,028 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:06:50,071 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:06:50,286 p=1717900 u=root n=ansible | TASK [pre_checks : Check ALL hosts are reacheable before start the installation] ************************************
2025-09-29 15:06:52,351 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:06:52,480 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:06:52,528 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:06:52,715 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:06:52,785 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:06:52,807 p=1717900 u=root n=ansible | TASK [pre_checks : Check if LB group has hosts] *********************************************************************
2025-09-29 15:06:52,919 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:06:52,969 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:06:53,023 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:06:53,026 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:06:53,065 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:06:53,081 p=1717900 u=root n=ansible | TASK [pre_checks : Fail if LB group has hosts but SF group has fewer than 2 hosts] **********************************
2025-09-29 15:06:53,103 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:06:53,111 p=1717900 u=root n=ansible | TASK [pre_checks : Fail if required groups are missing] *************************************************************
2025-09-29 15:06:53,126 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:06:53,135 p=1717900 u=root n=ansible | TASK [pre_checks : Fail if Lshell_user_password is not defined] *****************************************************
2025-09-29 15:06:53,155 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:06:53,165 p=1717900 u=root n=ansible | TASK [pre_checks : Check if playbook is running as root] ************************************************************
2025-09-29 15:06:54,281 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:06:54,376 p=1717900 u=root n=ansible | changed: [lb1]
2025-09-29 15:06:54,393 p=1717900 u=root n=ansible | changed: [bda]
2025-09-29 15:06:54,489 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:06:55,491 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:06:55,507 p=1717900 u=root n=ansible | TASK [pre_checks : Stop play if not running as root] ****************************************************************
2025-09-29 15:06:55,520 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:06:55,535 p=1717900 u=root n=ansible | TASK [pre_checks : Deploy sysctl configuration] *********************************************************************
2025-09-29 15:06:57,400 p=1717900 u=root n=ansible | changed: [bda]
2025-09-29 15:06:57,559 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:06:57,570 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:06:57,642 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:06:57,850 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:06:57,867 p=1717900 u=root n=ansible | TASK [pre_checks : increase the size of the bash history] ***********************************************************
2025-09-29 15:06:58,956 p=1717900 u=root n=ansible | ok: [host2] => (item=HISTSIZE)
2025-09-29 15:06:58,990 p=1717900 u=root n=ansible | ok: [host1] => (item=HISTSIZE)
2025-09-29 15:06:59,004 p=1717900 u=root n=ansible | ok: [bda] => (item=HISTSIZE)
2025-09-29 15:06:59,013 p=1717900 u=root n=ansible | ok: [lb1] => (item=HISTSIZE)
2025-09-29 15:06:59,098 p=1717900 u=root n=ansible | ok: [host3] => (item=HISTSIZE)
2025-09-29 15:06:59,590 p=1717900 u=root n=ansible | ok: [host1] => (item=HISTFILESIZE)
2025-09-29 15:06:59,706 p=1717900 u=root n=ansible | ok: [lb1] => (item=HISTFILESIZE)
2025-09-29 15:06:59,727 p=1717900 u=root n=ansible | ok: [bda] => (item=HISTFILESIZE)
2025-09-29 15:06:59,787 p=1717900 u=root n=ansible | ok: [host2] => (item=HISTFILESIZE)
2025-09-29 15:06:59,804 p=1717900 u=root n=ansible | ok: [host3] => (item=HISTFILESIZE)
2025-09-29 15:06:59,962 p=1717900 u=root n=ansible | TASK [add-new-node : Ensure role is run only on ELASTICSEARCH hosts] ************************************************
2025-09-29 15:07:00,022 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:00,125 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:00,128 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:00,134 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:00,160 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:00,184 p=1717900 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch binary is present] ******************************************************
2025-09-29 15:07:01,000 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:01,138 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:01,167 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:01,184 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:01,296 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:01,313 p=1717900 u=root n=ansible | TASK [add-new-node : Check if Elasticsearch service configuration file exists] **************************************
2025-09-29 15:07:02,087 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:02,195 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:02,253 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:02,257 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:02,299 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:02,315 p=1717900 u=root n=ansible | TASK [add-new-node : Set fact for nodes where Elasticsearch is not installed] ***************************************
2025-09-29 15:07:02,422 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:02,468 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:02,510 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:02,516 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:02,557 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:02,577 p=1717900 u=root n=ansible | TASK [add-new-node : Check if /var/www/elastic directory exists] ****************************************************
2025-09-29 15:07:02,676 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:02,715 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:02,754 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:02,759 p=1717900 u=root n=ansible | skipping: [bda]
2025-09-29 15:07:03,703 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:03,735 p=1717900 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to true if directory does not exist] ****************************************
2025-09-29 15:07:03,894 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:03,960 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:03,998 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:04,006 p=1717900 u=root n=ansible | skipping: [bda]
2025-09-29 15:07:04,030 p=1717900 u=root n=ansible | ok: [lb1]
2025-09-29 15:07:04,057 p=1717900 u=root n=ansible | TASK [add-new-node : Set fact is_new_lb to false if directory exists] ***********************************************
2025-09-29 15:07:04,219 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:04,279 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:04,354 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:04,356 p=1717900 u=root n=ansible | skipping: [bda]
2025-09-29 15:07:04,388 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:04,532 p=1717900 u=root n=ansible | TASK [install_elastic : Initialize deployment variables] ************************************************************
2025-09-29 15:07:04,686 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:04,721 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:04,733 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:04,791 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:04,803 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:04,814 p=1717900 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 15:07:04,864 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:04,874 p=1717900 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 15:07:04,920 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:04,931 p=1717900 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 15:07:04,971 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:04,980 p=1717900 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 15:07:05,017 p=1717900 u=root n=ansible | skipping: [bda]
2025-09-29 15:07:05,027 p=1717900 u=root n=ansible | TASK [install_elastic : Skip hosts without Elasticsearch configuration] *********************************************
2025-09-29 15:07:05,042 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:05,053 p=1717900 u=root n=ansible | TASK [install_elastic : Display node configuration] *****************************************************************
2025-09-29 15:07:05,191 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Elasticsearch Configuration for host2:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host2.apk-siem.local\nNodes to deploy: 3\n- master-host2: master (2g)\n- warm-host2: data_warm (4g)\n- sf-host2: ingest,transform (3g)\n"
}
2025-09-29 15:07:05,210 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Elasticsearch Configuration for host1:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host1.apk-siem.local\nNodes to deploy: 3\n- master-host1: master (2g)\n- hot-host1: data_hot,data_content (4g)\n- ml-host1: ml,transform (3g)\n"
}
2025-09-29 15:07:05,215 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:05,237 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Elasticsearch Configuration for host3:\n==================================================\nHas elasticsearch_nodes: True\nHostname: host3.apk-siem.local\nNodes to deploy: 3\n- master-host3: master (2g)\n- hot-host3: data_hot,data_content (4g)\n- cold-host3: data_cold (2g)\n"
}
2025-09-29 15:07:05,294 p=1717900 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Elasticsearch Configuration for bda:\n==================================================\nHas elasticsearch_nodes: True\nHostname: bda.apk-siem.local\nNodes to deploy: 1\n- bda-master: master,transform,ml,ingest,data_content (4g)\n"
}
2025-09-29 15:07:05,306 p=1717900 u=root n=ansible | TASK [install_elastic : Set deployment configuration variables] *****************************************************
2025-09-29 15:07:05,475 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:05,508 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:05,512 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:05,539 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:05,562 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:05,587 p=1717900 u=root n=ansible | TASK [install_elastic : Build hostname-based discovery list] ********************************************************
2025-09-29 15:07:05,841 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:05,843 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:05,943 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:05,949 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:05,954 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:05,974 p=1717900 u=root n=ansible | TASK [install_elastic : Build complete seed hosts list across all master hosts] *************************************
2025-09-29 15:07:06,236 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:06,254 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:06,291 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:06,370 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:06,426 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:06,445 p=1717900 u=root n=ansible | TASK [install_elastic : Create formatted seed hosts string] *********************************************************
2025-09-29 15:07:06,635 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:06,638 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:06,639 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:06,661 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:06,716 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:06,730 p=1717900 u=root n=ansible | TASK [install_elastic : Display discovery configuration] ************************************************************
2025-09-29 15:07:06,910 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 15:07:06,950 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 15:07:06,976 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 15:07:07,000 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:07,022 p=1717900 u=root n=ansible | ok: [bda] => {
    "msg": "📋 Discovery Configuration:\nSeed hosts:  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , [, ', h, o, s, t, 1, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 2, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', h, o, s, t, 3, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ,,  , ', b, d, a, ., a, p, k, -, s, i, e, m, ., l, o, c, a, l, :, 9, 3, 0, 0, ', ]\nMaster nodes: master-host1, master-host2, master-host3, bda-master\n"
}
2025-09-29 15:07:07,044 p=1717900 u=root n=ansible | TASK [install_elastic : Add all cluster hosts to /etc/hosts] ********************************************************
2025-09-29 15:07:07,294 p=1717900 u=root n=ansible | skipping: [lb1] => (item=host1) 
2025-09-29 15:07:07,305 p=1717900 u=root n=ansible | skipping: [lb1] => (item=host2) 
2025-09-29 15:07:07,318 p=1717900 u=root n=ansible | skipping: [lb1] => (item=host3) 
2025-09-29 15:07:07,325 p=1717900 u=root n=ansible | skipping: [lb1] => (item=bda) 
2025-09-29 15:07:07,327 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:08,070 p=1717900 u=root n=ansible | ok: [host1] => (item=host1)
2025-09-29 15:07:08,112 p=1717900 u=root n=ansible | ok: [host2] => (item=host1)
2025-09-29 15:07:08,178 p=1717900 u=root n=ansible | ok: [host3] => (item=host1)
2025-09-29 15:07:08,308 p=1717900 u=root n=ansible | ok: [bda] => (item=host1)
2025-09-29 15:07:08,917 p=1717900 u=root n=ansible | ok: [host1] => (item=host2)
2025-09-29 15:07:09,104 p=1717900 u=root n=ansible | ok: [host2] => (item=host2)
2025-09-29 15:07:09,114 p=1717900 u=root n=ansible | ok: [host3] => (item=host2)
2025-09-29 15:07:09,180 p=1717900 u=root n=ansible | ok: [bda] => (item=host2)
2025-09-29 15:07:09,851 p=1717900 u=root n=ansible | ok: [host1] => (item=host3)
2025-09-29 15:07:10,054 p=1717900 u=root n=ansible | ok: [host3] => (item=host3)
2025-09-29 15:07:10,143 p=1717900 u=root n=ansible | ok: [bda] => (item=host3)
2025-09-29 15:07:10,230 p=1717900 u=root n=ansible | ok: [host2] => (item=host3)
2025-09-29 15:07:10,803 p=1717900 u=root n=ansible | ok: [host1] => (item=bda)
2025-09-29 15:07:11,035 p=1717900 u=root n=ansible | ok: [bda] => (item=bda)
2025-09-29 15:07:11,090 p=1717900 u=root n=ansible | ok: [host3] => (item=bda)
2025-09-29 15:07:11,271 p=1717900 u=root n=ansible | ok: [host2] => (item=bda)
2025-09-29 15:07:11,290 p=1717900 u=root n=ansible | TASK [install_elastic : Configure system for Elasticsearch Docker] **************************************************
2025-09-29 15:07:11,523 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:11,665 p=1717900 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/system-config.yml for host1, host2, host3, bda
2025-09-29 15:07:11,726 p=1717900 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directories] ***********************************************************
2025-09-29 15:07:12,516 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:12,518 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:12,814 p=1717900 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:12,851 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:13,268 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:13,306 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:13,604 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:13,606 p=1717900 u=root n=ansible | ok: [bda] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:13,636 p=1717900 u=root n=ansible | TASK [install_elastic : Detect OS family] ***************************************************************************
2025-09-29 15:07:13,762 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:13,791 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:13,837 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:13,893 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:13,911 p=1717900 u=root n=ansible | TASK [install_elastic : Start Docker service] ***********************************************************************
2025-09-29 15:07:15,795 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:15,909 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:15,935 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:15,979 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:15,994 p=1717900 u=root n=ansible | TASK [install_elastic : Add current user to docker group] ***********************************************************
2025-09-29 15:07:17,505 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:17,509 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:17,570 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:17,572 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:17,589 p=1717900 u=root n=ansible | TASK [install_elastic : Test Docker installation] *******************************************************************
2025-09-29 15:07:18,573 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:18,596 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:18,687 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:18,813 p=1717900 u=root n=ansible | ok: [bda]
2025-09-29 15:07:18,833 p=1717900 u=root n=ansible | TASK [install_elastic : Display Docker version] *********************************************************************
2025-09-29 15:07:19,026 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 15:07:19,072 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 15:07:19,108 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 15:07:19,163 p=1717900 u=root n=ansible | ok: [bda] => {
    "msg": "Docker installed: Docker version 25.0.3, build 4debf41"
}
2025-09-29 15:07:19,175 p=1717900 u=root n=ansible | TASK [install_elastic : Check if Docker network exists] *************************************************************
2025-09-29 15:07:19,439 p=1717900 u=root n=ansible | fatal: [bda]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'docker_network_name' is undefined. 'docker_network_name' is undefined\n\nThe error appears to be in '/root/ansible/roles/install_elastic/tasks/system-config.yml': line 44, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n# UPDATED: Create custom Docker bridge network for this host\n- name: Check if Docker network exists\n  ^ here\n"}
2025-09-29 15:07:20,161 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:20,169 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:20,195 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:20,225 p=1717900 u=root n=ansible | TASK [install_elastic : Remove existing Docker network if subnet doesn't match] *************************************
2025-09-29 15:07:20,386 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:21,304 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:07:21,908 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:07:21,937 p=1717900 u=root n=ansible | TASK [install_elastic : Create custom Docker bridge network for Elasticsearch] **************************************
2025-09-29 15:07:24,019 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:07:24,209 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:07:25,381 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:07:25,396 p=1717900 u=root n=ansible | TASK [install_elastic : Display Docker network information] *********************************************************
2025-09-29 15:07:25,561 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.30.0.0/16\nStatus: Created\n"
}
2025-09-29 15:07:25,568 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.31.0.0/16\nStatus: Created\n"
}
2025-09-29 15:07:25,587 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "🌐 Docker Network Configuration\n==============================\nNetwork Name: elastic\nSubnet: 172.32.0.0/16\nStatus: Created\n"
}
2025-09-29 15:07:25,610 p=1717900 u=root n=ansible | TASK [install_elastic : Check current vm.max_map_count] *************************************************************
2025-09-29 15:07:26,510 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:26,546 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:26,568 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:26,592 p=1717900 u=root n=ansible | TASK [install_elastic : Set vm.max_map_count using shell command] ***************************************************
2025-09-29 15:07:26,703 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:26,762 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:26,775 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:26,795 p=1717900 u=root n=ansible | TASK [install_elastic : Make vm.max_map_count persistent] ***********************************************************
2025-09-29 15:07:26,928 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:26,945 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:27,033 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:27,054 p=1717900 u=root n=ansible | TASK [install_elastic : Set vm.swappiness] **************************************************************************
2025-09-29 15:07:27,853 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:07:28,080 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:07:28,155 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:07:28,169 p=1717900 u=root n=ansible | TASK [install_elastic : Make vm.swappiness persistent] **************************************************************
2025-09-29 15:07:28,975 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:07:29,028 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:07:29,123 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:07:29,154 p=1717900 u=root n=ansible | TASK [install_elastic : Configure system limits for Elasticsearch] **************************************************
2025-09-29 15:07:30,450 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:30,470 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:30,568 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:30,596 p=1717900 u=root n=ansible | TASK [install_elastic : Disable swap temporarily] *******************************************************************
2025-09-29 15:07:31,417 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:07:31,580 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:07:31,709 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:07:31,720 p=1717900 u=root n=ansible | TASK [install_elastic : Display system configuration status] ********************************************************
2025-09-29 15:07:31,857 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.30.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 15:07:31,884 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.32.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 15:07:31,897 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "✅ System Configuration Complete\n==============================\n- Docker: Docker version 25.0.3, build 4debf41\n- Network: elastic (172.31.0.0/16)\n- Kernel: vm.max_map_count set to 262144\n- Limits: File and memory limits configured\n- Swap: Disabled for optimal performance"
}
2025-09-29 15:07:31,911 p=1717900 u=root n=ansible | TASK [install_elastic : Create Elasticsearch directory structure] ***************************************************
2025-09-29 15:07:32,160 p=1717900 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch) 
2025-09-29 15:07:32,169 p=1717900 u=root n=ansible | skipping: [lb1] => (item=/usr/share/siem/elasticsearch/certs) 
2025-09-29 15:07:32,172 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:32,927 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:32,965 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:33,081 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch)
2025-09-29 15:07:33,775 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:33,823 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:34,092 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:34,120 p=1717900 u=root n=ansible | TASK [install_elastic : Create node-specific directories] ***********************************************************
2025-09-29 15:07:34,388 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:35,030 p=1717900 u=root n=ansible | ok: [host1] => (item=master-host1/data)
2025-09-29 15:07:35,200 p=1717900 u=root n=ansible | ok: [host3] => (item=master-host3/data)
2025-09-29 15:07:35,219 p=1717900 u=root n=ansible | ok: [host2] => (item=master-host2/data)
2025-09-29 15:07:35,828 p=1717900 u=root n=ansible | ok: [host1] => (item=master-host1/logs)
2025-09-29 15:07:36,041 p=1717900 u=root n=ansible | ok: [host2] => (item=master-host2/logs)
2025-09-29 15:07:36,079 p=1717900 u=root n=ansible | ok: [host3] => (item=master-host3/logs)
2025-09-29 15:07:36,821 p=1717900 u=root n=ansible | ok: [host1] => (item=master-host1/config)
2025-09-29 15:07:36,956 p=1717900 u=root n=ansible | ok: [host3] => (item=master-host3/config)
2025-09-29 15:07:36,970 p=1717900 u=root n=ansible | ok: [host2] => (item=master-host2/config)
2025-09-29 15:07:37,658 p=1717900 u=root n=ansible | ok: [host1] => (item=hot-host1/data)
2025-09-29 15:07:37,737 p=1717900 u=root n=ansible | ok: [host2] => (item=warm-host2/data)
2025-09-29 15:07:37,773 p=1717900 u=root n=ansible | ok: [host3] => (item=hot-host3/data)
2025-09-29 15:07:38,451 p=1717900 u=root n=ansible | ok: [host1] => (item=hot-host1/logs)
2025-09-29 15:07:38,532 p=1717900 u=root n=ansible | ok: [host2] => (item=warm-host2/logs)
2025-09-29 15:07:38,839 p=1717900 u=root n=ansible | ok: [host3] => (item=hot-host3/logs)
2025-09-29 15:07:39,273 p=1717900 u=root n=ansible | ok: [host1] => (item=hot-host1/config)
2025-09-29 15:07:39,348 p=1717900 u=root n=ansible | ok: [host2] => (item=warm-host2/config)
2025-09-29 15:07:39,722 p=1717900 u=root n=ansible | ok: [host3] => (item=hot-host3/config)
2025-09-29 15:07:40,077 p=1717900 u=root n=ansible | ok: [host1] => (item=ml-host1/data)
2025-09-29 15:07:40,211 p=1717900 u=root n=ansible | ok: [host2] => (item=sf-host2/data)
2025-09-29 15:07:40,586 p=1717900 u=root n=ansible | ok: [host3] => (item=cold-host3/data)
2025-09-29 15:07:40,820 p=1717900 u=root n=ansible | ok: [host1] => (item=ml-host1/logs)
2025-09-29 15:07:41,146 p=1717900 u=root n=ansible | ok: [host2] => (item=sf-host2/logs)
2025-09-29 15:07:41,487 p=1717900 u=root n=ansible | ok: [host3] => (item=cold-host3/logs)
2025-09-29 15:07:41,507 p=1717900 u=root n=ansible | ok: [host1] => (item=ml-host1/config)
2025-09-29 15:07:41,991 p=1717900 u=root n=ansible | ok: [host2] => (item=sf-host2/config)
2025-09-29 15:07:42,316 p=1717900 u=root n=ansible | ok: [host3] => (item=cold-host3/config)
2025-09-29 15:07:42,336 p=1717900 u=root n=ansible | TASK [install_elastic : Setup SSL certificates for all nodes] *******************************************************
2025-09-29 15:07:42,547 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:07:42,707 p=1717900 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-ssl-setup.yml for host1, host2, host3
2025-09-29 15:07:42,783 p=1717900 u=root n=ansible | TASK [install_elastic : Install OpenSSL] ****************************************************************************
2025-09-29 15:07:44,140 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:44,240 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:44,328 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:44,349 p=1717900 u=root n=ansible | TASK [install_elastic : Create certificate directories] *************************************************************
2025-09-29 15:07:45,305 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:45,324 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:45,382 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs)
2025-09-29 15:07:46,114 p=1717900 u=root n=ansible | ok: [host1] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 15:07:46,176 p=1717900 u=root n=ansible | ok: [host2] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 15:07:46,238 p=1717900 u=root n=ansible | ok: [host3] => (item=/usr/share/siem/elasticsearch/certs/ca)
2025-09-29 15:07:46,259 p=1717900 u=root n=ansible | TASK [install_elastic : Create node certificate directories] ********************************************************
2025-09-29 15:07:47,248 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:47,252 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:47,262 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:48,047 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:48,103 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:48,169 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:48,753 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:48,945 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:49,008 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:49,040 p=1717900 u=root n=ansible | TASK [install_elastic : Check if CA certificate exists] *************************************************************
2025-09-29 15:07:50,012 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:07:50,052 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:07:50,107 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:07:50,127 p=1717900 u=root n=ansible | TASK [install_elastic : Generate CA private key] ********************************************************************
2025-09-29 15:07:50,319 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:50,345 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:50,346 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:50,358 p=1717900 u=root n=ansible | TASK [install_elastic : Generate CA certificate] ********************************************************************
2025-09-29 15:07:50,489 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:50,573 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:50,573 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:50,591 p=1717900 u=root n=ansible | TASK [install_elastic : Set CA permissions] *************************************************************************
2025-09-29 15:07:50,763 p=1717900 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:07:50,818 p=1717900 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:07:50,897 p=1717900 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.key', 'mode': '0600'}) 
2025-09-29 15:07:50,901 p=1717900 u=root n=ansible | skipping: [host2] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:07:50,905 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:07:50,913 p=1717900 u=root n=ansible | skipping: [host1] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:07:50,915 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:07:51,000 p=1717900 u=root n=ansible | skipping: [host3] => (item={'path': '/usr/share/siem/elasticsearch/certs/ca/ca.crt', 'mode': '0644'}) 
2025-09-29 15:07:51,002 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:07:51,020 p=1717900 u=root n=ansible | TASK [install_elastic : Create OpenSSL config for each node with hostname SANs] *************************************
2025-09-29 15:07:52,592 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:52,742 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:52,809 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:54,382 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:54,385 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:54,636 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:55,978 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:56,048 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:56,499 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:56,530 p=1717900 u=root n=ansible | TASK [install_elastic : Generate private key for each node] *********************************************************
2025-09-29 15:07:57,444 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:57,459 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:57,534 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:58,218 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:58,444 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:58,453 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:07:59,054 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:07:59,329 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:59,369 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:07:59,389 p=1717900 u=root n=ansible | TASK [install_elastic : Generate certificate request for each node with config] *************************************
2025-09-29 15:08:00,343 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:00,382 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:00,483 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:01,146 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:01,266 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:01,338 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:02,108 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:02,165 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:02,388 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:02,405 p=1717900 u=root n=ansible | TASK [install_elastic : Sign certificate for each node with extensions] *********************************************
2025-09-29 15:08:03,362 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:03,455 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:03,508 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:04,303 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:04,313 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:04,315 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:05,122 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:05,124 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:05,240 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:05,262 p=1717900 u=root n=ansible | TASK [install_elastic : Set key permissions] ************************************************************************
2025-09-29 15:08:06,093 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:06,232 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:06,311 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:06,925 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:07,156 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:07,159 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:07,704 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:07,995 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:08,003 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:08,027 p=1717900 u=root n=ansible | TASK [install_elastic : Set certificate permissions] ****************************************************************
2025-09-29 15:08:09,044 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:09,135 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:09,182 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:09,786 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:10,053 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:10,073 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:10,591 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:10,875 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:10,933 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:10,958 p=1717900 u=root n=ansible | TASK [install_elastic : Remove CSR files for each node] *************************************************************
2025-09-29 15:08:11,959 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:11,966 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:12,039 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:12,830 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:12,892 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:12,970 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:13,550 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:13,703 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:13,823 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:13,851 p=1717900 u=root n=ansible | TASK [install_elastic : Remove config files for each node] **********************************************************
2025-09-29 15:08:14,775 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:14,866 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:14,994 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:15,663 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:15,745 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:16,058 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:16,539 p=1717900 u=root n=ansible | changed: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:16,608 p=1717900 u=root n=ansible | changed: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:16,976 p=1717900 u=root n=ansible | changed: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:17,014 p=1717900 u=root n=ansible | TASK [install_elastic : Verify certificates include hostname SANs] **************************************************
2025-09-29 15:08:18,134 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'master-host2', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:18,157 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'master-host1', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:18,216 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'master-host3', 'roles': ['master'], 'port_offset': 0, 'group_membership': ['MASTER', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:19,036 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'warm-host2', 'roles': ['data_warm'], 'port_offset': 1, 'group_membership': ['WARM', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:19,184 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'hot-host3', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:19,239 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'hot-host1', 'roles': ['data_hot', 'data_content'], 'port_offset': 1, 'group_membership': ['HOT', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '4g'})
2025-09-29 15:08:19,901 p=1717900 u=root n=ansible | ok: [host2] => (item={'name': 'sf-host2', 'roles': ['ingest', 'transform'], 'port_offset': 2, 'group_membership': ['SF', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:20,055 p=1717900 u=root n=ansible | ok: [host3] => (item={'name': 'cold-host3', 'roles': ['data_cold'], 'port_offset': 2, 'group_membership': ['COLD', 'DATA_NODES', 'ELASTICSEARCH'], 'heap_size': '2g'})
2025-09-29 15:08:20,139 p=1717900 u=root n=ansible | ok: [host1] => (item={'name': 'ml-host1', 'roles': ['ml', 'transform'], 'port_offset': 2, 'group_membership': ['ML', 'ELASTICSEARCH'], 'heap_size': '3g'})
2025-09-29 15:08:20,169 p=1717900 u=root n=ansible | TASK [install_elastic : Display certificate setup completion] *******************************************************
2025-09-29 15:08:20,339 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host1.apk-siem.local\n\nCertificate verification results:\n- master-host1: OK\n- hot-host1: OK\n- ml-host1: OK\n"
}
2025-09-29 15:08:20,353 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host2.apk-siem.local\n\nCertificate verification results:\n- master-host2: OK\n- warm-host2: OK\n- sf-host2: OK\n"
}
2025-09-29 15:08:20,360 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "✅ SSL certificates created for 3 nodes\nCA: /usr/share/siem/elasticsearch/certs/ca/ca.crt\nHostnames included in SANs: host3.apk-siem.local\n\nCertificate verification results:\n- master-host3: OK\n- hot-host3: OK\n- cold-host3: OK\n"
}
2025-09-29 15:08:20,376 p=1717900 u=root n=ansible | TASK [install_elastic : Generate Elasticsearch configurations for each node] ****************************************
2025-09-29 15:08:20,603 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:22,183 p=1717900 u=root n=ansible | changed: [host1] => (item=master-host1)
2025-09-29 15:08:22,228 p=1717900 u=root n=ansible | changed: [host2] => (item=master-host2)
2025-09-29 15:08:22,376 p=1717900 u=root n=ansible | changed: [host3] => (item=master-host3)
2025-09-29 15:08:23,738 p=1717900 u=root n=ansible | changed: [host1] => (item=hot-host1)
2025-09-29 15:08:24,088 p=1717900 u=root n=ansible | changed: [host2] => (item=warm-host2)
2025-09-29 15:08:24,177 p=1717900 u=root n=ansible | changed: [host3] => (item=hot-host3)
2025-09-29 15:08:25,390 p=1717900 u=root n=ansible | changed: [host1] => (item=ml-host1)
2025-09-29 15:08:25,934 p=1717900 u=root n=ansible | changed: [host2] => (item=sf-host2)
2025-09-29 15:08:25,987 p=1717900 u=root n=ansible | changed: [host3] => (item=cold-host3)
2025-09-29 15:08:26,016 p=1717900 u=root n=ansible | TASK [install_elastic : Generate JVM options for each node] *********************************************************
2025-09-29 15:08:26,292 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:27,640 p=1717900 u=root n=ansible | ok: [host1] => (item=master-host1)
2025-09-29 15:08:27,739 p=1717900 u=root n=ansible | ok: [host3] => (item=master-host3)
2025-09-29 15:08:27,784 p=1717900 u=root n=ansible | ok: [host2] => (item=master-host2)
2025-09-29 15:08:29,103 p=1717900 u=root n=ansible | ok: [host1] => (item=hot-host1)
2025-09-29 15:08:29,109 p=1717900 u=root n=ansible | ok: [host3] => (item=hot-host3)
2025-09-29 15:08:29,184 p=1717900 u=root n=ansible | ok: [host2] => (item=warm-host2)
2025-09-29 15:08:30,594 p=1717900 u=root n=ansible | ok: [host1] => (item=ml-host1)
2025-09-29 15:08:30,618 p=1717900 u=root n=ansible | ok: [host3] => (item=cold-host3)
2025-09-29 15:08:30,730 p=1717900 u=root n=ansible | ok: [host2] => (item=sf-host2)
2025-09-29 15:08:30,750 p=1717900 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 15:08:30,974 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:32,592 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:08:32,607 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:08:32,782 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:08:32,794 p=1717900 u=root n=ansible | TASK [install_elastic : Debug - Display template variables] *********************************************************
2025-09-29 15:08:32,957 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:33,007 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host1.apk-siem.local\n\nNodes to deploy:\n- master-host1: roles=master, heap=2g, offset=0\n- hot-host1: roles=data_hot,data_content, heap=4g, offset=1\n- ml-host1: roles=ml,transform, heap=3g, offset=2\n"
}
2025-09-29 15:08:33,021 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host3.apk-siem.local\n\nNodes to deploy:\n- master-host3: roles=master, heap=2g, offset=0\n- hot-host3: roles=data_hot,data_content, heap=4g, offset=1\n- cold-host3: roles=data_cold, heap=2g, offset=2\n"
}
2025-09-29 15:08:33,039 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "📋 Docker Compose Template Variables:\n=====================================\nelasticsearch_docker_path: /usr/share/siem/elasticsearch\nelasticsearch_compose_path: /usr/share/siem/elasticsearch/docker-compose.yml\nelasticsearch_nodes count: 3\nelasticsearch_seed_hosts:  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\nelasticsearch_master_node_names: master-host1,master-host2,master-host3,bda-master\nes_cluster_name: siem-cluster\nnode_hostname: host2.apk-siem.local\n\nNodes to deploy:\n- master-host2: roles=master, heap=2g, offset=0\n- warm-host2: roles=data_warm, heap=4g, offset=1\n- sf-host2: roles=ingest,transform, heap=3g, offset=2\n"
}
2025-09-29 15:08:33,065 p=1717900 u=root n=ansible | TASK [install_elastic : Debug - Check if template file exists] ******************************************************
2025-09-29 15:08:33,297 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:33,997 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:34,045 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:34,112 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:34,128 p=1717900 u=root n=ansible | TASK [install_elastic : Debug - Display template check result] ******************************************************
2025-09-29 15:08:34,276 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: True\n"
}
2025-09-29 15:08:34,319 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:34,323 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: False\n"
}
2025-09-29 15:08:34,340 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "Template file check:\nPath: /root/ansible/roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2\nExists: False\n"
}
2025-09-29 15:08:34,372 p=1717900 u=root n=ansible | TASK [install_elastic : Generate Docker Compose file for multi-node deployment] *************************************
2025-09-29 15:08:34,611 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:36,006 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:36,104 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:36,499 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:36,524 p=1717900 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 15:08:36,751 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:37,636 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:37,672 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:37,684 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:37,703 p=1717900 u=root n=ansible | TASK [install_elastic : Display docker-compose file details] ********************************************************
2025-09-29 15:08:37,855 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11087 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:08:37,907 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11093 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:08:37,925 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "Docker Compose File Check:\n==========================\nPath: /usr/share/siem/elasticsearch/docker-compose.yml\nExists: True\nSize: 11114 bytes\nOwner: root\nMode: 0644\n"
}
2025-09-29 15:08:37,954 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:37,971 p=1717900 u=root n=ansible | TASK [install_elastic : Show first 50 lines of docker-compose file if it exists] ************************************
2025-09-29 15:08:38,145 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:38,899 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:38,913 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:39,076 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:39,102 p=1717900 u=root n=ansible | TASK [install_elastic : Display docker-compose content preview] *****************************************************
2025-09-29 15:08:39,297 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host2:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host2",
        "    hostname: master-host2.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.131:9200:9200\"",
        "      - \"192.168.166.131:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host2\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host2.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:08:39,336 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host1:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host1",
        "    hostname: master-host1.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.130:9200:9200\"",
        "      - \"192.168.166.130:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host1\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host1.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:08:39,357 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:39,393 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": [
        "# roles/install_elastic/templates/docker-compose-elasticsearch.yml.j2",
        "# UPDATED: Using custom Docker bridge network with unique subnet per host",
        "",
        "version: '3.8'",
        "",
        "services:",
        "  master-host3:",
        "    image: docker.apk-group.net/elasticsearch:8.18.2",
        "    container_name: master-host3",
        "    hostname: master-host3.apk-siem",
        "    restart: unless-stopped",
        "    ",
        "    # Connect to custom Docker bridge network",
        "    networks:",
        "      - elastic",
        "    ",
        "    # Expose ports on host interface",
        "    ports:",
        "      - \"192.168.166.132:9200:9200\"",
        "      - \"192.168.166.132:9300:9300\"",
        "    ",
        "    environment:",
        "      # Node identification",
        "      - \"node.name=master-host3\"",
        "      - \"cluster.name=siem-cluster\"",
        "      ",
        "      # Network configuration - bind to all interfaces inside container",
        "      - \"network.host=0.0.0.0\"",
        "      - \"network.publish_host=host3.apk-siem.local\"",
        "      - \"http.port=9200\"",
        "      - \"transport.port=9300\"",
        "      ",
        "      # Discovery configuration - using hostnames",
        "      - \"discovery.seed_hosts= , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[,',h,o,s,t,1,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,2,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',h,o,s,t,3,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',,, ,',b,d,a,.,a,p,k,-,s,i,e,m,.,l,o,c,a,l,:,9,3,0,0,',]\"",
        "      - \"cluster.initial_master_nodes=master-host1,master-host2,master-host3,bda-master\"",
        "      ",
        "      # Node roles",
        "      - \"node.roles=['master']\"",
        "      ",
        "      # Memory settings",
        "      - \"bootstrap.memory_lock=true\"",
        "      - \"ES_JAVA_OPTS=-Xms2g -Xmx2g\"",
        "      ",
        "      # Performance settings",
        "      - \"cluster.max_shards_per_node=2000\"",
        "      - \"action.auto_create_index=true\"",
        "      ",
        "      # Security configuration",
        "      - \"xpack.security.enabled=true\"",
        "      - \"xpack.security.http.ssl.enabled=true\""
    ]
}
2025-09-29 15:08:39,418 p=1717900 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 15:08:39,560 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:08:39,595 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:08:39,632 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:39,634 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:08:39,662 p=1717900 u=root n=ansible | TASK [install_elastic : Verify docker-compose file was created] *****************************************************
2025-09-29 15:08:39,888 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:40,511 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:40,866 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:40,888 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:40,911 p=1717900 u=root n=ansible | TASK [install_elastic : Fail if docker-compose file was not created] ************************************************
2025-09-29 15:08:41,034 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:08:41,081 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:08:41,150 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:41,152 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:08:41,172 p=1717900 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 15:08:41,511 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:08:41,565 p=1717900 u=root n=ansible | included: /root/ansible/roles/install_elastic/tasks/elasticsearch-docker-deploy.yml for host1, host2, host3
2025-09-29 15:08:41,681 p=1717900 u=root n=ansible | TASK [install_elastic : Display Docker deployment banner] ***********************************************************
2025-09-29 15:08:41,788 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host1\nNetwork: elastic (172.30.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:08:41,859 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host2\nNetwork: elastic (172.31.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:08:41,918 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "🐳 Elasticsearch Docker Deployment\n=================================\nHost: host3\nNetwork: elastic (172.32.0.0/16)\nNodes: 3\n"
}
2025-09-29 15:08:41,939 p=1717900 u=root n=ansible | TASK [install_elastic : Verify Docker network exists] ***************************************************************
2025-09-29 15:08:42,805 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:42,861 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:43,022 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:43,037 p=1717900 u=root n=ansible | TASK [install_elastic : Check if Docker Compose file exists] ********************************************************
2025-09-29 15:08:43,944 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:43,951 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:44,129 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:44,147 p=1717900 u=root n=ansible | TASK [install_elastic : Fail if Docker Compose file is missing] *****************************************************
2025-09-29 15:08:44,319 p=1717900 u=root n=ansible | skipping: [host1]
2025-09-29 15:08:44,331 p=1717900 u=root n=ansible | skipping: [host2]
2025-09-29 15:08:44,362 p=1717900 u=root n=ansible | skipping: [host3]
2025-09-29 15:08:44,376 p=1717900 u=root n=ansible | TASK [install_elastic : Stop existing Elasticsearch containers] *****************************************************
2025-09-29 15:08:46,563 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:08:46,773 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:08:46,893 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:08:46,908 p=1717900 u=root n=ansible | TASK [install_elastic : Deploy Elasticsearch using Docker Compose] **************************************************
2025-09-29 15:08:50,660 p=1717900 u=root n=ansible | changed: [host1]
2025-09-29 15:08:50,881 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:08:50,960 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:08:50,980 p=1717900 u=root n=ansible | TASK [install_elastic : Wait for containers to be running] **********************************************************
2025-09-29 15:08:53,544 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:08:53,658 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:08:53,985 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:08:54,011 p=1717900 u=root n=ansible | TASK [install_elastic : Wait additional time for Elasticsearch to fully start] **************************************
2025-09-29 15:09:55,280 p=1717900 u=root n=ansible | ok: [host2]
2025-09-29 15:09:55,349 p=1717900 u=root n=ansible | ok: [host3]
2025-09-29 15:09:55,351 p=1717900 u=root n=ansible | ok: [host1]
2025-09-29 15:09:55,391 p=1717900 u=root n=ansible | TASK [install_elastic : Display container deployment status] ********************************************************
2025-09-29 15:09:55,539 p=1717900 u=root n=ansible | fatal: [host1]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:09:55,575 p=1717900 u=root n=ansible | fatal: [host2]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:09:55,627 p=1717900 u=root n=ansible | fatal: [host3]: FAILED! => {"msg": "Unexpected templating type error occurred on (🐳 Elasticsearch Docker Deployment Status\n=======================================\n\nHost: {{ inventory_hostname }}\nNetwork: {{ docker_network_name }} ({{ docker_network_subnet }})\nExpected containers: {{ elasticsearch_nodes | length }}\nRunning containers: {{ running_containers.stdout | default('Unknown') }}\n\n📋 Deployed Nodes:\n{% for node in elasticsearch_nodes %}\n- {{ node.name }}: {{ 'https' if es_enable_http_ssl else 'http' }}://{{ hostvars[inventory_hostname].node_hostname }}:{{ es_http_base_port + node.port_offset }}\n{% endfor %}\n\n🔧 Management Commands:\n# View all containers\ncd {{ elasticsearch_docker_path }} && docker-compose ps\n\n# View logs\ncd {{ elasticsearch_docker_path }} && docker-compose logs [node-name]\n\n# Check network\ndocker network inspect {{ docker_network_name }}\n\n# Restart services\ncd {{ elasticsearch_docker_path }} && docker-compose restart\n\n✅ Docker deployment completed!): can only concatenate str (not \"int\") to str. can only concatenate str (not \"int\") to str"}
2025-09-29 15:09:55,693 p=1717900 u=root n=ansible | TASK [install_elastic : Verify cluster health] **********************************************************************
2025-09-29 15:09:55,752 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:09:55,829 p=1717900 u=root n=ansible | TASK [install_elastic : Display completion message] *****************************************************************
2025-09-29 15:09:55,891 p=1717900 u=root n=ansible | skipping: [lb1]
2025-09-29 15:09:55,915 p=1717900 u=root n=ansible | TASK [install_elastic : Handle installation failure] ****************************************************************
2025-09-29 15:09:56,101 p=1717900 u=root n=ansible | ok: [host1] => {
    "msg": "❌ Elasticsearch installation failed on host1!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:09:56,133 p=1717900 u=root n=ansible | ok: [host2] => {
    "msg": "❌ Elasticsearch installation failed on host2!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:09:56,167 p=1717900 u=root n=ansible | ok: [host3] => {
    "msg": "❌ Elasticsearch installation failed on host3!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:09:56,219 p=1717900 u=root n=ansible | ok: [bda] => {
    "msg": "❌ Elasticsearch installation failed on bda!\n\nPlease check:\n1. Docker service: systemctl status docker\n2. Variables in inventory (especially node_hostname)\n3. /etc/hosts entries for hostname resolution\n4. Network connectivity between hosts\n5. Directory permissions\n6. Certificate generation\n\nFor detailed troubleshooting, check the logs above.\n"
}
2025-09-29 15:09:56,523 p=1717900 u=root n=ansible | RUNNING HANDLER [pre_checks : Reload sysctl] ************************************************************************
2025-09-29 15:09:57,401 p=1717900 u=root n=ansible | changed: [host2]
2025-09-29 15:09:57,532 p=1717900 u=root n=ansible | changed: [host3]
2025-09-29 15:09:58,053 p=1717900 u=root n=ansible | changed: [bda]
2025-09-29 15:09:58,224 p=1717900 u=root n=ansible | PLAY RECAP **********************************************************************************************************
2025-09-29 15:09:58,225 p=1717900 u=root n=ansible | bda                        : ok=27   changed=3    unreachable=0    failed=0    skipped=3    rescued=1    ignored=0   
2025-09-29 15:09:58,226 p=1717900 u=root n=ansible | host1                      : ok=72   changed=13   unreachable=0    failed=0    skipped=12   rescued=1    ignored=0   
2025-09-29 15:09:58,226 p=1717900 u=root n=ansible | host2                      : ok=74   changed=16   unreachable=0    failed=0    skipped=11   rescued=1    ignored=0   
2025-09-29 15:09:58,226 p=1717900 u=root n=ansible | host3                      : ok=74   changed=16   unreachable=0    failed=0    skipped=11   rescued=1    ignored=0   
2025-09-29 15:09:58,226 p=1717900 u=root n=ansible | lb1                        : ok=12   changed=1    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
